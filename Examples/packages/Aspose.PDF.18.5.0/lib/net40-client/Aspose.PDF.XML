<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Aspose.Pdf</name>
  </assembly>
  <members>
    <member name="T:Aspose.Pdf.BaseActionCollection">
      <summary>
            Class incapsulates basic actions wuth page/annotation/field interactive actions
            </summary>
    </member>
    <member name="M:Aspose.Pdf.BaseActionCollection.RemoveActions">
      <summary>
            Removes all actions of the annotation. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.BaseOperatorCollection">
      <summary>
            Represents base class for operator collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BaseOperatorCollection.Item(System.Int32)">
      <summary>
            Gets operator by its index.
            </summary>
      <param name="index">Index of operator. Numbering is starts from 1.</param>
      <returns>Operator from requested index</returns>
    </member>
    <member name="M:Aspose.Pdf.BaseOperatorCollection.GetEnumerator">
      <summary>
            Returns enumerator for collection
            </summary>
      <returns>Collection enumerator</returns>
    </member>
    <member name="M:Aspose.Pdf.BaseOperatorCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies operators into operators list.
            </summary>
      <param name="array">Array with operators which must to be copied. This array must be Object[] or Operator[].</param>
      <param name="index">Starting index from which operators will be copied</param>
    </member>
    <member name="P:Aspose.Pdf.BaseOperatorCollection.Count">
      <summary>
            Gets count of operators in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BaseOperatorCollection.SyncRoot">
      <summary>
            Gets synchronization object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BaseOperatorCollection.IsSynchronized">
      <summary>
            Returns true if object is synchronized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BaseOperatorCollection.IsFastTextExtractionMode">
      <summary>
            Indicates wheather collection is limited to fast text extraction
            </summary>
    </member>
    <member name="M:Aspose.Pdf.BaseOperatorCollection.SuppressUpdate">
      <summary> 
            Suppresses update contents data.
            The contents stream is not updated until ResumeUpdate is called.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.BaseOperatorCollection.ResumeUpdate">
      <summary>
            Resumes document update.
            Updates contents stream in case there are any pending changes.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.BaseOperatorCollection.Insert(System.Int32,Aspose.Pdf.Operator)">
      <summary>
            Inserts operator into collection.
            </summary>
      <param name="index">Index where new operator must be added</param>
      <param name="op">Operator which will be insterted</param>
    </member>
    <member name="M:Aspose.Pdf.BaseOperatorCollection.Add(Aspose.Pdf.Operator)">
      <summary>
            Adds new operator into collection.
            </summary>
      <param name="op">Operator which must be added</param>
    </member>
    <member name="M:Aspose.Pdf.BaseOperatorCollection.CancelUpdate">
      <summary>
            Cancels last update.
            This method may be called when the change should not raise contents update.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ColorType">
      <summary>
            Specifies color type of elements on page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColorType.Rgb">
      <summary>
            RGB color type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColorType.Grayscale">
      <summary>
            Grayscale color type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColorType.BlackAndWhite">
      <summary>
            Black and white color type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColorType.Undefined">
      <summary>
            Undefined color type value.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ComHelper">
      <summary>
            Provides methods for COM clients to load a document into Aspose.Pdf.
            </summary>
      <remarks>
            Use the ComHelper class to load a document from a file or stream into a Document object in a COM application.
            The Document class provides a default constructor to create a new document
            and also provides overloaded constructors to load a document from a file or stream.
            If you are using Aspose.Words from a .NET application, you can use all of the Document constructors directly, but if you are using Aspose.Pdf from a COM application,
            only the default Document constructor is available.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.ComHelper.OpenStream(System.IO.Stream)">
      <summary>
            Initialize and return new Document instance from the <paramref name="input" /> stream.
            </summary>
      <param name="input">Stream with pdf document. </param>
      <returns>Document object</returns>
    </member>
    <member name="M:Aspose.Pdf.ComHelper.OpenStream(System.IO.Stream,System.String)">
      <summary>
            Initialize and return new Document instance from the <paramref name="input" /> stream.
            </summary>
      <param name="input">Input stream object, corresponding pdf is password protected.</param>
      <param name="password">User or owner password.</param>
      <returns>Document object</returns>
    </member>
    <member name="M:Aspose.Pdf.ComHelper.OpenStream(System.IO.Stream,System.Boolean)">
      <summary>
            Initialize and return new Document instance from the <paramref name="input" /> stream.
            </summary>
      <param name="input">Stream with pdf document. </param>
      <param name="isManagedStream">if set to <c>true</c> inner stream is closed before exit; otherwise, is not.</param>
      <returns>Document object</returns>
    </member>
    <member name="M:Aspose.Pdf.ComHelper.OpenStream(System.IO.Stream,System.String,System.Boolean)">
      <summary>
            Initialize and return new Document instance from the <paramref name="input" /> stream.
            </summary>
      <param name="input">Stream with pdf document. </param>
      <param name="password">User or owner password.</param>
      <param name="isManagedStream">if set to <c>true</c> inner stream is closed before exit; otherwise, is not.</param>
      <returns>Document object</returns>
    </member>
    <member name="M:Aspose.Pdf.ComHelper.OpenStream(System.IO.Stream,Aspose.Pdf.LoadOptions)">
      <summary>
            Open and return an existing document from a stream providing necessary converting to get pdf document.
            </summary>
      <param name="input">
            Input stream to convert into pdf document.
            </param>
      <param name="options">
            Represents properties for converting <paramref name="input" /> into pdf document.
            </param>
      <returns>Document object</returns>
    </member>
    <member name="M:Aspose.Pdf.ComHelper.OpenFile(System.String)">
      <summary>
            Just create and return Document using <paramref name="filename" />. The same as <see cref="M:Aspose.Pdf.Document.#ctor(System.IO.Stream)" />.
            </summary>
      <param name="filename">The name of the pdf document file. </param>
      <returns>Document object</returns>
    </member>
    <member name="M:Aspose.Pdf.ComHelper.OpenFile(System.String,System.String)">
      <summary>
            Initialize and return new instance of the <see cref="T:Aspose.Pdf.Document" /> class for working with encrypted document. 
            </summary>
      <param name="filename">Document file name.</param>
      <param name="password">User or owner password.</param>
      <returns>Document object</returns>
    </member>
    <member name="M:Aspose.Pdf.ComHelper.OpenFile(System.String,System.String,System.Boolean)">
      <summary>
            Initialize new instance of the <see cref="T:Aspose.Pdf.Document" /> class for working with encrypted document. 
            </summary>
      <param name="filename">Document file name.</param>
      <param name="password">User or owner password.</param>
      <param name="isManagedStream">if set to <c>true</c> inner stream is closed before exit; otherwise, is not.</param>
      <returns>Document object</returns>
    </member>
    <member name="M:Aspose.Pdf.ComHelper.OpenFile(System.String,Aspose.Pdf.LoadOptions)">
      <summary>
            Open an existing document from a file providing necessary converting oprions to get pdf document.
            </summary>
      <param name="filename">
            Input file to convert into pdf document.
            </param>
      <param name="options">
            Represents properties for converting <paramref name="filename" /> into pdf document.
            </param>
      <returns>Document object</returns>
    </member>
    <!-- Badly formed XML comment ignored for member "M:Aspose.Pdf.Engine.CommonData.PageContent.Operators.OperationContext.FinalizeUnicodeTTFFonts" -->
    <member name="T:Aspose.Pdf.Engine.CommonData.Text.CMaps.NamespaceDoc">
      <summary>
            The <b>Aspose.Pdf.Engine.CommonData.Text.CMaps</b> is a root namespace for all CMap classes.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:Aspose.Pdf.Engine.CommonData.Text.CMaps.ToUnicodeCMapDataHolder.SupercedeSelectorForCode(System.UInt32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Pdf.Engine.CommonData.Text.CMaps.ToUnicodeCMapDataHolder.SupercedeSelectorForCode(System.UInt32,System.Collections.Generic.List{System.Int32})" -->
    <!-- Badly formed XML comment ignored for member "F:Aspose.Pdf.Engine.IO.ConvertStrategies.ConversionFontData._puaSymbols" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Pdf.Engine.Presentation.GDIImpl.Utils.OctreeQuantizer.Octree.Palletize(System.Int32)" -->
    <member name="T:Aspose.Pdf.Engine.Presentation.NamespaceDoc">
      <summary>
            The <b>Aspose.Pdf.Presentation</b> namespace provides classes that allow to interact with document presentation.  
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:Aspose.Pdf.Engine.Presentation.IPresenter.ConvertMarkedContentToLayers" -->
    <!-- Badly formed XML comment ignored for member "P:Aspose.Pdf.Engine.Presentation.Presenter.ConvertMarkedContentToLayers" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Pdf.Engine.Data.IPdfArray.ToArrayList" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Pdf.Engine.Data.PdfArray.ToArrayList" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Pdf.Engine.Data.PdfObjectGroup.SkipBlank(Aspose.Pdf.Engine.IO.Stream.IPdfStreamReader)" -->
    <member name="T:Aspose.Pdf.Text.MemoryFontSource">
      <summary>
             Represents single font file source.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.MemoryFontSource.#ctor(System.Byte[])">
      <summary> 
            Initializes a new instance of <see cref="T:Aspose.Pdf.Text.MemoryFontSource" /> class.
            </summary>
      <param name="fontBytes">Font file byte array.</param>
    </member>
    <member name="P:Aspose.Pdf.Text.MemoryFontSource.FontBytes">
      <summary>
            Font file byte array. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.MemoryFontSource.Equals(System.Object)">
      <summary>
            Check if font file source objects are equal.
            </summary>
      <param name="obj">Font file source object which will be compared.</param>
      <returns>True if both objects are font file sources targeted to the same file.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.MemoryFontSource.Dispose">
      <summary>
            Releases internal resources.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.FileFontSource">
      <summary>
             Represents single font file source.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FileFontSource.#ctor(System.String)">
      <summary> 
            Initializes a new instance of <see cref="T:Aspose.Pdf.Text.FileFontSource" /> class.
            </summary>
      <param name="filePath">Path to the font file.</param>
    </member>
    <member name="P:Aspose.Pdf.Text.FileFontSource.FilePath">
      <summary>
            Path to the font file. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FileFontSource.Equals(System.Object)">
      <summary>
            Check if font file source objects are equal.
            </summary>
      <param name="obj">Font file source object which will be compared.</param>
      <returns>True if both objects are font file sources targeted to the same file.</returns>
    </member>
    <member name="T:Aspose.Pdf.Text.FolderFontSource">
      <summary>
             Represents the folder that contains font files. 
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FolderFontSource.#ctor(System.String)">
      <summary> 
            Initializes a new instance of <see cref="T:Aspose.Pdf.Text.FolderFontSource" /> class.
            </summary>
      <param name="folderPath">Path to the folder.</param>
    </member>
    <member name="P:Aspose.Pdf.Text.FolderFontSource.FolderPath">
      <summary>
            Path to the folder that contains font files. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FolderFontSource.Equals(System.Object)">
      <summary>
            Check if folder font source objects are equal.
            </summary>
      <param name="obj">Folder font source object which will be compared.</param>
      <returns>True if both objects are folder font sources targeted to the same folder.</returns>
    </member>
    <member name="T:Aspose.Pdf.Text.FontSource">
      <summary>
             Represents a base class fot font source.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.FontSourceCollection">
      <summary>
            Represents font sources collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontSourceCollection.Count">
      <summary>
             Gets the number of <see cref="T:Aspose.Pdf.Text.Font" /> object elements actually contained in the collection. 
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontSourceCollection.SyncRoot">
      <summary>
             Gets an object that can be used to synchronize access to the collection.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontSourceCollection.IsSynchronized">
      <summary>
             Gets a value indicating whether access to the collection is synchronized (thread safe). 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSourceCollection.GetEnumerator">
      <summary>
             Returns an enumerator for the entire collection.
            </summary>
      <returns>Enumerator object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSourceCollection.CopyTo(System.Array,System.Int32)">
      <summary>
             Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
            </summary>
      <param name="array">Array of objects which will be copied.</param>
      <param name="index">Starting index from which copying will be started.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSourceCollection.Add(Aspose.Pdf.Text.FontSource)">
      <summary>
            Adds new font source object to the collection.
            </summary>
      <param name="fontSource">Font source.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSourceCollection.Clear">
      <summary>
            Clears the font source collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSourceCollection.Delete(Aspose.Pdf.Text.FontSource)">
      <summary>
            Deletes the font source element.
            </summary>
      <param name="fontSource">FontSource object that will be deleted.</param>
    </member>
    <member name="P:Aspose.Pdf.Text.FontSourceCollection.Item(System.Int32)">
      <summary>
            Gets the font element at the specified index.
            </summary>
      <param name="index">Index within the collection.</param>
      <returns>Fout source object.</returns>
    </member>
    <member name="T:Aspose.Pdf.Text.SystemFontSource">
      <summary>
             Represents all fonts installed to the system. 
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.SystemFontSource.Equals(System.Object)">
      <summary>
            Check if system font source objects are equal.
            </summary>
      <param name="obj">System font source object which will be compared.</param>
      <returns>True if both objects are system font sources, false otherwise.</returns>
    </member>
    <member name="T:Aspose.Pdf.Text.CustomFontSubstitutionBase">
      <summary>
             Represents a base class for custom font substitution strategy.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.CustomFontSubstitutionBase.TrySubstitute(Aspose.Pdf.Text.CustomFontSubstitutionBase.OriginalFontSpecification,Aspose.Pdf.Text.Font@)">
      <summary>
            Substitutes original font with another font.
            </summary>
      <remarks>
            The class CustomFontSubstitutionBase should be inherited to implement custom font substitution logic.
            TrySubstitute method should be overridden properly:
            
            Must return true in case substitution is required. substitutionFont must be set to valid Font object.
            Must return false in case no substitution is required. substitutionFont may be set to null. 
            </remarks>
      <param name="originalFontSpecification">Original font specification.</param>
      <param name="substitutionFont">Substitution font.</param>
      <returns>True in case substitution was successfull.</returns>
    </member>
    <member name="T:Aspose.Pdf.Text.CustomFontSubstitutionBase.OriginalFontSpecification">
      <summary>
            Represents original font specification. 
            </summary>
      <remarks>
            Provides info related to original font such as <seealso cref="P:Aspose.Pdf.Text.CustomFontSubstitutionBase.OriginalFontSpecification.OriginalFontName" />, <seealso cref="P:Aspose.Pdf.Text.CustomFontSubstitutionBase.OriginalFontSpecification.IsEmbedded" /> flag.
            Also provides <seealso cref="P:Aspose.Pdf.Text.CustomFontSubstitutionBase.OriginalFontSpecification.IsSubstitutionUnavoidable" /> flag that helps to check is the substitution will anyway happen with the font 
            and the user may override the default substitution logic.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.CustomFontSubstitutionBase.OriginalFontSpecification.OriginalFontName">
      <summary>
            Gets original font name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.CustomFontSubstitutionBase.OriginalFontSpecification.IsEmbedded">
      <summary>
            Gets a value that indicates whether the font is embedded.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.CustomFontSubstitutionBase.OriginalFontSpecification.IsSubstitutionUnavoidable">
      <summary>
            Gets a value that indicates that the substitution is unavoidable. 
            </summary>
      <remarks>
            Returns true in case substitution was requested because of absence of the original font or in case original font cannot be used in context of some task.
            In case user ignores the flag and doesn't substitute the font - default font substitution procedure is performed.
            But it provides opportunity for the user to alternate standard font substitution procedure and set better font to the system.
            
            Returns false in case original font is present, valid, but it is allowed for the user to substitute it.  
            </remarks>
    </member>
    <member name="T:Aspose.Pdf.Text.SystemFontsSubstitution">
      <summary>
             Represents a class for font substitution strategy that substitutes fonts with system fonts.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.SystemFontsSubstitution.#ctor(Aspose.Pdf.Text.SubstitutionFontCategories)">
      <summary> 
            Initializes a new instance of <see cref="T:Aspose.Pdf.Text.SystemFontsSubstitution" /> class.
            </summary>
      <param name="fontCategories">Target font categories to substitute with system fonts</param>
    </member>
    <member name="P:Aspose.Pdf.Text.SystemFontsSubstitution.FontCategories">
      <summary>
            Gets or sets substitution font categories that should be substituted with system fonts.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.SystemFontsSubstitution.DefaultFont">
      <summary>
            Gets or sets default substitution font.
            The font is used when no other valid substitution were found but initial font belongs to target substitution category (<see cref="P:Aspose.Pdf.Text.SystemFontsSubstitution.FontCategories" />).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.SubstitutionFontCategories">
      <summary>
            Represents font categories that can be substituted.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.SubstitutionFontCategories.TheSameNamedEmbeddedFonts">
      <summary>
            The fonts that are named the same as system fonts.
            Those fonts are mostly safe to be substituted with the same named system fonts.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.SubstitutionFontCategories.AllEmbeddedFonts">
      <summary>
            All embedded fonts are substituted.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.FontSubstitution">
      <summary>
             Represents a base class fot font substitution strategies.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.FontSubstitutionCollection">
      <summary>
            Represents font substitution strategies collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontSubstitutionCollection.Count">
      <summary>
             Gets the number of <see cref="T:Aspose.Pdf.Text.Font" /> object elements actually contained in the collection. 
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontSubstitutionCollection.SyncRoot">
      <summary>
             Gets an object that can be used to synchronize access to the collection.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontSubstitutionCollection.IsSynchronized">
      <summary>
             Gets a value indicating whether access to the collection is synchronized (thread safe). 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSubstitutionCollection.GetEnumerator">
      <summary>
             Returns an enumerator for the entire collection.
            </summary>
      <returns>Enumerator object</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSubstitutionCollection.CopyTo(System.Array,System.Int32)">
      <summary>
             Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
            </summary>
      <param name="array">Array of objects which will be copied.</param>
      <param name="index">Starting index from which copying will be started.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSubstitutionCollection.Add(Aspose.Pdf.Text.FontSubstitution)">
      <summary>
            Adds new font substitution object to the collection.
            </summary>
      <param name="fontSubstitution">Font substitution strategy.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.FontSubstitutionCollection.Clear">
      <summary>
            Clears the font substitution collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontSubstitutionCollection.Item(System.Int32)">
      <summary>
            Gets the font element at the specified index.
            </summary>
      <param name="index">Index within the collection.</param>
      <returns>FontSubstitution object.</returns>
    </member>
    <member name="T:Aspose.Pdf.Text.SimpleFontSubstitution">
      <summary>
             Represents a class for simple font substitution strategy.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.SimpleFontSubstitution.OriginalFontName">
      <summary>
            Gets original font name that should be substituted with <see cref="P:Aspose.Pdf.Text.SimpleFontSubstitution.SubstitutionFontName" /></summary>
    </member>
    <member name="P:Aspose.Pdf.Text.SimpleFontSubstitution.SubstitutionFontName">
      <summary>
            Gets font name that should substitute the <see cref="P:Aspose.Pdf.Text.SimpleFontSubstitution.OriginalFontName" /></summary>
    </member>
    <member name="M:Aspose.Pdf.Text.SimpleFontSubstitution.#ctor(System.String,System.String,System.Boolean)">
      <summary> 
            Initializes a new instance of <see cref="T:Aspose.Pdf.Text.SimpleFontSubstitution" /> class.
            </summary>
      <param name="originalFontName">Original font name.</param>
      <param name="substitutionFontName">Substitution font name.</param>
      <param name="forcedBySaveOption">Substitution forced by DefaultFontName save option.</param>
    </member>
    <member name="T:Aspose.Pdf.Text.IFontOptions">
      <summary>
            Useful properties to tune Font behaviour
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.IFontOptions.NotifyAboutFontEmbeddingError">
      <summary>
            Sometimes it's not possible to embed desired font into document. There are many reasons, for example
            license restrictions or when desired font was not found on destination computer.
            When this situation comes it's not simply to detect, because desired font is embedded via set 
            of property flag Font.IsEmbedded = true; Of course it's possible to read this property immediately after it was set but
            it's not convenient approach. Flag NotifyAboutFontEmbeddingError enforces exception mechanism 
            for cases when attempt to embed font became failed. If this flag is set an exception of type
            <see cref="T:Aspose.Pdf.FontEmbeddingException" /> will be thrown. By default false.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.NamespaceDoc">
      <summary>
            The <b>Aspose.Pdf.Text</b> namespace provides classes that allow to extract text, add text, manipulate existing text of a document.  
            It also contain classes that allow to extract, replace, substitute fonts of a document.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.MarkupParagraph">
      <summary>
            Represents a paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.MarkupParagraph.Points">
      <summary>
            Points of polygon that describes paragraph.
            Starting point is lower left corner of the paragraph. And next points are in anti-clockwise sequence.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.MarkupParagraph.Fragments">
      <summary>
            Collection of not empty <see cref="T:Aspose.Pdf.Text.TextFragment" /> objects of the paragraph.
            </summary>
      <remarks>
            The <see cref="T:Aspose.Pdf.Text.TextFragment" /> object provides access to the search occurrence text, text properties, and allows to edit text and change the text state (font, font size, color etc).
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.MarkupParagraph.Lines">
      <summary>
            Lines of paragraph. Each line represented by list of text fragments.
            </summary>
      <remarks>
            The <see cref="T:Aspose.Pdf.Text.TextFragment" /> object provides access to the search occurrence text, text properties, and allows to edit text and change the text state (font, font size, color etc).
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.MarkupParagraph.Text">
      <summary>
            Gets <see cref="T:System.String" /> text object that the <see cref="T:Aspose.Pdf.Text.MarkupParagraph" /> object represents.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.MarkupSection">
      <summary>
            Represents a markup section - the rectangular region of a page that contains text and can be visually divided from another text blocks.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.MarkupSection.Rectangle">
      <summary>
            Section rectangle
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.MarkupSection.Fragments">
      <summary>
            Collection of not empty <see cref="T:Aspose.Pdf.Text.TextFragment" /> objects that are inside the section.
            </summary>
      <remarks>
            The <see cref="T:Aspose.Pdf.Text.TextFragment" /> object provides access to the search occurrence text, text properties, and allows to edit text and change the text state (font, font size, color etc).
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.MarkupSection.Paragraphs">
      <summary>
            Collection of <see cref="T:Aspose.Pdf.Text.MarkupParagraph" /> objects that are inside the section.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.PageMarkup">
      <summary>
            Page markup represented by collections of <see cref="T:Aspose.Pdf.Text.MarkupSection" /> and <see cref="T:Aspose.Pdf.Text.MarkupParagraph" />.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.PageMarkup.Number">
      <summary>
            Gets processed page number.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.PageMarkup.Rectangle">
      <summary>
            Gets processed page rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.PageMarkup.Sections">
      <summary>
            Gets collection of <see cref="T:Aspose.Pdf.Text.MarkupSection" /> that was found on the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.PageMarkup.Paragraphs">
      <summary>
            Gets collection of <see cref="T:Aspose.Pdf.Text.MarkupParagraph" /> that was found on the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.PageMarkup.TextFragments">
      <summary>
            Gets collection of <see cref="T:Aspose.Pdf.Text.TextFragment" /> that was found on the page.
            </summary>
      <remarks>
            The <see cref="T:Aspose.Pdf.Text.TextFragment" /> object provides access to the search occurrence text, text properties, and allows to edit text and change the text state (font, font size, color etc).
            </remarks>
    </member>
    <member name="T:Aspose.Pdf.Text.ParagraphAbsorber">
      <summary>
            Represents an absorber object of page structure objects such as sections and paragraphs.
            Performs search for sections and paragraphs of text and provides access for rectangles and polydons that describes it in text coordinate space. 
            Also performs text segments search and provides access to search results via <see cref="!:TextFragments" /> collections grouped by structure elements.
            </summary>
      <remarks>
            When the search is completed the <see cref="P:Aspose.Pdf.Text.ParagraphAbsorber.PageMarkups" /> collection will contains <see cref="T:Aspose.Pdf.Text.PageMarkup" /> objects that represents page structure by collections of <see cref="T:Aspose.Pdf.Text.MarkupSection" /> and <see cref="T:Aspose.Pdf.Text.MarkupParagraph" />.
            The <see cref="T:Aspose.Pdf.Text.TextFragment" /> object provides access to the search occurrence text, text properties, and allows to edit text and change the text state (font, font size, color etc).
            </remarks>
      <example>
            The example demonstrates how to find first text segment of each paragraph on the first PDF document page and highlight it.
            <code lang="C#"> 
            // Open document
            Document doc = new Document("input.pdf");
            
            // Create ParagraphAbsorber object
            ParagraphAbsorber absorber = new ParagraphAbsorber();
            
            // Accept the absorber for first page
            absorber.Visit(doc.Pages[1]);
            
            // Get markup object of first page
            PageMarkup markup = absorber.PageMarkups[0];
            
            // Loop through structure elements of the page text to find first text fragment of each paragraph
            foreach (MarkupSection section in markup.Sections)
            {
                foreach (MarkupParagraph paragraph in section.Paragraphs)
                {
                    TextFragment fragment = paragraph.Fragments[0];
                    // Update text properties
                    fragment.TextState.BackgroundColor = Color.LightBlue;
                }
            }
            
            // Save document
            doc.Save(GetOutputPath("output.pdf"));
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.ParagraphAbsorber.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.ParagraphAbsorber" /> that performs search for sections/paragraphs of the document or page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.ParagraphAbsorber.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.ParagraphAbsorber" /> that performs search for sections/paragraphs of the document or page.
            </summary>
      <remarks>
            See <see cref="P:Aspose.Pdf.Text.ParagraphAbsorber.SectionsSearchDepth" /> property for more hints about the parameter. 
            </remarks>
      <param name="sectionsSearchDepth">Number of sequential searches for more fine elements of structure that will be performed.</param>
    </member>
    <member name="P:Aspose.Pdf.Text.ParagraphAbsorber.PageMarkups">
      <summary>
            Gets collection of <see cref="T:Aspose.Pdf.Text.PageMarkup" /> that were absorbed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.ParagraphAbsorber.SectionsSearchDepth">
      <summary>
            Gets or sets value that instructs how many times sequential searches for more fine elements of structure will be performed.
            Default search depth is 3.
            It means three searches for horizontally divided sections (headers, paragraphs etc) and three searches for vertically divided ones (columns).
            </summary>
      <remarks>
            Increasing of this value may lead to minor decreasing performance with no visible changes in search result.
            Decreasing of this value may lead to incorrect determination of paragraphs in sections.
            We are not recommend to set value less than default if you aren't desire to get only 'rough' elements of page structure. 
            </remarks>
    </member>
    <!-- Badly formed XML comment ignored for member "M:Aspose.Pdf.Text.ParagraphAbsorber.Visit(Aspose.Pdf.Document)" -->
    <member name="M:Aspose.Pdf.Text.ParagraphAbsorber.Visit(Aspose.Pdf.Page)">
      <summary>
            Performs search on the specified <see cref="T:Aspose.Pdf.Page" />.
            </summary>
      <param name="page">Pdf pocument page object.</param>
    </member>
    <member name="T:Aspose.Pdf.Text.AbsorbedCell">
      <summary>
            Represents cell of table that exist on the page
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.AbsorbedCell.TextFragments">
      <summary>
            Gets collection of <see cref="T:Aspose.Pdf.Text.TextFragment" /> objects that describes text containing in the cell
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.AbsorbedCell.Rectangle">
      <summary>
            Gets rectangle that describes position of the cell on page
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.AbsorbedRow">
      <summary>
            Represents row of table that exist on the page
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.AbsorbedRow.CellList">
      <summary>
            Gets readonly IList containing cells of the row
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.AbsorbedRow.Rectangle">
      <summary>
            Gets rectangle that describes position of the row on page
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.AbsorbedTable">
      <summary>
            Represents table that exist on the page
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.AbsorbedTable.RowList">
      <summary>
            Gets readonly IList containing rows of the table
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.AbsorbedTable.Rectangle">
      <summary>
            Gets rectangle that describes position of the table on page
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.AbsorbedTable.PageNum">
      <summary>
            Gets number of the page containing this table
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.ITableElement">
      <summary>
            This interface represents an element of existing table extracted by TableAbsorber.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.ITableElement.Rectangle">
      <summary>
            Gets rectangle that describes position of table element on the page
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TableAbsorber">
      <summary>
            Represents an absorber object of table elements.
            Performs search and provides access to search results via <see cref="P:Aspose.Pdf.Text.TableAbsorber.TableList" /> collection.
            </summary>
      <example>
            The example demonstrates how to find table on the first PDF document page and replace the text in a table cell.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create TableAbsorber object to find tables
            TableAbsorber absorber = new TableAbsorber();
            
            // Visit first page with absorber
            absorber.Visit(pdfDocument.Pages[1]);
            
            // Get access to first table on page, their first cell and text fragments in it
            TextFragment fragment = absorber.TableList[0].RowList[0].CellList[0].TextFragments[1];
            
            // Change text of the first text fragment in the cell
            fragment.Text = "hi world";
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.TableAbsorber.TextSearchOptions">
      <summary>
            Gets or sets text search options.
            </summary>
      <remarks>
            Allows to define several options that will be used during search text containing in tables.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TableAbsorber.TableList">
      <summary>
            Returns readonly IList containing tables that were found
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TableAbsorber.#ctor(Aspose.Pdf.Text.TextSearchOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TableAbsorber" /> with text search options.
            </summary>
      <remarks>
            Performs searching for tables and provides access to the tables via <see cref="P:Aspose.Pdf.Text.TableAbsorber.TableList" /> object.
            </remarks>
      <param name="textSearchOptions">Text search options</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TableAbsorber.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TableAbsorber" />.
            </summary>
      <remarks>
            Performs searching for tables and provides access to the tables via <see cref="P:Aspose.Pdf.Text.TableAbsorber.TableList" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Text.TableAbsorber.Visit(Aspose.Pdf.Page)">
      <summary>
            Extracts tables on the specified page
            </summary>
      <example>
            The example demonstrates how to extract table on the first PDF document page.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create TableAbsorber object to find tables
            TableAbsorber absorber = new TableAbsorber();
            
            // Visit first page with absorber
            absorber.Visit(pdfDocument.Pages[1]);
            
            // Get access to first table on page, their first cell and text fragments in it
            TextFragment fragment = absorber.TableList[0].RowList[0].CellList[0].TextFragments[1];
            
            // Change text of the first text fragment in the cell
            fragment.Text = "hi world";
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
      <param name="page">Pdf pocument page object.</param>
    </member>
    <member name="T:Aspose.Pdf.Text.TabStop">
      <summary>
            Represents a custom Tab stop position in a paragraph.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TabStop.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TabStop" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TabStop.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TabStop" /> class with specified position.
            </summary>
      <param name="position">The position of the tab stop.</param>
    </member>
    <member name="P:Aspose.Pdf.Text.TabStop.Position">
      <summary>
            Gets or sets a float value that indicates the tab stop position.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TabStop.LeaderType">
      <summary>
            Gets or sets a <see cref="T:TabLeaderType" /> enum that indicates the tab leader type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TabStop.AlignmentType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Text.TabStop.AlignmentType" /> enum that indicates the tab tab alignment type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TabStop.IsReadOnly">
      <summary>
            Gets value indicating that this <see cref="T:Aspose.Pdf.Text.TabStop" /> instance is already attached to <see cref="T:Aspose.Pdf.Text.TextFragment" /> and became readonly
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TabStops">
      <summary>
            Represents a collection of <see cref="T:Aspose.Pdf.Text.TabStop" /> objects.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TabStops.IsReadOnly">
      <summary>
            Gets value indicating that this <see cref="T:Aspose.Pdf.Text.TabStops" /> instance is already attached to <see cref="T:Aspose.Pdf.Text.TextFragment" /> and became readonly.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TabStops.Add">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TabStop" /> class and add it to the 
            TabStops collection.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Text.TabStop" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.TabStops.Add(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TabStop" /> class with specified position and 
            add it to the TabStops collection.
            </summary>
      <param name="position">The position of the tab stop.</param>
      <returns>The new <see cref="T:Aspose.Pdf.Text.TabStop" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.TabStops.Add(Aspose.Pdf.Text.TabStop)">
      <summary>
            Add instance of the <see cref="T:Aspose.Pdf.Text.TabStop" /> class to the TabStops collection.
            </summary>
      <param name="tabStop">The <see cref="T:Aspose.Pdf.Text.TabStop" /> object.</param>
    </member>
    <member name="P:Aspose.Pdf.Text.TabStops.Count">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TabStop" /> class with specified position and 
            add it to the TabStops collection.
            </summary>
      <param name="position">The position of the tab stop.</param>
      <returns>The new <see cref="T:Aspose.Pdf.Text.TabStop" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.TabStops.Add(System.Single,TabLeaderType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TabStop" /> class with specified position and leader 
            type and add it to the TabStops collection.
            </summary>
      <param name="position">The position of the tab stop.</param>
      <param name="leaderType">The leader type of the tab stop.</param>
      <returns>The new <see cref="T:Aspose.Pdf.Text.TabStop" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.TabStops.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Text.TabStops" /> objects.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Text.TabStops" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Text.TabStops.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Text.TabStop" /> object from the collection according to TabStop index.
            </summary>
      <param name="index">Zero-based index of element in <see cref="T:Aspose.Pdf.Text.TabStops" /> collection.</param>
      <returns>
        <see cref="T:Aspose.Pdf.Text.TabStop" /> object.</returns>
    </member>
    <member name="T:Aspose.Pdf.Text.TextExtractionError">
      <summary>
            Describes the text extraction error has appeared in the PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextExtractionError.Summary">
      <summary>
            Brief description of the error.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextExtractionError.Description">
      <summary>
            Expanded description of the error.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextExtractionError.Location">
      <summary>
            Location of the error.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextExtractionError.FontKey">
      <summary>
            Key (PDF name) of the Font object that is used for showing text that causes extraction error.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextExtractionError.FontName">
      <summary>
            Readable (internal) name of the Font object that is used for showing text that causes extraction error.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextExtractionError.ExtractedText">
      <summary>
            Text that was actually extracted.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextExtractionErrorLocation">
      <summary>
            Represents the location in the PDF document where text extraction error has appeared.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextExtractionErrorLocation.Path">
      <summary>
            Location of the PDF document where text extraction error has appeared.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextExtractionErrorLocation.PageNumber">
      <summary>
            Number of the document page where text extraction error has located.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextExtractionErrorLocation.ObjectType">
      <summary>
            Type of the PDF object (Page or xForm) in which contents stream text extraction error has located.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextExtractionErrorLocation.FormKey">
      <summary>
            Key (name) of the PDF Form XObject in which contents stream text extraction error has located. Not empty if ObjectType == 'xForm'.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextExtractionErrorLocation.OperatorIndex">
      <summary>
            Index of text showing operator in the contents stream (operator collection) that causes text extraction error.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextExtractionErrorLocation.OperatorString">
      <summary>
            Text showing operator that causes text extraction error.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextExtractionErrorLocation.FontUsedKey">
      <summary>
            Key (name) of the PDF Font object that is used for showing of the operator that causes text extraction error.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextExtractionErrorLocation.TextStartPoint">
      <summary>
            Key (name) of the PDF Font object that is used for showing of the operator that causes text extraction error.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextRenderingMode">
      <summary>
            The text rendering mode, Tmode, determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextRenderingMode.FillText">
      <summary>
            Fill text.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextRenderingMode.StrokeText">
      <summary>
            Stroke text.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextRenderingMode.FillThenStrokeText">
      <summary>
            Fill, then stroke text.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextRenderingMode.Invisible">
      <summary>
            Neither fill nor stroke text (invisible).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextRenderingMode.FillTextAndAddPathToClipping">
      <summary>
            Fill text and add to path for clipping (see 9.3.6, "Text Rendering Mode,").
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextRenderingMode.StrokeTextAndAddPathToClipping">
      <summary>
            Stroke text and add to path for clipping.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextRenderingMode.FillThenStrokeTextAndAddPathToClipping">
      <summary>
            Fill, then stroke text and add to path for clipping.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextRenderingMode.AddPathToClipping">
      <summary>
            Add text to path for clipping.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.FontAbsorber">
      <summary>
            Represents an absorber object of fonts.
            Performs search for fonts and provides access to search results via <see cref="P:Aspose.Pdf.Text.FontAbsorber.Fonts" /> collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontAbsorber.Fonts">
      <summary>
            Gets collection of search occurrences that are presented with <see cref="T:Aspose.Pdf.Text.Font" /> objects.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FontAbsorber.Visit(Aspose.Pdf.Document,System.Int32,System.Int32)">
      <summary>
            Performs  search in the specified range of pages of the document.
            </summary>
      <param name="pdf">Pdf pocument object.</param>
      <param name="startPage">Pdf pocument start page.</param>
      <param name="pageCount">Pdf document page count</param>
    </member>
    <member name="M:Aspose.Pdf.Text.FontAbsorber.Visit(Aspose.Pdf.Document)">
      <summary>
            Performs search on the specified document.
            </summary>
      <param name="pdf">Pdf pocument object.</param>
    </member>
    <member name="T:Aspose.Pdf.Text.CharInfoCollection">
      <summary>
            Represents CharInfo objects collection.  
            </summary>
      <remarks>
            Provides access to positioning information of text segment characters.
            </remarks>
      <example>
            The example demonstrates how to iterate throught all the characters and retrieve the charact
            <code lang="C#"> 
            //open document
            Document pdfDocument = new Document(inFile);
            //create TextFragmentAbsorber object to collect all the text objects of the page
            TextFragmentAbsorber textFragmentAbsorber = new TextFragmentAbsorber();
            //accept the absorber for all the pages
            pdfDocument.Pages[1].Accept(textFragmentAbsorber);
            //get the extracted text fragments
            TextFragmentCollection textFragmentCollection = textFragmentAbsorber.TextFragments;
                        
            //loop through the fragments
            foreach (TextFragment textFragment in textFragmentCollection)
            {
                //loop through the segments
                foreach (TextSegment textSegment in textFragment.Segments)
                {
                    //loop through the characters
                    for (int i = 1; i &lt;= textSegment.Text.Length; i++)
                    {
                        CharInfo charInfo = textSegment.Characters[i];
            
                        // print character position and rectangle info
                        Console.WriteLine("XIndent : {0} ", charInfo.Position.XIndent);
                        Console.WriteLine("YIndent : {0} ", charInfo.Position.YIndent);
                        Console.WriteLine("Width : {0} ", charInfo.Rectangle.Width);
                        Console.WriteLine("Height : {0} ", charInfo.Rectangle.Height);
                    }
                }
            }
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.CharInfoCollection.Count">
      <summary>
             Gets the number of <see cref="T:Aspose.Pdf.Text.CharInfo" /> object elements actually contained in the collection. 
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.CharInfoCollection.SyncRoot">
      <summary>
             Gets an object that can be used to synchronize access to the collection.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.CharInfoCollection.IsSynchronized">
      <summary>
             Gets a value indicating whether access to the collection is synchronized (thread safe). 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.CharInfoCollection.GetEnumerator">
      <summary>
             Returns an enumerator for the entire collection.
            </summary>
      <returns>Enumerator object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.CharInfoCollection.CopyTo(System.Array,System.Int32)">
      <summary>
             Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
            </summary>
      <param name="array">Array of objects which will be copied.</param>
      <param name="index">Starting index from which copying will be started.</param>
    </member>
    <member name="P:Aspose.Pdf.Text.CharInfoCollection.Item(System.Int32)">
      <summary>
            Gets the CharInfo element at the specified index.
            </summary>
      <param name="index">Index within the collection.</param>
      <returns>CharInfo object.</returns>
    </member>
    <member name="T:Aspose.Pdf.Text.FontTypes">
      <summary>
            Supported font types enumeration.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.FontTypes.TTF">
      <summary>
            TTF font type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.FontTypes.OTF">
      <summary>
            OTF font type
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.Position">
      <summary>
            Represents a position object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.Position.XIndent">
      <summary>
            Gets the X coordinate of the object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.Position.YIndent">
      <summary>
            Gets the Y coordinate of the object
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.Position.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of <see cref="T:Aspose.Pdf.Text.Position" /> class
            </summary>
      <param name="xIndent">X coordinate value.</param>
      <param name="yIndent">Y coordinate value.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.Position.ToString">
      <summary>
            Gets string representation for the current <see cref="T:Aspose.Pdf.Text.Position" /> object. 
            </summary>
      <returns>String representration of the Position object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.Position.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current <see cref="T:Aspose.Pdf.Text.Position" /> object. 
            </summary>
      <param name="obj">Object that is checked for equality.</param>
      <returns>True in case objects are equal.</returns>
    </member>
    <member name="T:Aspose.Pdf.Text.TextFormattingOptions">
      <summary>
            Represents text formatting options
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFormattingOptions.#ctor(Aspose.Pdf.Text.TextFormattingOptions.WordWrapMode)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextFormattingOptions" /> object for the specified word wrap mode.
            </summary>
      <param name="wrapMode">Word wrap mode.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFormattingOptions.#ctor">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextFormattingOptions" /> object with undefined word wrap mode.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFormattingOptions.WrapMode">
      <summary>
            Gets or sets word wrap mode. 
            Default value is WordWrapMode.NoWrap
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextFormattingOptions.WordWrapMode">
      <summary>
            Defines word wrapping strategies
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextFormattingOptions.WordWrapMode.NoWrap">
      <summary>
            No wrapping is performed
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextFormattingOptions.WordWrapMode.DiscretionaryHyphenation">
      <summary>
            Discretionary hyphenation is performed. Allows breaking words in the middle.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextFormattingOptions.WordWrapMode.ByWords">
      <summary>
            Word wrapping only wraps complete words.
            If the complete word cannot be wrapped, attempts to use discretionary hyphenation
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextFormattingOptions.WordWrapMode.Undefined">
      <summary>
            WordWrapMode not set.
            Wrapping strategie of upper level structure (table cell, paragraph etc.) will be used.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFormattingOptions.LineSpacing">
      <summary>
            Gets line spacing mode. 
            Default value is LineSpacingMode.FontSize
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextFormattingOptions.LineSpacingMode">
      <summary>
            Defines line spacing specifics
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextFormattingOptions.LineSpacingMode.FontSize">
      <summary>
            Line spacing is font size
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextFormattingOptions.LineSpacingMode.FullSize">
      <summary>
            Line spacing is a full space between descender and ascender
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFormattingOptions.SubsequentLinesIndent">
      <summary>
            Gets or sets subsequent lines indent value.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextParagraph">
      <summary>
            Represents text paragraphs as multiline text object.
            </summary>
      <example>
            The example demonstrates how to create text paragraph object and append it to the Pdf page.
            <code lang="C#"> 
            Document doc = new Document(inFile);
            
            Page page = (Page)doc.Pages[1];
            
            // create text paragraph
            TextParagraph paragraph = new TextParagraph();
                       
            // set the paragraph rectangle
            paragraph.Rectangle = new Rectangle(100, 600, 200, 700);
            
            // set word wrapping options
            paragraph.FormattingOptions.WrapMode = TextFormattingOptions.WordWrapMode.ByWords;
            
            // append string lines
            paragraph.AppendLine("the quick brown fox jumps over the lazy dog");
            paragraph.AppendLine("line2");
            paragraph.AppendLine("line3");
            
            // append the paragraph to the Pdf page with the TextBuilder
            TextBuilder textBuilder = new TextBuilder(page);
            textBuilder.AppendParagraph(paragraph);
            
            // save Pdf document
            doc.Save(outFile);
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.TextParagraph.VerticalAlignment">
      <summary>
            Gets or sets vertical alignment for the text inside paragrph's <see cref="P:Aspose.Pdf.Text.TextParagraph.Rectangle" />. 
            </summary>
      <remarks>
            VerticalAlignment.None is equal to VerticalAlignment.Bottom.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextParagraph.SubsequentLinesIndent">
      <summary>
            Gets or sets subsequent lines indent value.
            If set to a non-zero value, it has an advantage over the FormattingOptions.SubsequentLinesIndent value.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextParagraph.Justify">
      <summary>
            Gets or sets value whether text is justified.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextParagraph.HorizontalAlignment">
      <summary>
            Gets or sets horizontal alignment for the text inside paragrph's <see cref="P:Aspose.Pdf.Text.TextParagraph.Rectangle" />. 
            </summary>
      <remarks>
            HorizontalAlignment.None is equal to HorizontalAlignment.Left.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextParagraph.FormattingOptions">
      <summary>
            Gets or sets formatting options.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextParagraph.Position">
      <summary>
            Gets or sets position of the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextParagraph.TextRectangle">
      <summary>
            Gets rectangle of the text placed to the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextParagraph.Rectangle">
      <summary>
            Gets or sets rectangle of the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextParagraph.Margin">
      <summary>
            Gets or sets the padding.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextParagraph.Rotation">
      <summary>
            Gets or sets rotation angle in degrees.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.BeginEdit">
      <summary>
            Begins the editing of the TextParagraph. 
            </summary>
      <remarks>
            Improves performance of TextParagraph population.
            Any layout calculation is suspended until EndEdit method is invoked.
            
            Note that method invoke can't be nested.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.EndEdit">
      <summary>
            Ends the editing of the TextParagraph.
            </summary>
      <remarks>
            Improves performance of TextParagraph population.
            Any layout calculation is suspended until EndEdit method is invoked.
            
            Note that method invoke can't be nested.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.AppendLine(System.String)">
      <summary>
            Appends text line
            </summary>
      <param name="line">The new line's text.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.AppendLine(System.String,System.Single)">
      <summary>
            Appends text line.
            </summary>
      <param name="line">The new line's text.</param>
      <param name="lineSpacing">Additional spacing (0.0 is default and corresponds to default text line height).
            The spacing value is added to default line spacing for the particular line, so you may specify 12.0 to get empty row AFTER a text line drawn with 12pt font.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.AppendLine(System.String,Aspose.Pdf.Text.TextState)">
      <summary>
            Appends text line with text state parameters.
            </summary>
      <param name="line">The new line's text.</param>
      <param name="textState">Text state of the new line.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.AppendLine(System.String,Aspose.Pdf.Text.TextState,System.Single)">
      <summary>
            Appends text line with text state parameters
            </summary>
      <param name="line">The new line's text.</param>
      <param name="textState">Text state of the new line.</param>
      <param name="lineSpacing">Additional spacing (0.0 is default and corresponds to default text line height).
            The spacing value is added to default line spacing for the particular line, so you may specify 12.0 to get empty row AFTER a text line drawn with 12pt font.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.AppendLine(Aspose.Pdf.Text.TextFragment)">
      <summary>
            Appends text line with text state parameters.
            </summary>
      <param name="line">The new line's text.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.AppendLine(Aspose.Pdf.Text.TextFragment,Aspose.Pdf.Text.TextState)">
      <summary>
            Appends text line with text state parameters.
            </summary>
      <param name="line">The new line's text.</param>
      <param name="textState">Text state of the new line.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextParagraph.AppendLine(Aspose.Pdf.Text.TextFragment,Aspose.Pdf.Text.TextState,System.Single)">
      <summary>
            Appends text line with text state parameters
            </summary>
      <param name="line">The new line's text.</param>
      <param name="textState">Text state of the new line.</param>
      <param name="lineSpacing">Additional spacing (0.0 is default and corresponds to default text line height).
            The spacing value is added to default line spacing for the particular line, so you may specify 12.0 to get empty row AFTER a text line drawn with 12pt font.</param>
    </member>
    <member name="T:Aspose.Pdf.Text.Font">
      <summary>
             Represents font object.
             </summary>
      <example>
             The example demonstrates how to search text on first page and change font of a first search occurrence.
             <code lang="C#"> 
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Create font and mark it to be embedded
             Font font = FontRepository.FindFont("Arial");
             font.IsEmbedded = true;
             
             // Change font of the first text occurrence
             absorber.TextFragments[1].TextState.Font = font;
             
             
             // Save document
             doc.Save(@"D:\Tests\output.pdf"); 
             </code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Text.FontRepository" />
      <seealso cref="T:Aspose.Pdf.Document" />
    </member>
    <member name="P:Aspose.Pdf.Text.Font.FontName">
      <summary>
             Gets font name of the <see cref="T:Aspose.Pdf.Text.Font" /> object.
             </summary>
      <example>
             The example demonstrates how to search text on first page and view font name of a first text occurrence.
             <code lang="C#"> 
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // View font name of first text occurrence
             Console.Out.WriteLine(absorber.TextFragments[1].TextState.Font.FontName); 
            	</code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Document" />
    </member>
    <member name="P:Aspose.Pdf.Text.Font.DecodedFontName">
      <summary>
            Sometimes PDF fonts(usually Chinese/Japanese/Korean fonts) could have specificical font name.
            This name is value of PDF font property "BaseFont" and sometimes this property
            could be represented in hexademical form. If read this name directly it could be represented
            in non-readable form. To get readable form it's necessary to decode font's name by
            rules specifical for this font. 
            This property returns decoded font name, so use it for cases when you meet 
            with a non-readable <see cref="P:Aspose.Pdf.Text.Font.FontName" />.
            If property <see cref="P:Aspose.Pdf.Text.Font.FontName" /> has readable form this property will be the same as 
            <see cref="P:Aspose.Pdf.Text.Font.FontName" />, so you can use this property for any cases when you need to
            get font name in a readable form.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.Font.GetLastFontEmbeddingError">
      <summary>
            An objective of this method - to return description of error if an attempt
            to embed font was failed. If there are no error cases it returns empty string. 
            </summary>
      <returns>Error description</returns>
    </member>
    <member name="P:Aspose.Pdf.Text.Font.IsEmbedded">
      <summary>
            Gets or sets a value that indicates whether the font is embedded.
            </summary>
      <example>
            The following example demonstrates how to find a font, mark it as embedded, search text on the document's page and replace the text font.
            <code lang="C#">
            // Create font and mark it to be embedded
            Font font = FontRepository.FindFont("Arial");
            font.IsEmbedded = true;
            
            // open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            // accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // change font for the first text occurrence
            absorber.TextFragments[1].TextState.Font = font;
            
            // save document
            doc.Save(@"D:\Tests\output.pdf"); 
            </code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Text.FontRepository" />
      <seealso cref="T:Aspose.Pdf.Document" />
    </member>
    <member name="P:Aspose.Pdf.Text.Font.IsSubset">
      <summary>
             Gets or sets a value that indicates whether the font is a subset.
             </summary>
      <example>
             The example demonstrates how to search text on first page and get the value that indicates whether the font is a subset.
             <code lang="C#"> 
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // View font's IsSubset value of first text occurrence
             if(absorber.TextFragments[1].TextState.Font.IsSubset)
                Console.Out.WriteLine("the font is a subset");
            	</code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Document" />
    </member>
    <member name="P:Aspose.Pdf.Text.Font.IsAccessible">
      <summary>
             Gets indicating whether the font is present (installed) in the system.
             </summary>
      <remarks>
             Some operations are not available with fonts that could not be found in the system.
             </remarks>
      <example>
             The example demonstrates how to search text on first page and get the value that indicates whether the font is installed in the system.
             <code lang="C#"> 
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // View font's IsSubset value of first text occurrence
             if(absorber.TextFragments[1].TextState.Font.IsAccessible)
                Console.Out.WriteLine("the font is installed in the system");
            	</code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Document" />
    </member>
    <member name="P:Aspose.Pdf.Text.Font.FontOptions">
      <summary>
            Useful properties to tune Font behaviour
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.Font.Save(System.IO.Stream)">
      <summary>
            Saves the font into the stream.
            Note that the font is saved to intermediate TTF format intended to be used in a converted copy of the original document only.
            The font file is not intended to be used outside the original document context.
            </summary>
      <param name="stream">Stream to save the font.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.Font.MeasureString(System.String,System.Single)">
      <summary>
            Measures the string.
            </summary>
      <param name="str">The string.</param>
      <param name="fontSize">Font size.</param>
      <returns>Width of the string represented with this font and the specified size.</returns>
    </member>
    <member name="T:Aspose.Pdf.Text.FontCollection">
      <summary>
            Represents font collection.
            </summary>
      <remarks>
            Font collections represented by <see cref="T:Aspose.Pdf.Text.FontCollection" /> class are used in several scenarios. 
            For example, in resources with <see cref="P:Aspose.Pdf.Resources.Fonts" /> property. 
            </remarks>
      <example>
            The example demonstrates how to make all font declared on page as embedded.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // ensure all fonts declared on page resources are embedded
            // note that if fonts are declared on form resources they are not accessible from page resources
            foreach(Aspose.Pdf.Txt.Font font in doc.Pages[1].Resources.Fonts)
            {
                if(!font.IsEmbedded)
                    font.IsEmbedded = true;
            }
            
            doc.Save(@"D:\Tests\input.pdf");
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.FontCollection.Count">
      <summary>
             Gets the number of <see cref="T:Aspose.Pdf.Text.Font" /> object elements actually contained in the collection. 
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontCollection.SyncRoot">
      <summary>
             Gets an object that can be used to synchronize access to the collection.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontCollection.IsSynchronized">
      <summary>
             Gets a value indicating whether access to the collection is synchronized (thread safe). 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FontCollection.GetEnumerator">
      <summary>
             Returns an enumerator for the entire collection.
            </summary>
      <returns>Enumerator object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.FontCollection.CopyTo(System.Array,System.Int32)">
      <summary>
             Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
            </summary>
      <param name="array">Array of objects which will be copied.</param>
      <param name="index">Starting index from which copying will be started.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.FontCollection.Add(Aspose.Pdf.Text.Font,System.String@)">
      <summary>
            Adds new font to font resources and returns automatically assigned name of font resource.
            </summary>
      <param name="newFont">Font object.</param>
      <param name="resName">The automatically assigned resource item name.</param>
    </member>
    <member name="P:Aspose.Pdf.Text.FontCollection.Item(System.Int32)">
      <summary>
            Gets the font element at the specified index.
            </summary>
      <param name="index">Index within the collection.</param>
      <returns>Font object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Text.FontCollection.Item(System.String)">
      <summary>
            Gets font from the collection by font name.
            Exception is thrown if font was not found.
            </summary>
      <param name="name">Name of the font.</param>
      <returns>Found font.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.FontCollection.Contains(System.String)">
      <summary>
            Checks if font exists in font collection.
            </summary>
      <param name="name">Font name.</param>
      <returns>True in case collection contains the font with specified name.</returns>
    </member>
    <member name="T:Aspose.Pdf.Text.FontRepository">
      <summary>
             Performs font search. Searches in system installed fonts and standard Pdf fonts.
             Also provides functionality to open custom fonts.
             </summary>
      <example>
             The example demonstrates how to find font and replace the font of text of first page.
             <code lang="C#"> 
             // Find font
             Font font = FontRepository.FindFont("Arial");
             
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Change font of the first text occurrence
             absorber.TextFragments[1].TextState.Font = font;
             
             // Save document
             doc.Save(@"D:\Tests\output.pdf"); 
            	</code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Document" />
    </member>
    <member name="P:Aspose.Pdf.Text.FontRepository.Substitutions">
      <summary>
            Gets font substitution strategies collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FontRepository.Sources">
      <summary>
            Gets font sources collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.FontRepository.FindFont(System.String)">
      <summary>
             Searches and returns font with specified font name.
             </summary>
      <example>
             The example demonstrates how to find font and replace the font of text of first page.
             <code lang="C#"> 
             // Find font
             Font font = FontRepository.FindFont("Arial");
             
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Change font of the first text occurrence
             absorber.TextFragments[1].TextState.Font = font;
             
             // Save document
             doc.Save(@"D:\Tests\output.pdf"); 
            	</code></example>
      <param name="fontName">Font name.</param>
      <returns>Font object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.FontRepository.FindFont(System.String,System.Boolean)">
      <summary>
             Searches and returns font with specified font name ignoring or honoring case sensitivity.
             </summary>
      <example>
             The example demonstrates how to find font and replace the font of text of first page.
             <code lang="C#"> 
             // Find font
             Font font = FontRepository.FindFont("Arial");
             
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Change font of the first text occurrence
             absorber.TextFragments[1].TextState.Font = font;
             
             // Save document
             doc.Save(@"D:\Tests\output.pdf"); 
            	</code></example>
      <param name="fontName">Font name.</param>
      <param name="ignoreCase">case sensitivity</param>
      <returns>Font object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.FontRepository.FindFont(System.String,Aspose.Pdf.Text.FontStyles)">
      <summary>
             Searches and returns font with specified font name and font style.
             </summary>
      <example>
             The example demonstrates how to find font and replace the font of text of first page.
             <code lang="C#"> 
             // Find font
             Font font = FontRepository.FindFont("Arial", FontStyle.Italic);
             
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Change font of the first text occurence
             absorber.TextFragments[1].TextState.Font = font;
             
             // Save document
             doc.Save(@"D:\Tests\output.pdf"); 
            	</code></example>
      <param name="fontFamilyName">Font family name.</param>
      <param name="stl">Font style value.</param>
      <returns>Font object corresponding to search request parameters.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.FontRepository.FindFont(System.String,Aspose.Pdf.Text.FontStyles,System.Boolean)">
      <summary>
             Searches and returns font with specified font name and font style 
             ignoring or honoring case sensitivity.
             </summary>
      <example>
             The example demonstrates how to find font and replace the font of text of first page.
             <code lang="C#"> 
             // Find font
             Font font = FontRepository.FindFont("Arial", FontStyle.Italic);
             
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Change font of the first text occurence
             absorber.TextFragments[1].TextState.Font = font;
             
             // Save document
             doc.Save(@"D:\Tests\output.pdf"); 
            	</code></example>
      <param name="fontFamilyName">Font family name.</param>
      <param name="stl">Font style value.</param>
      <param name="ignoreCase">case sensitivity</param>
      <returns>Font object corresponding to search request parameters.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.FontRepository.OpenFont(System.IO.Stream,Aspose.Pdf.Text.FontTypes)">
      <summary>
             Opens font with specified font stream.
             </summary>
      <example>
             The example demonstrates how to open font and replace the font of text of first page.
             <code lang="C#">  
             // Open font
             using (FileStream fontStream = File.OpenRead(@"C:\WINDOWS\Fonts\arial.ttf"))
             {
                 Font font = FontRepository.OpenFont(fontStream, , FontTypes.TTF);
             
                 // Open document
                 Document doc = new Document(@"D:\Tests\input.pdf");
            
                 // Create TextFragmentAbsorber object to find all "hello world" text occurrences
                 TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
                 // Accept the absorber for first page
                 doc.Pages[1].Accept(absorber);
             
                 // Change font of the first text occurrence
                 absorber.TextFragments[1].TextState.Font = font;
             
                 // Save document
                 doc.Save(@"D:\Tests\output.pdf"); 
             }
            	</code></example>
      <param name="fontStream">Font stream.</param>
      <param name="fontType">Font type value.</param>
      <returns>Font object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.FontRepository.OpenFont(System.String)">
      <summary>
             Opens font with specified font file path.
             </summary>
      <example>
             The example demonstrates how to open font and replace the font of text of first page.
             <code lang="C#"> 
             // Open font
             Font font = FontRepository.OpenFont(@"C:\WINDOWS\Fonts\arial.ttf");
             
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Change font of the first text occurrence
             absorber.TextFragments[1].TextState.Font = font;
             
             // Save document
             doc.Save(@"D:\Tests\output.pdf"); 
            	</code></example>
      <param name="fontFilePath">Font file path.</param>
      <returns>Font object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.FontRepository.OpenFont(System.String,System.String)">
      <summary>
             Opens font with specified font file path and metrics file path.
             </summary>
      <example>
             The example demonstrates how to open Type1 font with metrics and replace the font of text of first page.
             <code lang="C#"> 
             // Open font
             Font font = FontRepository.OpenFont("courier.pfb", "courier.afm");
             
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Change font of the first text occurrence
             absorber.TextFragments[1].TextState.Font = font;
             
             // Save document
             doc.Save(@"D:\Tests\output.pdf"); 
            	</code></example>
      <param name="fontFilePath">Font file path.</param>
      <param name="metricsFilePath">Font metrics file patrh.</param>
      <returns>Font object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.FontRepository.LoadFonts">
      <summary>
            Loads system installed fonts and standard Pdf fonts. This method was designed to speed up font loading process.
            By default fonts are loaded on first request for any font. Use of this method loads system and standard Pdf fonts
            immediately before any Pdf document was open.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.FontStyles">
      <summary>
            Specifies style information applied to text.
            </summary>
      <remarks>
            This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a combination of its member values. 
            </remarks>
    </member>
    <member name="F:Aspose.Pdf.Text.FontStyles.Regular">
      <summary>
            Regular text.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.FontStyles.Bold">
      <summary>
            Bold text.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.FontStyles.Italic">
      <summary>
            Italic text.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.CharInfo">
      <summary>
            Represents a character info object.
            Provides character positioning information.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.CharInfo.Position">
      <summary>
            Gets position of the character.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.CharInfo.Rectangle">
      <summary>
            Gets rectangle of the character.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextAbsorber">
      <summary>
            Represents an absorber object of a text.
            Performs text extraction and provides access to the result via <see cref="P:Aspose.Pdf.Text.TextAbsorber.Text" /> object.
            </summary>
      <remarks>
            The <see cref="T:Aspose.Pdf.Text.TextAbsorber" /> object is used to extract text from a Pdf document or the document's page. 
            </remarks>
      <example>
            The example demonstrates how to extract text on the first PDF document page.
            <code lang="C#"> 
            // open document
            Document doc = new Document(inFile);
            
            // create TextAbsorber object to extract text
            TextAbsorber absorber = new TextAbsorber();
            
            // accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // get the extracted text
            string extractedText = absorber.Text;
            
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.TextAbsorber.Text">
      <summary>
            Gets extracted text that the <see cref="T:Aspose.Pdf.Text.TextAbsorber" /> extracts on the PDF document or page.
            </summary>
      <example>
            The example demonstrates how to extract text from all pages of the PDF document.
            <code lang="C#"> 
            // open document
            Document doc = new Document(inFile);
            
            // create TextAbsorber object to extract text
            TextAbsorber absorber = new TextAbsorber();
            
            // accept the absorber for all document's pages
            doc.Pages.Accept(absorber);
            
            // get the extracted text
            string extractedText = absorber.Text;
            
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.TextAbsorber.HasErrors">
      <summary>
            Value indicates whether errors were found during text extraction.
            Searching for errors will performed only if TextSearchOptions.LogTextExtractionErrors = true; And it may decrease performance.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextAbsorber.Errors">
      <summary>
            List of <see cref="T:Aspose.Pdf.Text.TextExtractionError" /> objects. It contain information about errors were found during text extraction.
            Searching for errors will performed only if TextSearchOptions.LogTextExtractionErrors = true; And it may decrease performance.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextAbsorber.Visit(Aspose.Pdf.Page)">
      <summary>
            Extracts text on the specified page
            </summary>
      <example>
            The example demonstrates how to extract text on the first PDF document page.
            <code lang="C#"> 
            // open document
            Document doc = new Document(inFile);
            
            // create TextAbsorber object to extract text
            TextAbsorber absorber = new TextAbsorber();
            
            // accept the absorber for all document's pages
            absorber.Visit(doc.Pages[1]);
            
            // get the extracted text
            string extractedText = absorber.Text;
            </code></example>
      <param name="page">Pdf pocument page object.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextAbsorber.Visit(Aspose.Pdf.XForm)">
      <summary>
            Extracts text on the specified XForm.
            </summary>
      <example>
            The example demonstrates how to extract text on the first PDF document page.
            <code lang="C#"> 
            // open document
            Document doc = new Document(inFile);
            
            // create TextAbsorber object to extract text
            TextAbsorber absorber = new TextAbsorber();
            
            // accept the absorber for all document's pages
            absorber.Visit(doc.Pages[1].Resources.Forms["Xform1"]);
            
            // get the extracted text
            string extractedText = absorber.Text;
            </code></example>
      <param name="form">Pdf form object.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextAbsorber.Visit(Aspose.Pdf.Document)">
      <summary>
            Extracts text on the specified document
            </summary>
      <example>
            The example demonstrates how to extract text on PDF document.
            <code lang="C#"> 
            // open document
            Document doc = new Document(inFile);
            
            // create TextAbsorber object to extract text
            TextAbsorber absorber = new TextAbsorber();
            
            // accept the absorber for all document's pages
            absorber.Visit(doc);
            
            // get the extracted text
            string extractedText = absorber.Text;
            </code></example>
      <param name="pdf">Pdf pocument object.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextAbsorber.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextAbsorber" />.
            </summary>
      <remarks>
            Performs text extraction and provides access to the extracted text via <see cref="P:Aspose.Pdf.Text.TextAbsorber.Text" /> object.
            </remarks>
      <example>
            The example demonstrates how to extract text from all pages of the PDF document.
            <code lang="C#"> 
            // open document
            Document doc = new Document(inFile);
            
            // create TextAbsorber object to extract text
            TextAbsorber absorber = new TextAbsorber();
            
            // accept the absorber for all document's pages
            doc.Pages.Accept(absorber);
            
            // get the extracted text
            string extractedText = absorber.Text;
            
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.TextAbsorber.ExtractionOptions">
      <summary>
            Gets or sets text extraction options.
            </summary>
      <remarks>
            Allows to define text formatting mode <see cref="T:Aspose.Pdf.Text.TextExtractionOptions" /> during extraction.
            The default mode is <see cref="F:Aspose.Pdf.Text.TextExtractionOptions.TextFormattingMode.Pure" /></remarks>
      <example>
            The example demonstrates how to set Pure text formatting mode and perform text extraction.
            <code lang="C#"> 
            // open document
            Document doc = new Document(inFile);
            
            // create TextAbsorber object to extract text with formatting
            TextAbsorber absorber = new TextAbsorber();
            
            // set pure text formatting mode
            absorber.ExtractionOptions = new TextExtractionOptions(TextExtractionOptions.TextFormattingMode.Pure);
            
            // accept the absorber for all document's pages
            doc.Pages.Accept(absorber);
            
            // get the extracted text
            string extractedText = absorber.Text;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.TextAbsorber.TextSearchOptions">
      <summary>
            Gets or sets text search options.
            </summary>
      <remarks>
            Allows to define rectangle which delimits the extracted text.
            By default the rectangle is empty. That means page boundaries only defines the text extraction region.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Text.TextAbsorber.#ctor(Aspose.Pdf.Text.TextExtractionOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextAbsorber" /> with extraction options.
            </summary>
      <remarks>
            Performs text extraction and provides access to the extracted text via <see cref="P:Aspose.Pdf.Text.TextAbsorber.Text" /> object.
            </remarks>
      <example>
            The example demonstrates how to extract text from all pages of the PDF document.
            <code lang="C#"> 
            // open document
            Document doc = new Document(inFile);
            
            // create TextAbsorber object to extract text with formatting
            TextAbsorber absorber = new TextAbsorber(new TextExtractionOptions(TextExtractionOptions.TextFormattingMode.Pure));
            
            // accept the absorber for all document's pages
            doc.Pages.Accept(absorber);
            
            // get the extracted text
            string extractedText = absorber.Text;
            
            </code></example>
      <param name="extractionOptions">Text extraction options</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextAbsorber.#ctor(Aspose.Pdf.Text.TextExtractionOptions,Aspose.Pdf.Text.TextSearchOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextAbsorber" /> with extraction and text search options.
            </summary>
      <remarks>
            Performs text extraction and provides access to the extracted text via <see cref="P:Aspose.Pdf.Text.TextAbsorber.Text" /> object.
            </remarks>
      <param name="extractionOptions">Text extraction options</param>
      <param name="textSearchOptions">Text search options</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextAbsorber.#ctor(Aspose.Pdf.Text.TextSearchOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextAbsorber" /> with text search options.
            </summary>
      <remarks>
            Performs text extraction and provides access to the extracted text via <see cref="P:Aspose.Pdf.Text.TextAbsorber.Text" /> object.
            </remarks>
      <param name="textSearchOptions">Text search options</param>
    </member>
    <member name="T:Aspose.Pdf.Text.TextBuilder">
      <summary>
            Appends text object to Pdf page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextBuilder.#ctor(Aspose.Pdf.Page)">
      <summary>
            Initializes a new instance of <see cref="T:Aspose.Pdf.Text.TextBuilder" /> class for the Pdf page.
            </summary>
      <remarks>
            The TextBuilder allows to append text objects to Pdf pages.
            </remarks>
      <param name="page">Page object.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextBuilder.#ctor(Aspose.Pdf.Page,Aspose.Pdf.BaseOperatorCollection)">
      <summary>
            Initializes a new instance of <see cref="T:Aspose.Pdf.Text.TextBuilder" /> class for the Pdf page.
            </summary>
      <remarks>
            The TextBuilder allows to append text objects to Pdf pages.
            </remarks>
      <param name="page">Page object.</param>
      <param name="operatorCollection">Operator collection.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextBuilder.AppendParagraph(Aspose.Pdf.Text.TextParagraph)">
      <summary>
            Appends text paragraph to Pdf page.
            </summary>
      <example>
            The example demonstrates how to create text paragraph object and append it to the Pdf page.
            <code lang="C#"> 
            Document doc = new Document(inFile);
            
            Page page = (Page)doc.Pages[1];
            
            // create text paragraph
            TextParagraph paragraph = new TextParagraph();
                       
            // set the paragraph rectangle
            paragraph.Rectangle = new Rectangle(100, 600, 200, 700);
            
            // set word wrapping options
            paragraph.FormattingOptions.WrapMode = TextFormattingOptions.WordWrapMode.ByWords;
            
            // append string lines
            paragraph.AppendLine("the quick brown fox jumps over the lazy dog");
            paragraph.AppendLine("line2");
            paragraph.AppendLine("line3");
            
            // append the paragraph to the Pdf page with the TextBuilder
            TextBuilder textBuilder = new TextBuilder(page);
            textBuilder.AppendParagraph(paragraph);
            
            // save Pdf document
            doc.Save(outFile);
            </code></example>
      <param name="textParagraph">Text paragraph object.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextBuilder.AppendText(Aspose.Pdf.Text.TextFragment)">
      <summary>
            Appends text fragment to Pdf page
            </summary>
      <example>
            The example demonstrates how to create text fragment object, customize it's text segments and append it to the Pdf page.
            <code lang="C#"> 
            Document doc = new Document(inFile);
            Page page = (Page)doc.Pages[1];
            
            // create text fragment
            TextFragment tf = new TextFragment("main text");
            tf.Position = new Position(100, 600);
            
            // set it's text properties
            tf.TextState.FontSize = 5;
            tf.TextState.Font = FontRepository.FindFont("TimesNewRoman");
            tf.TextState.BackgroundColor = Color.LightGray;
            tf.TextState.ForegroundColor = Color.Red;
            
            // add one more segment to text fragment's Segments collection
            TextSegment segment2 = new TextSegment();
            segment2.Text = "another segment";
            
            tf.Segments.Add(segment2);
            
            // create TextBuilder object
            TextBuilder builder = new TextBuilder(page);
            
            // append the text fragment to the Pdf page
            builder.AppendText(tf);
            
            //save document
            doc.Save(outFile);
            </code></example>
      <param name="textFragment">Text fragment object.</param>
    </member>
    <member name="T:Aspose.Pdf.Text.TextFragment">
      <summary>
             Represents fragment of Pdf text.
             </summary>
      <remarks>
             In a few words, <see cref="T:Aspose.Pdf.Text.TextFragment" /> object contains list of <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects.
             
             In details:
             Text of pdf document in <see cref="N:Aspose.Pdf" /> is represented by two basic objects: <see cref="T:Aspose.Pdf.Text.TextFragment" /> and <see cref="T:Aspose.Pdf.Text.TextSegment" />
            
             The differences between them is mostly context-dependent.
             
             Let's consider following scenario. User searches text "hello world" to operate with it, change it's properties, look etc.
             <code lang="C#">
             Document doc = new Document(docFile);
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             doc.Pages[1].Accept(absorber);
             </code>
             Phisycally pdf text's representation is very complex.
             The text "hello world" may consist of several phisycally independent text segments.
            
             The Aspose.Pdf text model basically establishes that <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
             provides single logic operation set over physical <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects set that represent user's query.
            
             In text search scenario, <see cref="T:Aspose.Pdf.Text.TextFragment" /> is logical "hello world" text representation,
             and <see cref="T:Aspose.Pdf.Text.TextSegment" /> object collection represents all physical segments that construct "hello world" text object.
            
             So, <see cref="T:Aspose.Pdf.Text.TextFragment" /> is close to logical text representation.
             And <see cref="T:Aspose.Pdf.Text.TextSegment" /> is close to physical text representation.
            
             Obviously each <see cref="T:Aspose.Pdf.Text.TextSegment" /> object may have it's own font, coloring, positioning properties.
            
             <see cref="T:Aspose.Pdf.Text.TextFragment" /> provides simple way to change text with it's properties: set font, set font size, set font color etc.
             Meanwhile <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects are accessible and users are able to operate with <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects independently.
             
             Note that changing TextFragment properties may change inner <see cref="P:Aspose.Pdf.Text.TextFragment.Segments" /> collection because TextFragment is an aggregate object 
             and it may rearrange internal segments or merge them into single segment.
             If your requirement is to leave the <see cref="P:Aspose.Pdf.Text.TextFragment.Segments" /> collection unchanged, please change inner segments individually.
             </remarks>
      <example>
             The example demonstrates how to find text on the first PDF document page and replace the text and it's font.
             <code lang="C#"> 
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
             
             // Find font that will be used to change document text font
             Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
             
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Change text and font of the first text occurrence
             absorber.TextFragments[1].Text = "hi world";
             absorber.TextFragments[1].TextState.Font = font;
             
             // Save document
             doc.Save(@"D:\Tests\output.pdf");  
             </code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.Text">
      <summary>
            Gets or sets <see cref="T:System.String" /> text object that the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object represents.
            </summary>
      <example>
            The example demonstrates how to search a text and replace first occurrence represented with <see cref="T:Aspose.Pdf.Text.TextFragment" /> object .
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // Change font of the first text occurrence
            absorber.TextFragments[1].Text = "hi world";
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf"); 
            </code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Document" />
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.VerticalAlignment">
      <summary>
            Gets or sets a vertical alignment of text fragment. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.HorizontalAlignment">
      <summary>
            Gets or sets a horizontal alignment of text fragment. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.TextState">
      <summary>
            Gets or sets text state for the text that <see cref="T:Aspose.Pdf.Text.TextFragment" /> object represents.
            </summary>
      <remarks>
            Provides a way to change following properties of the text:
               Font
               FontSize
               FontStyle
               ForegroundColor
               BackgroundColor
            </remarks>
      <example>
            The example demonstrates how to change text color and font size of the text with <see cref="P:Aspose.Pdf.Text.TextFragment.TextState" /> object.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // Change foreground color of the first text occurrence
            absorber.TextFragments[1].TextState.ForegroundColor = Color.FromRgb(System.Drawing.Color.Red);
            
            // Change font size of the first text occurrence
            absorber.TextFragments[1].TextState.FontSize = 15;
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Document" />
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.Segments">
      <summary>
            Gets text segments for current <see cref="T:Aspose.Pdf.Text.TextFragment" />.
            </summary>
      <remarks>
            In a few words, <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects are children of <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
            Advanced users may access segments directly to perform more complex text edit scenarios.
            For details, please look at <see cref="T:Aspose.Pdf.Text.TextFragment" /> object description.
            </remarks>
      <example>
            The example demonstrates how to navigate all <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects inside <see cref="T:Aspose.Pdf.Text.TextFragment" />.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // Navigate all text segments and out their text and placement info
            foreach (TextSegment segment in absorber.TextFragments[1].Segments)
            {
                Console.Out.WriteLine(string.Format("segment text: {0}", segment.Text));
                Console.Out.WriteLine(string.Format("segment X indent: {0}", segment.Position.XIndent));
                Console.Out.WriteLine(string.Format("segment Y indent: {0}", segment.Position.YIndent));
            }
            
            </code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Document" />
      <seealso cref="T:Aspose.Pdf.Text.TextSegment" />
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.Position">
      <summary>
            Gets or sets text position for text, represented with <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
            </summary>
      <example>
            The example demonstrates how to view placement of a text, represented by <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
            <code lang="C#"> 
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
            
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
            
             // View text and placement info of first text occurrence
             TextFragment firstOccurrence = absorber.TextFragments[1];
            
             Console.Out.WriteLine(string.Format("fragment text: {0}", firstOccurrence.Text));
             Console.Out.WriteLine(string.Format("fragment X indent: {0}", firstOccurrence.Position.XIndent));
             Console.Out.WriteLine(string.Format("fragment Y indent: {0}", firstOccurrence.Position.YIndent));
            
            </code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Document" />
      <seealso cref="T:Aspose.Pdf.Text.TextSegment" />
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.BaselinePosition">
      <summary>
            Gets text position for text, represented with <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
            The YIndent of the Position structure represents baseline coordinate of the text fragment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.Rectangle">
      <summary>
            Gets rectangle of the TextFragment
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.Page">
      <summary>
            Gets page that contains the TextFragment
            </summary>
      <remarks>
            The value can be null in case the TextFragment object doesn't belong to any page.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.Form">
      <summary>
            Gets form object that contains the TextFragment
            </summary>
      <remarks>
            The value can be null in case the TextFragment object doesn't belong to a form.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.WrapLinesCount">
      <summary>
            Gets or sets wrap lines count for this paragraph(for pdf generation only)
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.EndNote">
      <summary>
            Gets or sets the paragraph end note.(for pdf generation only)
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragment.FootNote">
      <summary>
            Gets or sets the paragraph foot note.(for pdf generation only)
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragment.#ctor">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragment.#ctor(Aspose.Pdf.Text.TabStops)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object with predefined <see cref="T:Aspose.Pdf.Text.TabStops" /> positions.
            </summary>
      <param name="tabStops">Tabulation positions</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragment.#ctor(System.String)">
      <summary>
            Creates <see cref="T:Aspose.Pdf.Text.TextFragment" /> object with single <see cref="T:Aspose.Pdf.Text.TextSegment" /> object inside. 
            Specifies text string inside the segment.
            </summary>
      <param name="text">Text fragment's text.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragment.#ctor(System.String,Aspose.Pdf.Text.TabStops)">
      <summary>
            Creates <see cref="T:Aspose.Pdf.Text.TextFragment" /> object with single <see cref="T:Aspose.Pdf.Text.TextSegment" /> object inside and predefined <see cref="T:Aspose.Pdf.Text.TabStops" /> positions.
            </summary>
      <param name="text">Text fragment's text.</param>
      <param name="tabStops">Tabulation positions</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragment.IsolateTextSegments(System.Int32,System.Int32)">
      <summary>
            Gets <see cref="T:Aspose.Pdf.Text.TextSegment" />(s) representing specified part of the <see cref="T:Aspose.Pdf.Text.TextFragment" /> text.
            </summary>
      <param name="startIndex">Position in text from which new <see cref="T:Aspose.Pdf.Text.TextSegment" />(s) will start.</param>
      <param name="length">Length of the text that will isolated into <see cref="T:Aspose.Pdf.Text.TextSegment" />(s).</param>
      <returns>
        <see cref="T:Aspose.Pdf.Text.TextSegmentCollection" /> containing text segments represeting text substring starting at a specifing position and having a specified length.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragment.Clone">
      <summary>
            Clone the fragment.
            </summary>
      <returns>The cloned object</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragment.CloneWithSegments">
      <summary>
            Clone the fragment with all segments.
            </summary>
      <returns>The cloned object</returns>
    </member>
    <member name="T:Aspose.Pdf.Text.TextFragmentAbsorber">
      <summary>
            Represents an absorber object of text fragments.
            Performs text search and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" /> collection.
            </summary>
      <remarks>
            The <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> object is basically used in text search scenario.
            When the search is completed the occurrences are represented with <see cref="T:Aspose.Pdf.Text.TextFragment" /> objects that the <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" /> collection contains.
            The <see cref="T:Aspose.Pdf.Text.TextFragment" /> object provides access to the search occurrence text, text properties, and allows to edit text and change the text state (font, font size, color etc).
            </remarks>
      <example>
            The example demonstrates how to find text on the first PDF document page and replace the text and it's font.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Find font that will be used to change document text font
            Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
            
            // Create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // Change text and font of the first text occurrence
            absorber.TextFragments[1].Text = "hi world";
            absorber.TextFragments[1].TextState.Font = font;
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments">
      <summary>
            Gets collection of search occurrences that are presented with <see cref="T:Aspose.Pdf.Text.TextFragment" /> objects.
            </summary>
      <example>
            The example demonstrates how to find text on the first PDF document page and replace all search occurrences with new text.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Find font that will be used to change document text font
            Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
            
            // Create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // Change text of all search occurrences
            foreach (TextFragment textFragment in absorber.TextFragments)
            {
                textFragment.Text = "hi world";
            }
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentAbsorber.Phrase">
      <summary>
            Gets or sets phrase that the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> searches on the PDF document or page.
            </summary>
      <example>
            The example demonstrates how to perform search text several times and perform text replacements.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create TextFragmentAbsorber object to find all "hello" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello");
            
            doc.Pages[1].Accept(absorber);
            absorber.TextFragments[1].Text = "Hi";
            
            // search another word and replace it
            absorber.Phrase = "world";
            
            doc.Pages[1].Accept(absorber);
            absorber.TextFragments[1].Text = "John";
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextSearchOptions">
      <summary>
            Gets or sets search options. The options enable search using regular expressions.
            </summary>
      <example>
            The example demonstrates how to perform search text using regular expression.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create TextFragmentAbsorber object
            TextFragmentAbsorber absorber = new TextFragmentAbsorber();
            
            // make the absorber to search all words starting 'h' and ending 'o' using regular expression.
            absorber.Phrase = @"h\w*?o";
            absorber.TextSearchOptions = new TextSearchOptions(true);
            
            // we should find "hello" word and replace it with "Hi"
            doc.Pages[1].Accept(absorber);
            absorber.TextFragments[1].Text = "Hi"; 
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf"); 
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextEditOptions">
      <summary>
            Gets or sets text edit options. The options define special behavior when requested symbol cannot be written with font.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextReplaceOptions">
      <summary>
            Gets or sets text replace options. The options define behavior when text fragment is replaced to more short.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentAbsorber.HasErrors">
      <summary>
            Value indicates whether errors were found during text extraction.
            Searching for errors will performed only if TextSearchOptions.LogTextExtractionErrors = true; And it may decrease performance.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentAbsorber.Errors">
      <summary>
            List of <see cref="T:Aspose.Pdf.Text.TextExtractionError" /> objects. It contain information about errors were found during text extraction.
            Searching for errors will performed only if TextSearchOptions.LogTextExtractionErrors = true; And it may decrease performance.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentAbsorber.Text">
      <summary>
            Gets extracted text that the <see cref="T:Aspose.Pdf.Text.TextAbsorber" /> extracts on the PDF document or page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> that performs search of all text segments of the document or page.
            </summary>
      <remarks>
            Performs text search and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" /> collection. 
            </remarks>
      <example>
            The example demonstrates how to find text on the first PDF document page and replace the text.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Find font that will be used to change document text font
            Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
            
            // Create TextFragmentAbsorber object
            TextFragmentAbsorber absorber = new TextFragmentAbsorber();
            
            // Make the absorber to search all "hello world" text occurrences
            absorber.Phrase = "hello world";
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // Change text of the first text occurrence
            absorber.TextFragments[1].Text = "hi world";
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.#ctor(Aspose.Pdf.Text.TextEditOptions)">
      <summary>
             Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> with text edit options, that performs search of all text segments of the document or page.  
             </summary>
      <remarks>
             Performs text search and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" /> collection. 
             </remarks>
      <example>
             The example demonstrates how to find all text fragments on the first PDF document page and replace font for them.
             <code lang="C#"> 
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
             
             // Create TextFragmentAbsorber object
             TextFragmentAbsorber absorber = new TextFragmentAbsorber(new TextEditOptions(TextEditOptions.FontReplace.RemoveUnusedFonts));
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Find Courier font
             Pdf.Text.Font font = FontRepository.FindFont("Courier");
            
             // Set the font for all the text fragments
             foreach (TextFragment textFragment in absorber.TextFragments)
             {
                 textFragment.TextState.Font = font;
             }
            
             // Save document
             doc.Save(@"D:\Tests\output.pdf");
             </code></example>
      <param name="textEditOptions">Text edit options (Allows to turn on some edit features).</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> class for the specified text phrase.
            </summary>
      <remarks>
            Performs text search of the specified phrase and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" /> collection.
            </remarks>
      <example>
            The example demonstrates how to find text on the first PDF document page and replace the text and it's font.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Find font that will be used to change document text font
            Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
            
            // Create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // Change text and font of the first text occurrence
            absorber.TextFragments[1].Text = "hi world";
            absorber.TextFragments[1].TextState.Font = font;
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
      <param name="phrase">Phrase that the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> searches</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.#ctor(System.String,Aspose.Pdf.Text.TextSearchOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> class for the specified text phrase and text search options.
            </summary>
      <remarks>
            Performs text search of the specified phrase and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" /> collection.
            </remarks>
      <example>
            The example demonstrates how to find text with regular expression on the first PDF document page and replace the text.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create TextFragmentAbsorber object that seatches all words starting 'h' and ending 'o' using regular expression.
            TextFragmentAbsorber absorber = new TextFragmentAbsorber(@"h\w*?o", new TextSearchOptions(true));
            
            // we should find "hello" word and replace it with "Hi"
            doc.Pages[1].Accept(absorber);
            absorber.TextFragments[1].Text = "Hi"; 
             
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
      <param name="phrase">Phrase that the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> searches</param>
      <param name="textSearchOptions">Text search options (Allows to turn on some search features. For example, search with regular expression)</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.#ctor(System.String,Aspose.Pdf.Text.TextSearchOptions,Aspose.Pdf.Text.TextEditOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> class for the specified text phrase, text search options and text edit options.
            </summary>
      <remarks>
            Performs text search of the specified phrase and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" /> collection.
            </remarks>
      <example>
            The example demonstrates how to find text with regular expression on the first PDF document page and replace the text.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create TextFragmentAbsorber object that seatches all words starting 'h' and ending 'o' using regular expression.
            TextFragmentAbsorber absorber = new TextFragmentAbsorber(@"h\w*?o", new TextSearchOptions(true));
            
            // we should find "hello" word and replace it with "Hi"
            doc.Pages[1].Accept(absorber);
            absorber.TextFragments[1].Text = "Hi"; 
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
      <param name="phrase">Phrase that the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> searches</param>
      <param name="textSearchOptions">Text search options (Allows to turn on some search features. For example, search with regular expression)</param>
      <param name="textEditOptions">Text edit options (Allows to turn on some edit features).</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.#ctor(System.String,Aspose.Pdf.Text.TextEditOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> class for the specified text phrase and text edit options.
            </summary>
      <remarks>
            Performs text search of the specified phrase and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" /> collection.
            </remarks>
      <param name="phrase">Phrase that the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> searches</param>
      <param name="textEditOptions">Text edit options (Allows to turn on some edit features).</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.Visit(Aspose.Pdf.Page)">
      <summary>
            Performs search on the specified page.
            </summary>
      <example>
            The example demonstrates how to find text on the first PDF document page and replace the text.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Find font that will be used to change document text font
            Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
            
            // Create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
            // Accept the absorber for first page
            absorber.Visit(doc.Pages[1]);
            
            // Change text of all search occurrences
            foreach (TextFragment textFragment in absorber.TextFragments)
            {
                textFragment.Text = "hi world";
            }
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
      <param name="page">Pdf pocument page object.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.Visit(Aspose.Pdf.Document)">
      <summary>
            Performs search on the specified document.
            </summary>
      <example>
            The example demonstrates how to find text on PDF document and replace text of all search occurrences.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Find font that will be used to change document text font
            Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
            
            // Create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
            // Accept the absorber for first page
            absorber.Visit(doc);
            
            // Change text of the first text occurrence
            absorber.TextFragments[1].Text = "hi world";
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
      <param name="pdf">Pdf pocument object.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.ApplyForAllFragments(Aspose.Pdf.Text.Font)">
      <summary>
            Applies font for all text fragments that were absorbed. It works faster than looping through the fragments if all fragments on the page(s) were absorbed. Otherwise it works similar with looping.
            </summary>
      <param name="font">
        <see cref="T:Aspose.Pdf.Text.Font" />of the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.ApplyForAllFragments(System.Single)">
      <summary>
            Applies font size for all text fragments that were absorbed. It works faster than looping through the fragments if all fragments on the page(s) were absorbed. Otherwise it works similar with looping.
            </summary>
      <param name="fontSize">Font size of the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.ApplyForAllFragments(Aspose.Pdf.Text.Font,System.Single)">
      <summary>
            Applies font and size for all text fragments that were absorbed. It works faster than looping through the fragments if all fragments on the page(s) were absorbed. Otherwise it works similar with looping.
            </summary>
      <param name="font">
        <see cref="T:Aspose.Pdf.Text.Font" />of the text.</param>
      <param name="fontSize">Font size of the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.Reset">
      <summary>
            Clears TextFragments collection of this <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentAbsorber.Visit(Aspose.Pdf.XForm)">
      <summary>
            Performs search on the specified form object.
            </summary>
      <param name="xForm">Pdf form object.</param>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentAbsorber.ExtractionOptions">
      <summary>
            Gets or sets text extraction options.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextFragmentCollection">
      <summary>
            Represents a text fragments collection
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentCollection.Count">
      <summary>
             Gets the number of <see cref="T:Aspose.Pdf.Text.TextFragment" /> object elements actually contained in the collection. 
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentCollection.SyncRoot">
      <summary>
             Gets an object that can be used to synchronize access to the collection.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentCollection.IsSynchronized">
      <summary>
             Gets a value indicating whether access to the collection is synchronized (thread safe). 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentCollection.GetEnumerator">
      <summary>
             Returns an enumerator for the entire collection.
            </summary>
      <returns>Enumerator object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentCollection.CopyTo(System.Array,System.Int32)">
      <summary>
             Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
            </summary>
      <param name="array">Array of objects which will be copied.</param>
      <param name="index">Starting index from which copying will be started.</param>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentCollection.Item(System.Int32)">
      <summary>
            Gets the text fragment element at the specified index.
            </summary>
      <param name="index">Index within the collection.</param>
      <returns>TextFragment object.</returns>
    </member>
    <member name="T:Aspose.Pdf.Text.TextFragmentState">
      <summary>
            Represents a text state of a text fragment.
            </summary>
      <remarks>
            Provides a way to change following properties of the text:
               font (<see cref="P:Aspose.Pdf.Text.TextFragmentState.Font" /> property)
               font size (<see cref="P:Aspose.Pdf.Text.TextFragmentState.FontSize" /> property)
               font style (<see cref="P:Aspose.Pdf.Text.TextFragmentState.FontStyle" /> property)
               foreground color (<see cref="P:Aspose.Pdf.Text.TextFragmentState.ForegroundColor" /> property)
               background color (<see cref="P:Aspose.Pdf.Text.TextFragmentState.BackgroundColor" /> property)
            
            Note that changing <see cref="T:Aspose.Pdf.Text.TextFragmentState" /> properties may change inner <see cref="P:Aspose.Pdf.Text.TextFragment.Segments" /> collection because TextFragment is an aggregate object 
            and it may rearrange internal segments or merge them into single segment.
            If your requirement is to leave the <see cref="P:Aspose.Pdf.Text.TextFragment.Segments" /> collection unchanged, please change inner segments individually.
            </remarks>
      <example>
            The example demonstrates how to change text color and font size of the text with <see cref="T:Aspose.Pdf.Text.TextState" /> object.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create TextFragmentAbsorber object to find all "hello world" text occurrences
            TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(absorber);
            
            // Change foreground color of the first text occurrence
            absorber.TextFragments[1].TextState.ForegroundColor = Color.FromRgb(System.Drawing.Color.Red);
            // Change font size of the first text occurrence
            absorber.TextFragments[1].TextState.FontSize = 15;
            
            // Save document
            doc.Save(@"D:\Tests\output.pdf");  
            </code></example>
      <seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
      <seealso cref="T:Aspose.Pdf.Document" />
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.CharacterSpacing">
      <summary>
            Gets or sets character spacing of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.HorizontalScaling">
      <summary>
            Gets or sets horizontal scaling of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.WordSpacing">
      <summary>
            Gets or sets word spacing of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.Invisible">
      <summary>
            Gets or sets invisibility of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.RenderingMode">
      <summary>
            Gets or sets rendering mode of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.Subscript">
      <summary>
            Gets or sets subscript of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.Superscript">
      <summary>
            Gets or sets superscript of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.TabStops">
      <summary>
            Gets tabstops for the text. 
            </summary>
      <remarks>
            Note that Tabstops property works in new document generation scenarios only.
            Tabstops may be added during <see cref="T:Aspose.Pdf.Text.TextFragment" /> initialization. Tabstops must be constructed before the text.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.LineSpacing">
      <summary>
            Gets or sets line spacing of the text.
            </summary>
      <remarks>
            Note that the value is not preserved as a text characteristic within the document.
            The LineSpacing property getter works for an object in case it was explicitly set previously with LineSpacing setter for those object.
            
            The property is used by runtime in context of current generation/modification process.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.ForegroundColor">
      <summary>
            Gets or sets foreground color of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.StrokingColor">
      <summary>
            Gets or sets color stroking operations of <see cref="T:Aspose.Pdf.Text.TextFragment" /> rendering (stroke text, rectangle border)
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.BackgroundColor">
      <summary>
            Sets background color of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.Underline">
      <summary>
            Sets underline for the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.StrikeOut">
      <summary>
            Sets strikeout for the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.FontStyle">
      <summary>
            Sets font style of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.Font">
      <summary>
            Gets or sets font of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.FontSize">
      <summary>
            Gets or sets font size of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.HorizontalAlignment">
      <summary>
             Gets or sets horizontal alignment for the text. 
             </summary>
      <remarks>
             HorizontalAlignment.None is equal to HorizontalAlignment.Left.
            
             Note that TextFragmentState.VerticalAlignment property works in new document generation scenarios only.
             </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.FormattingOptions">
      <summary>
            Gets or sets formatting options.
            Setting of the options will be effective in generator scenarios only.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextFragmentState.Rotation">
      <summary>
            Gets or sets rotation angle in degrees.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentState.MeasureString(System.String)">
      <summary>
            Measures the string.
            </summary>
      <param name="str">The string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentState.#ctor(Aspose.Pdf.Text.TextFragment)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentState" /> object with specified <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
            This <see cref="T:Aspose.Pdf.Text.TextFragmentState" /> initialization is not supported.
            TextFragmentState is only available with <see cref="P:Aspose.Pdf.Text.TextFragment.TextState" /> property.
            </summary>
      <param name="fragment">Text fragment object.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextFragmentState.ApplyChangesFrom(Aspose.Pdf.Text.TextState)">
      <summary>
            Applies settings from another textState. 
            </summary>
      <remarks>
            Only those properties will be copied that were changed explicitly.
            </remarks>
      <param name="textState">Text state object.</param>
    </member>
    <member name="T:Aspose.Pdf.Text.TextEditOptions">
      <summary>
            Descubes options of text edit operations.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextEditOptions.#ctor(Aspose.Pdf.Text.TextEditOptions.NoCharacterAction)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextEditOptions" /> object for the specified no-character behavior mode.
            </summary>
      <param name="noCharacterBehavior">No-character behavior mode object.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextEditOptions.#ctor(Aspose.Pdf.Text.TextEditOptions.FontReplace)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextEditOptions" /> object for the specified font replacement behavior mode.
            </summary>
      <param name="fontReplaceBehavior">Font replace behavior object.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextEditOptions.#ctor(System.Boolean)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextEditOptions" /> object for the specified language transformation permission.
            </summary>
      <param name="allowLanguageTransformation">Allows language transformation if set to true.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextEditOptions.#ctor(Aspose.Pdf.Text.TextEditOptions.LanguageTransformation)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextEditOptions" /> object for the specified language transformation behavior mode.
            </summary>
      <param name="languageTransformationBehavior">language transformation behavior object.</param>
    </member>
    <member name="T:Aspose.Pdf.Text.TextEditOptions.NoCharacterAction">
      <summary>
            Action to perform if font does not contain required character 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextEditOptions.NoCharacterAction.ThrowException">
      <summary>
            Throw exception
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextEditOptions.NoCharacterAction.UseStandardFont">
      <summary>
            Repalce font to standard font which contains required character
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextEditOptions.NoCharacterAction.ReplaceAnyway">
      <summary>
            Replace text anyway without font substitution
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextEditOptions.NoCharacterBehavior">
      <summary>
            Gets or sets mode that defines behavior in case fonts don't contain requested characters.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextEditOptions.FontReplaceBehavior">
      <summary>
            Gets mode that defines behavior for fonts replacement scenarios.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextEditOptions.FontReplace">
      <summary>
            Font replacement behavior.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextEditOptions.FontReplace.Default">
      <summary>
            No additional changes performed during font replacement.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextEditOptions.FontReplace.RemoveUnusedFonts">
      <summary>
            Fonts that become unused during font replacement will be removed from resulting document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextEditOptions.AllowLanguageTransformation">
      <summary>
            Gets or sets value that permits usage of language transformation during adding or editing of text.
            true - language transformation will be applied if necessary (default value).
            false - language transformation will NOT be applied.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextEditOptions.LanguageTransformationBehavior">
      <summary>
            Gets mode that defines behavior for language transformation scenarios.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextEditOptions.LanguageTransformation">
      <summary>
            Language transformation modes
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextEditOptions.LanguageTransformation.Default">
      <summary>
            Default language transformation is performed.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextEditOptions.LanguageTransformation.ExactlyAsISee">
      <summary>
            Language transformation is performed the same way as in a text editor. It usually means text will looks in the document exactly as You see it in code. But no warranties.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextEditOptions.LanguageTransformation.None">
      <summary>
            Language transformation is not performed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextEditOptions.ToAttemptGetUnderlineFromSource">
      <summary>
            Gets or sets value that permits searching for text underlining on the page of source document.
            false - text underlining that may present in source document will be ignored (default value).
            true - searching for text underlining will be performed in the source document. It may dramatically decrease performance of text editing operations. It also may effect on page graphical elements those look like underlining.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextExtractionOptions">
      <summary>
            Represents text extraction options
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextExtractionOptions.#ctor(Aspose.Pdf.Text.TextExtractionOptions.TextFormattingMode)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextExtractionOptions" /> object for the specified text formatting mode.
            </summary>
      <param name="formattingMode">Text formatting mode value.</param>
    </member>
    <member name="T:Aspose.Pdf.Text.TextExtractionOptions.TextFormattingMode">
      <summary>
            Defines different modes which can be used while converting pdf document into text. See <see cref="!:TextDevice" /> class.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextExtractionOptions.TextFormattingMode.Pure">
      <summary>
            Represent pdf content with a bit of formatting routines.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextExtractionOptions.TextFormattingMode.Raw">
      <summary>
            Represent pdf content as is, i.e. without formatting.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextExtractionOptions.TextFormattingMode.MemorySaving">
      <summary>
            Extraction with memory saving. It is almost same to 'Raw' mode but works slightly faster and uses less memory.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextExtractionOptions.FormattingMode">
      <summary>
            Gets formatting mode. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextExtractionOptions.ScaleFactor">
      <summary>
            Gets or sets factor that will be applied to scale font size during extraction in pure mode.
            Setting of less value leads to more spaces in the extracted text.
            Default value is 1 - no scaling;
            Setting value to zero allows algorithm choose scaling automatically.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextOptions">
      <summary>
            Represents text processing options
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextReplaceOptions">
      <summary>
            Represents text replace options
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextReplaceOptions.Scope">
      <summary>
            Scope where replace text operation is applied 
            REPLACE_FIRST by default
            This obsolete option was kept for compatibility. It affects to PdfContentEditor and has no effect to TextFragmentAbsorber.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextReplaceOptions.Scope.REPLACE_FIRST">
      <summary>
            Replace only first occurrence of the text on each of affected pages
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextReplaceOptions.Scope.REPLACE_ALL">
      <summary>
            Replace all text occurrences on all affected pages
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextReplaceOptions.ReplaceScope">
      <summary>
            Gets or sets a scope where replace text operation is applied 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Text.TextReplaceOptions.ReplaceAdjustment">
      <summary>
            Determines action that will be done after replace of text fragment to more short.
            None - no action, length of the line may be changed;
            AdjustSpaceWidth - tries adjust spaces between words to keep line length;
            WholeWordsHyphenation - tries distribute words between paragraph lines to keep paragraph's right field;
            Default value is None;
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextReplaceOptions.ReplaceAdjustment.None">
      <summary>
            No action, length of the line may be changed
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextReplaceOptions.ReplaceAdjustment.AdjustSpaceWidth">
      <summary>
            Tries adjust spaces between words to keep line length
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextReplaceOptions.ReplaceAdjustment.WholeWordsHyphenation">
      <summary>
            Tries distribute words between paragraph lines to keep paragraph's right field
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextReplaceOptions.ReplaceAdjustmentAction">
      <summary>
            Gets or sets an action that will be done after replace of text fragment to more short.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextReplaceOptions.AdjustmentNewLineSpacing">
      <summary>
            Gets or sets value of line spacing that used if replace adjustment is forced to create new line of text.
            The value expected is multiplier of font size of the replaced text. Default is 1.2.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextReplaceOptions.#ctor(Aspose.Pdf.Text.TextReplaceOptions.Scope)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextReplaceOptions" /> object for the specified scope.
            </summary>
      <param name="scope">Scope object.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextReplaceOptions.#ctor(Aspose.Pdf.Text.TextReplaceOptions.ReplaceAdjustment)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextReplaceOptions" /> object for the specified after replace action.
            </summary>
      <param name="adjustment">ReplaceAdjustment object.</param>
    </member>
    <member name="T:Aspose.Pdf.Text.TextSearchOptions">
      <summary>
            Represents text search options
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSearchOptions.IsRegularExpressionUsed">
      <summary>
            Gets or sets indication that regular expression is used.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSearchOptions.LimitToPageBounds">
      <summary>
            Gets or sets indication that text is searched within the page bounds.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSearchOptions.Rectangle">
      <summary>
            Gets or sets rectangle that bounds the searched text.
            </summary>
      <remarks>
            The property may be used in case it is required to delimit text extraction or text replace region.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSearchOptions.UseFontEngineEncoding">
      <summary>
            Gets or sets indication that text will be searched using font engine encoding.
            true - means that font engine encoding will be used (try this if text search fails because of imperfect encoding in the document)
            false - means that document font encoding will be used (default value)
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSearchOptions.IgnoreShadowText">
      <summary>
            Gets or sets indication that text fragments representing shadow of normal text will be ignored during search.
            true - means that shadow text will not be found (try this if text search returns duplicated fragments on the close positions)
            false - means that shadow text will be found as well as normal text (default value)
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSearchOptions.LogTextExtractionErrors">
      <summary>
            Gets or sets indication that text extraction (decoding) errors will be logged in the text (fragment) absorber.
            true - means that text extraction (decoding) errors will be loged. It may decrease performance.
            false (default) - no error loging.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextSearchOptions.#ctor(System.Boolean)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextSearchOptions" /> object.
            Specifies regular expression usage mode.
            </summary>
      <param name="isRegularExpressionUsed">Value that indicates that regularexpression is used.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextSearchOptions.#ctor(Aspose.Pdf.Rectangle)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextSearchOptions" /> object.
            Specifies rectangle that delimits the searched text.
            </summary>
      <param name="rectangle">Rectangle that includes the extracted text.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextSearchOptions.#ctor(Aspose.Pdf.Rectangle,System.Boolean)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextSearchOptions" /> object.
            Specifies rectangle that delimits the searched text and regular expression usage mode.
            </summary>
      <param name="rectangle">Rectangle that includes the extracted text.</param>
      <param name="isRegularExpressionUsed">Value that indicates that regularexpression is used.</param>
    </member>
    <member name="T:Aspose.Pdf.Text.TextSegment">
      <summary>
             Represents segment of Pdf text.
             </summary>
      <remarks>
             In a few words, <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects are children of <see cref="T:Aspose.Pdf.Text.TextFragment" /> object.
             
             In details:
             
             Text of pdf document in <see cref="N:Aspose.Pdf" /> is represented by two basic objects: <see cref="T:Aspose.Pdf.Text.TextFragment" /> and <see cref="T:Aspose.Pdf.Text.TextSegment" />
            
             The differences between them is mostly context-dependent.
            
             Let's consider following scenario. User searches text "hello world" to operate with it, change it's properties, look etc.
             <code lang="C#">
             Document doc = new Document(docFile);
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             doc.Pages[1].Accept(absorber);
             </code>
             Phisycally pdf text's representation is very complex.
             The text "hello world" may consist of several phisycally independent text segments.
            
             The Aspose.Pdf text model basically establishes that <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
             provides single logic operation set over physical <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects set that represent user's query.
            
             In text search scenario, <see cref="T:Aspose.Pdf.Text.TextFragment" /> is logical "hello world" text representation,
             and <see cref="T:Aspose.Pdf.Text.TextSegment" /> object collection represents all physical segments that construct "hello world" text object.
            
             So, <see cref="T:Aspose.Pdf.Text.TextFragment" /> is close to logical text representation.
             And <see cref="T:Aspose.Pdf.Text.TextSegment" /> is close to physical text representation.
            
             Obviously each <see cref="T:Aspose.Pdf.Text.TextSegment" /> object may have it's own font, coloring, positioning properties.
            
             <see cref="T:Aspose.Pdf.Text.TextFragment" /> provides simple way to change text with it's properties: set font, set font size, set font color etc.
             Meanwhile <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects are accessible and users are able to operate with <see cref="T:Aspose.Pdf.Text.TextSegment" /> objects independently.
             </remarks>
      <example>
             The example demonstrates how to change text color and font size of the text with <see cref="P:Aspose.Pdf.Text.TextSegment.TextState" /> object of <see cref="T:Aspose.Pdf.Text.TextSegment" /> object.
             <code lang="C#"> 
             // Open document
             Document doc = new Document(@"D:\Tests\input.pdf");
             
             // Create TextFragmentAbsorber object to find all "hello world" text occurrences
             TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
             
             // Accept the absorber for first page
             doc.Pages[1].Accept(absorber);
             
             // Change foreground color of the first text segment of the first text occurrence
             absorber.TextFragments[1].Segments[1].TextState.ForegroundColor = Color.FromRgb(System.Drawing.Color.Red);
             // Change font size of the first text segment of the first text occurrence
             absorber.TextFragments[1].Segments[1].TextState.FontSize = 15;
             
             // Save document
             doc.Save(@"D:\Tests\output.pdf");  
            	</code></example>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegment.StartCharIndex">
      <summary>
            Gets starting character index of current segment in the show text operator (Tj, TJ) segment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegment.EndCharIndex">
      <summary>
            Gets ending character index of current segment in the show text operator (Tj, TJ) segment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegment.Text">
      <summary>
            Gets or sets <see cref="T:System.String" /> text object that the <see cref="T:Aspose.Pdf.Text.TextSegment" /> object represents.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegment.TextState">
      <summary>
            Gets or sets text state for the text that <see cref="T:Aspose.Pdf.Text.TextSegment" /> object represents.
            </summary>
      <remarks>
            Provides a way to change following properties of the text:
               Font
               FontSize
               FontStyle
               ForegroundColor
               BackgroundColor
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegment.Position">
      <summary>
            Gets text position for text, represented with <see cref="T:Aspose.Pdf.Text.TextSegment" /> object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegment.Rectangle">
      <summary>
            Gets rectangle of the TextSegment
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegment.BaselinePosition">
      <summary>
            Gets text position for text, represented with <see cref="T:Aspose.Pdf.Text.TextSegment" /> object.
            The YIndent of the Position structure represents baseline coordinate of the text segment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegment.TextEditOptions">
      <summary>
            Gets or sets text edit options. The options define special behavior when requested symbol cannot be written with font.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegment.Characters">
      <summary>
            Gets collection of CharInfo objects that represent information on characters in the text segment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegment.Hyperlink">
      <summary>
            Gets or sets the segment hyperlink(for pdf generator).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextSegment.#ctor">
      <summary>
            Creates TextSegment object.
            </summary>
      <example>
            The example demonstrates how to create text fragment object, add a text segment to the text fragment collection and append it to the Pdf page.
            <code lang="C#"> 
            Document doc = new Document(inFile);
            Page page = (Page)doc.Pages[1];
            
            // create text fragment
            TextFragment tf = new TextFragment("main text");
            tf.Position = new Position(100, 600);
            
            // set it's text properties
            tf.TextState.FontSize = 5;
            tf.TextState.Font = FontRepository.FindFont("TimesNewRoman");
            tf.TextState.BackgroundColor = Color.LightGray;
            tf.TextState.ForegroundColor = Color.Red;
            
            // add one more segment to text fragment's Segments collection
            TextSegment segment2 = new TextSegment();
            segment2.Text = "another segment";
            
            tf.Segments.Add(segment2);
            
            // create TextBuilder object
            TextBuilder builder = new TextBuilder(page);
            
            // append the text fragment to the Pdf page
            builder.AppendText(tf);
            
            //save document
            doc.Save(outFile);
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Text.TextSegment.#ctor(System.String)">
      <summary>
            Creates TextSegment object.
            </summary>
      <example>
            The example demonstrates how to create text fragment object, add a text segment to the text fragment collection and append it to the Pdf page.
            <code lang="C#"> 
            Document doc = new Document(inFile);
            Page page = (Page)doc.Pages[1];
            
            // create text fragment
            TextFragment tf = new TextFragment("main text");
            tf.Position = new Position(100, 600);
            
            // set it's text properties
            tf.TextState.FontSize = 5;
            tf.TextState.Font = FontRepository.FindFont("TimesNewRoman");
            tf.TextState.BackgroundColor = Color.LightGray;
            tf.TextState.ForegroundColor = Color.Red;
            
            // add one more segment to text fragment's Segments collection
            TextSegment segment2 = new TextSegment("another segment");
            
            tf.Segments.Add(segment2);
            
            // create TextBuilder object
            TextBuilder builder = new TextBuilder(page);
            
            // append the text fragment to the Pdf page
            builder.AppendText(tf);
            
            //save document
            doc.Save(outFile);
            </code></example>
      <param name="text">Text segment's text.</param>
    </member>
    <member name="T:Aspose.Pdf.Text.TextSegmentCollection">
      <summary>
            Represents a text segments collection
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegmentCollection.Count">
      <summary>
             Gets the number of <see cref="T:Aspose.Pdf.Text.TextSegment" /> object elements actually contained in the collection. 
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegmentCollection.SyncRoot">
      <summary>
             Gets an object that can be used to synchronize access to the collection.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegmentCollection.IsSynchronized">
      <summary>
             Gets a value indicating whether access to the collection is synchronized (thread safe). 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextSegmentCollection.Add(Aspose.Pdf.Text.TextSegment)">
      <summary>
            Adds the text segment element at the specified index.
            </summary>
      <param name="segment">Text segment object</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextSegmentCollection.GetEnumerator">
      <summary>
             Returns an enumerator for the entire collection.
            </summary>
      <returns>Enumerator object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.TextSegmentCollection.CopyTo(System.Array,System.Int32)">
      <summary>
             Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
            </summary>
      <param name="array">Array of objects which will be copied.</param>
      <param name="index">Starting index from which copying will be started.</param>
    </member>
    <member name="P:Aspose.Pdf.Text.TextSegmentCollection.Item(System.Int32)">
      <summary>
            Gets the text segment element at the specified index.
            </summary>
      <param name="index">Index within the collection.</param>
      <returns>TextSegment object.</returns>
    </member>
    <member name="T:Aspose.Pdf.Text.TextState">
      <summary>
            Represents a text state of a text
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Text.TextState.TabTag">
      <summary>
            You can place this tag in text to declare tabulation.
            </summary>
      <remarks>
            It has effect only in couple with <see cref="T:Aspose.Pdf.Text.TabStops" />.
            </remarks>
    </member>
    <member name="F:Aspose.Pdf.Text.TextState.TabstopDefaultValue">
      <summary>
            Default value of tabulation in widths of space character of default font.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextState.ApplyChangesFrom(Aspose.Pdf.Text.TextState)">
      <summary>
            Applies settings from another textState. 
            </summary>
      <remarks>
            Only those properties will be copied that were changed explicitly.
            </remarks>
      <param name="textState">Text state object.</param>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.CharacterSpacing">
      <summary>
            Gets or sets character spacing of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.LineSpacing">
      <summary>
            Gets or sets line spacing of the text.
            </summary>
      <remarks>
            Note that the value is not preserved as a text characteristic within the document.
            The LineSpacing property getter works for an object in case it was explicitly set previously with LineSpacing setter for those object.
            
            The property is used by runtime in context of current generation/modification process.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.HorizontalScaling">
      <summary>
            Gets or sets horizontal scaling of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.Subscript">
      <summary>
            Gets or sets subscript of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.Superscript">
      <summary>
            Gets or sets superscript of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.WordSpacing">
      <summary>
            Gets or sets word spacing of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.Invisible">
      <summary>
            Gets or sets invisibility of the text. Obsolete. Please use RenderingMode instead.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.RenderingMode">
      <summary>
            Gets or sets rendering mode of text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.FontSize">
      <summary>
            Gets or sets font size of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.Font">
      <summary>
            Gets or sets font of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.ForegroundColor">
      <summary>
            Gets or sets foreground color of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.StrokingColor">
      <summary>
            Gets or sets foreground color of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.Underline">
      <summary>
            Sets underline for the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.StrikeOut">
      <summary>
            Sets strikeout for the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" /> object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.BackgroundColor">
      <summary>
            Sets background color of the text.
            </summary>
      <remarks>
            Note that the value is not preserved as a text characteristic within the document.
            The BackgroundColor property getter works for an object in case it was explicitly set previously with BackgroundColor setter for those object.
            
            The property is used by runtime in context of current generation/modification process.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.FontStyle">
      <summary>
            Sets font style of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextState.HorizontalAlignment">
      <summary>
            Gets or sets horizontal alignment for the text. 
            </summary>
      <remarks>
            HorizontalAlignment.None is equal to HorizontalAlignment.Left.
            
            Note that TextState.HorizontalAlignment property works in new document generation scenarios only.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Text.TextState.#ctor">
      <summary>
            Creates text state object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.TextState.MeasureString(System.String)">
      <summary>
            Measures the string.
            </summary>
      <param name="str">The string.</param>
      <returns>Width of the string represented with this text state.</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.TextState.#ctor(System.Double)">
      <summary>
            Creates text state object with font size specification.
            </summary>
      <param name="fontSize">Font size.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextState.#ctor(System.Drawing.Color)">
      <summary>
            Creates text state object with foreground color specification.
            </summary>
      <param name="foregroundColor">Foreground color.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextState.#ctor(System.Drawing.Color,System.Double)">
      <summary>
            Creates text state object with foreground color and font size specification.
            </summary>
      <param name="foregroundColor">Foreground color.</param>
      <param name="fontSize">Font size.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextState.#ctor(System.String)">
      <summary>
            Creates text state object with font family specification.
            </summary>
      <param name="fontFamily">Font family.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextState.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary>
            Creates text state object with font family and font style specification.
            </summary>
      <param name="fontFamily">Font family.</param>
      <param name="bold">Bold font style.</param>
      <param name="italic">Italic font style.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.TextState.#ctor(System.String,System.Double)">
      <summary>
            Creates text state object with font family and font size specification.
            </summary>
      <param name="fontFamily">Font family.</param>
      <param name="fontSize">Font size.</param>
    </member>
    <member name="T:Aspose.Pdf.DocumentFactory">
      <summary>
            Class which allows to create/load documents of different types.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.DocumentFactory.CreateDocument(System.IO.Stream,Aspose.Pdf.LoadOptions)">
      <summary>
            Create document.
            </summary>
      <param name="input">Input stream.</param>
      <param name="options">Document load options.</param>
      <returns>Created document.</returns>
    </member>
    <member name="M:Aspose.Pdf.DocumentFactory.CreateDocument">
      <summary>
            Create empty document.
            </summary>
      <returns>Created document.</returns>
    </member>
    <member name="M:Aspose.Pdf.DocumentFactory.CreateDocument(System.IO.Stream)">
      <summary>
            Load document from a stream.
            </summary>
      <param name="input">Input stream.</param>
      <returns>Created document.</returns>
    </member>
    <member name="M:Aspose.Pdf.DocumentFactory.CreateDocument(System.IO.Stream,System.String)">
      <summary>
            Load password protected document from a stream.
            </summary>
      <param name="input">Source stream.</param>
      <param name="password">Passowrd for access to document.</param>
      <returns>Created document.</returns>
    </member>
    <member name="M:Aspose.Pdf.DocumentFactory.CreateDocument(System.String)">
      <summary>
            Load document from a file. 
            </summary>
      <param name="fileName">Name of PDF file.</param>
      <returns>Created document.</returns>
    </member>
    <member name="T:Aspose.Pdf.Matrix3D">
      <summary>
            Class represents transformation matrix. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Matrix3D.A">
      <summary>
            A member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Matrix3D.B">
      <summary>
            B member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Matrix3D.C">
      <summary>
            C member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Matrix3D.D">
      <summary>
            D member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Matrix3D.E">
      <summary>
            E member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Matrix3D.F">
      <summary>
            F member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Matrix3D.G">
      <summary>
            G member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Matrix3D.H">
      <summary>
            H member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Matrix3D.I">
      <summary>
            I member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Matrix3D.Tx">
      <summary>
            Tx member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Matrix3D.Ty">
      <summary>
            Ty member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Matrix3D.Tz">
      <summary>
            Tz member of the transformation matrix.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Matrix3D.#ctor">
      <summary>
            Constructor
            creates stanrard 1 to 1 matrix:
            [ A B C D E F G H I Tx Ty Tz] = [ 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0 , 0]
            </summary>
      <example>
        <code lang="C#">
            Matrix3D m = new Matrix3D();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Matrix3D.#ctor(System.Double[])">
      <summary>
            Constructor
            accepts a matrix with following array representation:
            [ A B C D E F G H I Tx Ty Tz]
            </summary>
      <param name="matrix3DArray">Matrix data array.</param>
      <example>
        <code lang="C#">
            double[] c = new double[] { 1, 0, 0, 1, 10, 20, 1, 0, 0, 17, 40, 13 };
            Matrix3D m = new Matrix3D(c);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Matrix3D.#ctor(Aspose.Pdf.Matrix3D)">
      <summary>
            Constructor
            accepts a matrix to create a copy
            </summary>
      <param name="matrix">Matrix3D object.</param>
    </member>
    <member name="M:Aspose.Pdf.Matrix3D.ToString">
      <summary>
            Returns text reporesentation of the matrix. 
            </summary>
      <returns>String representation for the matrix</returns>
    </member>
    <member name="M:Aspose.Pdf.Matrix3D.Equals(System.Object)">
      <summary>
            Compares matrix agains other object.
            </summary>
      <param name="obj">Object to compare.</param>
      <returns>Returns true is other object is Matrix3D and all matrix members are equal to corresponding members of the matrix</returns>
    </member>
    <member name="M:Aspose.Pdf.Matrix3D.GetAngle(Aspose.Pdf.Rotation)">
      <summary>
            Transaltes rotation into angle (degrees)
            </summary>
      <param name="rotation">Rotation value.</param>
      <example>
        <code lang="C#">
            double angle = Matrix.GetAngle(Rotation.on90);
            Matrix m = Matrix.Rotation(angle);
            </code>
      </example>
      <returns>Angle value.</returns>
    </member>
    <member name="M:Aspose.Pdf.Matrix3D.Add(Aspose.Pdf.Matrix3D)">
      <summary>
            Adds matrix to other matrix.
            </summary>
      <param name="other">Matrix to be added.</param>
      <returns>Result of matrix add.</returns>
    </member>
    <member name="M:Aspose.Pdf.Matrix3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes transformation matrix with specified coefficients.
            </summary>
      <param name="a">A matrix value.</param>
      <param name="b">B matrix value.</param>
      <param name="c">C matrix value.</param>
      <param name="d">D matrix value.</param>
      <param name="e">E matrix value.</param>
      <param name="f">F matrix value.</param>
      <example>
        <code lang="C#">
            Matrix m = new Matrix(1, 0, 0, 1, 3, 3);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Matrix3D.GetHashCode">
      <summary>
            Hash-code for object.
            </summary>
      <returns>Hash-code.</returns>
    </member>
    <member name="T:Aspose.Pdf.EmptyValueException">
      <summary>
            Exception which thrown when requirested value does not exists.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.EmptyValueException.#ctor(System.String)">
      <summary>
            Constructor.
            </summary>
      <param name="message">Exception message.</param>
    </member>
    <member name="T:Aspose.Pdf.FontEmbeddingException">
      <summary>
            The exception that is thrown when an attempt to embed font became failed
            </summary>
    </member>
    <member name="M:Aspose.Pdf.FontEmbeddingException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.FontEmbeddingException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.FontEmbeddingException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.FontEmbeddingException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.FontEmbeddingException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.FontEmbeddingException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:Aspose.Pdf.IncorrectCMapUsageException">
      <summary>
            The exception that is thrown when font usage is incorrect.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.IncorrectCMapUsageException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.IncorrectCMapUsageException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="T:Aspose.Pdf.InvalidValueFormatException">
      <summary>
            Exception which thrown when requested value has incorrect format.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InvalidValueFormatException.#ctor(System.String)">
      <summary>
            Constructor. 
            </summary>
      <param name="message">Exception message.</param>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfPrintPageInfo">
      <summary>
            Represents an object that contains current printing page info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPrintPageInfo.PageNumber">
      <summary>
            Gets currently printed page number;
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfQueryPageSettingsEventHandler">
      <summary>
            Represents the method that handles the QueryPageSettings event of a PrintDocument.
            </summary>
      <param name="sender">The source of the event. </param>
      <param name="queryPageSettingsEventArgs">A QueryPageSettingsEventArgs that contains the event data.</param>
      <param name="currentPageInfo">Currently printed page info.</param>
    </member>
    <member name="T:Aspose.Pdf.Facades.Algorithm">
      <summary>
            Represents algorithms which can be used to encrypt pdf document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.Algorithm.RC4">
      <summary>
            RC4 algorithm.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.Algorithm.AES">
      <summary>
            AES algorithm.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.AlignmentType">
      <summary>
            Class contains possibly alignment types.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.AlignmentType.#ctor(System.String)">
      <summary>
            Constructor of AlignmentType.
            </summary>
      <param name="name">Alignment type name.</param>
    </member>
    <member name="F:Aspose.Pdf.Facades.AlignmentType.Center">
      <summary>
            Center alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.AlignmentType.Left">
      <summary>
            Left alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.AlignmentType.Right">
      <summary>
            Right alignment.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.AlignmentType.ToString">
      <summary>
            Returns string representation.
            </summary>
      <returns>Name value.</returns>
    </member>
    <member name="T:Aspose.Pdf.Facades.AutoFiller">
      <summary>
             Represents a class to receive data from database or other datasource, fills them into the designed fields of the template pdf and at last generates new pdf file or stream.
             It has two template file input modes:input as a stream or a pdf file.
             It has four types of output modes:one merged stream, one merged file, many small streams, many small files.
             It can recieve literal data contained in a System.Data.DataTable.
             </summary>
      <example>
        <code>
            	[C#]
             //Note: mail.pdf is a template pdf which has seven text fields. NorthWind.mdb is the microsoft access db.
             ////Common part: Get the data from the database NorthWind.mdb fill it into the DataTable.
            				
            	OleDbCommand mQueryCommand;
            	OleDbDataAdapter mDbDataAdapter;
            	OleDbConnection mDbConnection;
            
            	//Construct the data table.
            	DataTable mDataTable = new DataTable("MailMerge");
            	DataColumnCollection columns = mDataTable.Columns;
            	columns.Add("CompanyName",typeof(string));
            	columns.Add("ContactName",typeof(string));
            	columns.Add("Address",typeof(string));
            	columns.Add("PostalCode",typeof(string));
            	columns.Add("City",typeof(string));
            	columns.Add("Country",typeof(string));
            	columns.Add("Heading",typeof(string));
            
            
            	//Connect to the database source and query the data.
            	mDbConnection = new OleDbConnection();
            	mDbConnection.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + 
            	DbPath + "NorthWind.mdb";
            	mQueryCommand = new OleDbCommand();
            	mQueryCommand.Connection = mDbConnection;
            	mDbConnection.Open();
            
            
            	mQueryCommand.CommandText = "select CompanyName, ContactName, Address, PostalCode, City, Country from Customers;";
            	mDbDataAdapter = new OleDbDataAdapter(mQueryCommand);
            			
            	mDbDataAdapter.Fill(mDataTable);
            	
            	for (int i = 0; i&lt;mDataTable.Rows.Count;i++)
            	{
            		mDataTable.Rows[i][mDataTable.Columns.Count - 1] = "Dear " + mDataTable.Rows[i][0].ToString() + ",";
            		System.Console.WriteLine("postalCode:" + mDataTable.Rows[i][3].ToString());
            		System.Console.WriteLine("Heading:" + mDataTable.Rows[i][mDataTable.Columns.Count - 1].ToString());
            	}
            
            	mDbDataAdapter.Dispose();
            	mDbConnection.Close();
            	////End of Common part.
            
            	////case one:
            	////Input template pdf is a pdf file and output is a big merged stream.		
              
            	AutoFiller autoFiller = new AutoFiller();
            			
            	autoFiller.InputFileName = "mail.pdf";
            	autoFiller.OutputStream = Response.OutputStream;
            
            	autoFiller.ImportDataTable(mDataTable);
            	autoFiller.Save();
            
            	////case two:
            	////Input template pdf is a pdf file and output is a lot of small files.
            	AutoFiller autoFiller = new AutoFiller();
            			
            	autoFiller.InputFileName = "mail.pdf";
            	autoFiller.GeneratingPath = ".\\";
            	autoFiller.BasicFileName = "outputFile";
            
            	autoFiller.ImportDataTable(mDataTable);
            	autoFiller.Save();
            
            	[Visual Basic]
            	'Note: mail.pdf is a template pdf which has seven text fields. NorthWind.mdb is the microsoft access db.
            	'Common part: Get the data from the database NorthWind.mdb fill it into the DataTable. 
            	mQueryCommand As OleDbCommand = Nothing
            	mDbDataAdapter As OleDbDataAdapter = Nothing
            	mDbConnection As OleDbConnection = Nothing
            
            	mDataTable As DataTable = Nothing
            
            	mPath As String = Nothing
            	mTemplatePdf As String = Nothing
            
            	'Construct the data table.
            	mDataTable = New DataTable("MailMerge")
            	Dim columns As DataColumnCollection = mDataTable.Columns
            	'Create columns for the datatable. 
            	'Every column's  name should be the same as one field's name of the templatePdf.
            	columns.Add("CompanyName", Type.GetType("System.String"))
            
            	columns.Add("ContactName", Type.GetType("System.String"))
            	columns.Add("Address", Type.GetType("System.String"))
            	columns.Add("PostalCode", Type.GetType("System.String"))
            	columns.Add("City", Type.GetType("System.String"))
            	columns.Add("Country", Type.GetType("System.String"))
            	columns.Add("Heading", Type.GetType("System.String"))
            
            
            	'Connect to the database source and query the data.
            	mDbConnection = New OleDbConnection
            	mDbConnection.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DbPath + "NorthWind.mdb"
            	mQueryCommand = New OleDbCommand
            	mQueryCommand.Connection = mDbConnection
            	mDbConnection.Open()
            
            	'Query the data and insert into the datatable.
            	mQueryCommand.CommandText = "select CompanyName, ContactName, Address, PostalCode, City, Country from Customers;"
            	mDbDataAdapter = New OleDbDataAdapter(mQueryCommand)
            	mDbDataAdapter.Fill(mDataTable)
            
            	'Construct the last column  of the Datatable.
            	Dim i As Integer
            	For i = 0 To mDataTable.Rows.Count - 1 Step i + 1
            		mDataTable.Rows(i)(mDataTable.Columns.Count - 1) = "Dear " + mDataTable.Rows(i)(0).ToString() + ","
            		System.Console.WriteLine("postalCode:" + mDataTable.Rows(i)(3).ToString())
            		System.Console.WriteLine("Heading:" + mDataTable.Rows(i)(mDataTable.Columns.Count - 1).ToString())
            	Next
            
            	mDbDataAdapter.Dispose()
            	mDbConnection.Close()
            	'End of Common part.
            
            	'case one:
            	'Input template pdf is a pdf file and output is a big merged stream.
            	Dim autoFiller As AutoFiller = New AutoFiller
            
            	autoFiller.InputFileName = "mail.pdf"
            	autoFiller.OutputStream = Response.OutputStream
            
            	autoFiller.ImportDataTable(mDataTable)
            	autoFiller.Save()
            
            	'case two:
            	'Input template pdf is a pdf file and output is a lot of small files.
            	Dim autoFiller As AutoFiller = New AutoFiller
            
            	autoFiller.InputFileName = "mail.pdf"
            	autoFiller.GeneratingPath = ".\";
            	autoFiller.BasicFileName = "outputFile"
            
            	autoFiller.ImportDataTable(mDataTable)
            	autoFiller.Save()
             </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.AutoFiller.UnFlattenFields">
      <summary>
            Sets the fields which will not be flattened.
            If this property is not set, all the fields will be flattened.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.AutoFiller.OutputStream">
      <summary>
            Gets or sets the OutputStream. One of four output modes. Its classical use case is Response.OutputStream.
            Please refer to the online demo.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.AutoFiller.OutputStreams">
      <summary>
            Gets or sets the many Output Streams. One of four output modes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.AutoFiller.InputStream">
      <summary>
            Gets or sets the input template stream. One of two input modes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.AutoFiller.InputFileName">
      <summary>
            Gets or sets the input template file. One of two input modes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.AutoFiller.OutputFileName">
      <summary>
            Gets or sets the one big merged output file. One of the four output modes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.AutoFiller.GeneratingPath">
      <summary>
            Gets or sets the Generating Path of the small pdf files if many small pdf files to be generated. It works with another property <see cref="P:Aspose.Pdf.Facades.AutoFiller.BasicFileName" />BasicFileName.
            One of the four output modes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.AutoFiller.BasicFileName">
      <summary>
            Gets or sets the basic file name if many small files will be generated. The generated file will be like "BasicFileName0","BasicFileName1",...
            It works with another property <see cref="P:Aspose.Pdf.Facades.AutoFiller.GeneratingPath" />GeneratingPath.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.AutoFiller.Save">
      <summary>
            Saves all the pdfs.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.AutoFiller.ImportDataTable(System.Data.DataTable)">
      <summary>
            Imports data of DataTable type. Every column's name of the  dataTable must be the same as
            one field name of the template pdf in case sensitive.
            </summary>
      <param name="dataTable">The dataTable which contains all the data from database or other data source.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.AutoFiller.Save(System.String)">
      <summary>
            Saves all the pdfs.
            </summary>
      <param name="destFile">Output file name.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.AutoFiller.Save(System.IO.Stream)">
      <summary>
            Saves all the pdfs.
            </summary>
      <param name="destStream">Output stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.AutoFiller.BindPdf(System.String)">
      <summary>
            Binds a Pdf file.
            </summary>
      <param name="srcFile">Pdf file name.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.AutoFiller.BindPdf(System.IO.Stream)">
      <summary>
            Binds a Pdf file.
            </summary>
      <param name="srcStream">Pdf file stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.AutoFiller.BindPdf(Aspose.Pdf.Document)">
      <summary>
            Binds a Pdf document.
            </summary>
      <param name="srcDoc">Pdf document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.AutoFiller.Close">
      <summary>
            Closes the object and output streams.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.AutoFiller.Dispose">
      <summary>
            Closes the object and output streams.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.BlendingColorSpace">
      <summary>
            Class represents blending color space.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.BlendingColorSpace.DontChange">
      <summary>
            The blending color space is not changed.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.BlendingColorSpace.Auto">
      <summary>
            The blending color space is determined automatically.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.BlendingColorSpace.DeviceRGB">
      <summary>
            Blending color space is set to DeviceRGB.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.BlendingColorSpace.DeviceCMYK">
      <summary>
            Blending color space is set to DeviceCMYK.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.Bookmark">
      <summary>
            Represents a bookmark.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.Action">
      <summary>
            Gets or sets the action bound with the bookmark.
            If PageNumber is presented the action can not be specified.
            The action type includes: "GoTo", "GoToR", "Launch", "Named".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.BoldFlag">
      <summary>
            Gets or sets the bold flag of bookmark's title.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.ChildItem">
      <summary>
            Gets or sets bookmark's children.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.ChildItems">
      <summary>
            Gets or sets bookmark's children.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.CustomAcorbatViewerMenuActionName">
      <summary>
            The action name corresponding to execute a menu item in Acrobat viewer.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.Destination">
      <summary>
            Gets or sets bookmark's destination page. Required if action is set as string.Empty.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.ItalicFlag">
      <summary>
            Gets or sets the italic flag of bookmark's title.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.Level">
      <summary>
            Gets or sets bookmark's hierarchy level.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.PageDisplay">
      <summary>
            Gets or sets the type of display bookmark's destination page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.PageDisplay_Bottom">
      <summary>
            Gets or sets the bottom coordinate of page display.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.PageDisplay_Left">
      <summary>
            Gets or sets the left coordinate of page display.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.PageDisplay_Right">
      <summary>
            Gets or sets the right coordinate of page display.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.PageDisplay_Top">
      <summary>
            Gets or sets the top coordinate of page display.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.PageDisplay_Zoom">
      <summary>
            Gets or sets the zoom factor of page display.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.PageNumber">
      <summary>
            Gets or sets the number of bookmark's destination page. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.RemoteFile">
      <summary>
            Gets or sets the file (path) which is required for "GoToR" action of bookmark.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.Title">
      <summary>
            Gets or sets bookmark's title.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.TitleColor">
      <summary>
            Gets or sets the color of bookmark's title.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmark.Open">
      <summary>
            Gets or sets bookmark state (open, close).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.Bookmarks">
      <summary>
            Represents a collection of <see cref="T:Aspose.Pdf.Facades.Bookmark" /> objects.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.Bookmarks.Add(Aspose.Pdf.Facades.Bookmark)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Facades.Bookmark" /> object into the collection.
            </summary>
      <param name="bookMark">The <see cref="T:Aspose.Pdf.Facades.Bookmark" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Bookmarks.CopyTo(Aspose.Pdf.Facades.Bookmark[],System.Int32)">
      <summary>
            Copies the elements to a <see cref="T:Aspose.Pdf.Facades.Bookmark" /> object array, starting at a specified array index.
            </summary>
      <param name="bookMarkArray">The Bookmarks array.</param>
      <param name="index">The start index.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Bookmarks.Remove(Aspose.Pdf.Facades.Bookmark)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Facades.Bookmark" /> object from the collection.
            </summary>
      <param name="bookMark">The <see cref="T:Aspose.Pdf.Facades.Bookmark" /> object to be removed.</param>
    </member>
    <member name="P:Aspose.Pdf.Facades.Bookmarks.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Facades.Bookmark" /> object from the collection according to bookmark index.
            </summary>
      <param name="index">Index of accessed object.</param>
      <returns>Object which is referenced.</returns>
    </member>
    <member name="T:Aspose.Pdf.Facades.DataType">
      <summary>
            Enumerates field types definitions.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DataType.FDF">
      <summary>
            FDF stream.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DataType.XML">
      <summary>
            XML stream.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DataType.XFDF">
      <summary>
            XFDF stream.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DataType.PDF">
      <summary>
            PDF stream.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DataType.OLEDB">
      <summary>
            OLEDB database, such as MS Access.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DataType.ODBC">
      <summary>
            ODBC database, such as MS SQL Server.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.DefaultMetadataProperties">
      <summary>
            Enumeration of standard XMP properties.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DefaultMetadataProperties.Advisory">
      <summary>
            xmp:Advisory property.
            An unordered array specifying properties that were edited outside the authoring application. Each item should contain a single          /// namespace and XPath separated by one ASCII space 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DefaultMetadataProperties.BaseURL">
      <summary>
            xmp:BaseURL property.
            The base URL for relative URLs in the document content. If this document contains Internet links, and those links are relative,          /// they are relative to this base URL. This property provides a standard way for embedded relative URLs to be interpreted by tools.        /// Web authoring tools should set the value based on their notion of where URLs will be interpreted
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DefaultMetadataProperties.CreateDate">
      <summary>
            xmp:CreateDate property.
            The date and time the resource was originally created.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DefaultMetadataProperties.CreatorTool">
      <summary>
            xmp:CreatorTool property.
            The name of the first known tool used to create the resource.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DefaultMetadataProperties.Identifier">
      <summary>
            xmp:Identifier property.
            An unordered array of text strings that unambiguously 
            identify the resource within a given context
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DefaultMetadataProperties.MetadataDate">
      <summary>
            xmp:MetadataDate property.
            The date and time that any metadata for this resource 
            was last changed
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DefaultMetadataProperties.ModifyDate">
      <summary>
            xmp:ModifyDate property.
            The date and time the resource was last modified. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DefaultMetadataProperties.Nickname">
      <summary>
            xmp:Nickname property.
            A short informal name for the resource.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.DefaultMetadataProperties.Thumbnails">
      <summary>
            xmp:Thumbnails property.
            An alternative array of thumbnail images for a file, 
            which can differ in characteristics such as size or image 
            encoding.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.DocumentPrivilege">
      <summary>
             Represents the privileges for accessing Pdf file. Refer to<see cref="T:Aspose.Pdf.Facades.PdfFileSecurity" />.
             There are 4 ways using this class:
             1.Using predefined privilege directly.
             2.Based on a predefined privilege and change some specifical permissions.
             3.Based on a predefined privilege and change some specifical Adobe Professional permissions combination.
             4.Mixes the way2 and way3.
             </summary>
      <example>
        <code>
             [C#]	
             //Way1: Using predefined privilege directly.
             DocumentPrivilege privilege = DocumentPrivilege.Print;
            
             //Way2: Based on a predefined privilege and change some specifical permissions.
             DocumentPrivilege privilege = DocumentPrivilege.AllowAll;
             privilege.AllowPrint = false;
             privilege.AllowModifyContents = false;
            
             //Way3: Based on a predefined privilege and change some specifical Adobe Professional permissions combination.
             DocumentPrivilege privilege = DocumentPrivilege.ForbidAll;
             privilege.ChangeAllowLevel = 1;
             privilege.PrintAllowLevel = 2;
            
             //Way4: Mixes the way2 and way3
             DocumentPrivilege privilege = DocumentPrivilege.ForbidAll;
             privilege.ChangeAllowLevel = 1;
             privilege.AllowPrint = true;
             
             [Visual Basic]
             'Way1: Using predefined privilege directly.
             Dim privilege As DocumentPrivilege =  DocumentPrivilege.Print 
             
             'Way2: Based on a predefined privilege and change some specifical permissions.
             Dim privilege As DocumentPrivilege =  DocumentPrivilege.AllowAll 
             privilege.AllowPrint = False
             privilege.AllowModifyContents = False
             
             'Way3: Based on a predefined privilege and change some specifical Adobe Professional permissions combination.
             Dim privilege As DocumentPrivilege =  DocumentPrivilege.ForbidAll 
             privilege.ChangeAllowLevel = 1
             privilege.PrintAllowLevel = 2
             
             'Way4: Mixes the way2 and way3
             Dim privilege As DocumentPrivilege =  DocumentPrivilege.ForbidAll 
             privilege.ChangeAllowLevel = 1
             privilege.AllowPrint = True
             </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.AllowPrint">
      <summary>
            Sets the permission which allow print or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.AllowDegradedPrinting">
      <summary>
            Sets the permission which allow degraded printing or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.AllowModifyContents">
      <summary>
            Sets the permission which allow modify contents or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.AllowCopy">
      <summary>
            Sets the permission which allow copy or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.AllowModifyAnnotations">
      <summary>
            Sets the permission which allow modify annotations or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.AllowFillIn">
      <summary>
            Sets the permission which allow fill in forms or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.AllowScreenReaders">
      <summary>
            Sets the permission which allow screen readers or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.AllowAssembly">
      <summary>
            Sets the permission which allow assembly or not. 
            true is allow and false is forbidden.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.PrintAllowLevel">
      <summary>
            Sets the print level of  document's privilege. Just as the Adobe Professional's Printing Allowed settings.
            0: None.
            1: Low Resolution (150 dpi).
            2: High Resolution.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.ChangeAllowLevel">
      <summary>
            Sets the change level of  document's privilege. Just as the Adobe Professional's Changes Allowed settings.
            0: None.
            1: Inserting, Deleting and Rotating pages.
            2: Filling in form fields and signing existing signature fields.
            3: Commenting, filling in form fields, and signing existing signature fields.
            4: Any except extracting pages.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.CopyAllowLevel">
      <summary>
            Sets the copy level of  document's privilege. Just as the Adobe Professional's permission settings.
            0: None.
            1: Enable text access for screen reader devices for the visually impaired.
            2: Enable copying of text, images and other content.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.DocumentPrivilege.CompareTo(System.Object)">
      <summary>
            Compares two <see cref="T:Aspose.Pdf.Facades.DocumentPrivilege" /> objects.
            <param name="obj">
            The object to compare with.
            </param><returns>A signed integer that indicates the relative values of this instance and value. Less than zero this instance is less than value. 
            Zero this instance is equal to value. Greater than zero this instance is greater than value.</returns></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.DegradedPrinting">
      <summary>
            Allows degraded printing.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.Print">
      <summary>
            Allows printing file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.ModifyContents">
      <summary>
            Allows modifying file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.Copy">
      <summary>
            Allows copying file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.ModifyAnnotations">
      <summary>
            Allows modifying annotations of file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.FillIn">
      <summary>
            Allows filling forms in file. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.ScreenReaders">
      <summary>
            Allows to reader on screen only.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.Assembly">
      <summary>
            Allows assemblying file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.AllowAll">
      <summary>
            All allowed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.DocumentPrivilege.ForbidAll">
      <summary>
            All Forbidded.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.EncodingType">
      <summary>
            Enumerates encoding types of the text using.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.EncodingType.Identity_h">
      <summary>
            The Unicode encoding with horizontal writing.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.EncodingType.Identity_v">
      <summary>
            The Unicode encoding with vertical writing.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.EncodingType.Cp1250">
      <summary>
            A windows text encoding name.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.EncodingType.Cp1252">
      <summary>
            A windows text encoding name.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.EncodingType.Cp1257">
      <summary>
            A windows text encoding name.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.EncodingType.Winansi">
      <summary>
            Windows ansi encoding.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.EncodingType.Macroman">
      <summary>
            Mac os standard encoding for Latin text.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.FieldType">
      <summary>
            Enumeration of possible field types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.Text">
      <summary>
            Text field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.ComboBox">
      <summary>
            Combo box field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.ListBox">
      <summary>
            List box field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.Radio">
      <summary>
            Radio button field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.CheckBox">
      <summary>
            Check box field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.PushButton">
      <summary>
            Push button field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.MultiLineText">
      <summary>
            Multiline text field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.Barcode">
      <summary>
            Barcode field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.InvalidNameOrType">
      <summary>
            Invalid field type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.Signature">
      <summary>
            Signature field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FieldType.Image">
      <summary>
            Image field.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.FontColor">
      <summary>
            Class representing color of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FontColor.Green">
      <summary>
            Green component of color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FontColor.Red">
      <summary>
            Red component of color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FontColor.Blue">
      <summary>
            Blue component of color.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.FontColor.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes color with specified color components.
            </summary>
      <param name="r">Red component.</param>
      <param name="g">Green component.</param>
      <param name="b">Blue component.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FontColor.#ctor">
      <summary>
            Initializes color.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.FontStyle">
      <summary>
            Enumerates 14 types of font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.Courier">
      <summary>
            Courier font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.CourierBold">
      <summary>
            Bold Courier font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.CourierOblique">
      <summary>
            Oblique Curier font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.CourierBoldOblique">
      <summary>
            Bold oblique Courier font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.Helvetica">
      <summary>
            Helvetica font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.HelveticaBold">
      <summary>
            Bold Helvetica font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.HelveticaOblique">
      <summary>
            Oblique Helvetica font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.HelveticaBoldOblique">
      <summary>
            Bold oblique Helvetica font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.Symbol">
      <summary>
            Symbol font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.TimesRoman">
      <summary>
            Times-Roman font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.TimesBold">
      <summary>
            Bold Times font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.TimesItalic">
      <summary>
            Italic Times font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.TimesBoldItalic">
      <summary>
            Bold italic Times font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.ZapfDingbats">
      <summary>
            ZapfDingbats font.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.Unknown">
      <summary>
            Unknown font. Standard font will be used.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FontStyle.CjkFont">
      <summary>
            True Type Font for CJK supporting ,default is MS PGothic font.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.Form">
      <summary>
            Class representing Acro form object.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.Form.ImportStatus">
      <summary>
            Status of imported field
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.Form.ImportStatus.Success">
      <summary>
            Field was successfully imported
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.Form.ImportStatus.FieldNotFound">
      <summary>
            Field with this name was not found in the document form.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.Form.FormImportResult">
      <summary>
            Class which describes result if field import. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Form.FormImportResult.Status">
      <summary>
            Status of field import.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Form.FormImportResult.FieldName">
      <summary>
            Full name of the field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Form.ImportResult">
      <summary>
            Result of last import operation. Array of objects which descibre result of import for each field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Form.SrcFileName">
      <summary>
            Gets or sets source file name.
            <example><code lang="C#">
              Form form = new Aspose.Pdf.Facades.Form();
              form.SrcFileName = "file.pdf";
            </code></example></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Form.ConvertTo">
      <summary>
            Sets PDF file format. Result file will be saved in specified file format. 
            If this property is not specified then file will be save in default PDF format without conversion.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Form.DestFileName">
      <summary>
            Gets or sets destiination file name.
            </summary>
      <example>
        <code lang="C#">
              Form form = new Aspose.Pdf.Facades.Form();
              form.DestFileName = "file.pdf";
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.Form.SrcStream">
      <summary>
            Gets or sets source stream.
            <example><code lang="C#">
             Form form = new Aspose.Pdf.Facades.Form();
             form.SrcStream = new FileStream("source.pdf", FileMode.Open, FileAccess.Read);
            </code></example></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Form.DestStream">
      <summary>
            Gets or sets destination stream.
            </summary>
      <example>
        <code lang="C#">
              Form form = new Aspose.Pdf.Facades.Form();
              form.DestStream = new FileStream("file.pdf", FileMode.Open, FileAccess.Read);
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.Form.FieldNames">
      <summary>
            Gets list of field names on the form.
            </summary>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            string[] fields = form.FieldNames;
            foreach(string field in fields)
            {
              Console.WriteLine(field);
            }
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.Form.FormSubmitButtonNames">
      <summary>
            Gets all form submit button names.
            </summary>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            string[] submits = form.FormSubmitButtonNames;
            foreach(string btn in submits)
            {
              Console.WriteLine(btn);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetFieldFacade(System.String)">
      <summary>
            Returns FrofmFieldFacade object containing all appearance attributes.
            <example><code lang="C#">
            Aspose.Pdf.Facades.Form form = new Aspose.Pdf.Facades.Form("form.pdf");
            FormFieldFacade field = form.GetFieldFacade("field1");
            Console.WriteLine("Color of field border: " + field.BorderColor);
            </code></example></summary>
      <param name="fieldName">Name of field to read.</param>
      <returns>FormFieldFacade object</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
            Constructor of Form with two stream parameters.
            Specify same source and destination stream for incremental update.
            </summary>
      <param name="srcStream">Source stream.</param>
      <param name="destStream">Destination stream.</param>
      <example>
        <code lang="C#">
            Form form = new Form(
            new FileStream( "InFile.pdf", FileMode.Open, FileAccess.Read),  
            new FileStream("OutFile.pdf", FileMode.Create, FileAccess.Write));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor">
      <summary>
            Construtcor of Form without parameters.
            <example><code lang="C#">
              Form form = new Aspose.Pdf.Facades.Form();
              form.SrcFileName = "file.pdf";
            </code></example></summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FillField(System.String,System.String)">
      <summary>
            Fills the field with a valid value according to a fully qualified field name.
            Before filling the fields, every field's names and its corresponding valid values must be known.
            Both the fields' name and values are case sensitive.
            Please note that Aspose.Pdf.Facades supports only full field names and does not work with partial 
            field names in contrast with Aspose.Pdf.Kit;
            For example if field has full name "Form.Subform.TextField" you should specify full name and not "TextField". 
            You can use FieldNames property to explore existing field names and search required field by its partial name.
            </summary>
      <param name="fieldName">The field's name to be filled.</param>
      <param name="fieldValue">The field's value which must be a valid value for some fields.</param>
      <returns>true if field is found and filled successfully.</returns>
      <example>
        <code lang="C#">
            Form form = new Form(TestSettings.GetInputFile("PdfForm.pdf"));
            form.FillField("FirstName", "John");
            form.FillField("LastName",  "Smith");
            </code>
        <code lang="C#">
            //how to search field by its partial name:
            Form form = new Form("input.pdf", "output.pdf"); 
            foreach(string fieldName in form.FieldNames)
            {
              if (fieldName.EndsWith("TextField"))
              {
                Console.WriteLine("Full name is: " + fieldName);
              }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FillField(System.String,System.Int32)">
      <summary>
            Fills the radio box field with a valid index value according to a fully qualified field name.
            Before filling the fields, only field's name must be known. While the value can be specified by its index.
            Notice: Only be applied to Radio Box, Combo Box and List Box fields.
            Please note that Aspose.Pdf.Facades supports only full field names and does not work with partial 
            field names in contrast with Aspose.Pdf.Kit;
            For example if field has full name "Form.Subform.ListBoxField" you should specify full name and not "ListBoxField". 
            You can use FieldNames property to explore existing field names and search required field by its partial name.
            </summary>
      <param name="fieldName">Name of field to be filled.</param>
      <param name="index">Index of chosen item.</param>
      <returns>true if field was found and successfully filled.</returns>
      <example lang="C#">
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            form.FillField("listboxField", 2);
            form.FillField("comboboxField", 2);
            form.FillField("radiobuttonField", 2);
            </code>
        <code lang="C#">
            //how to search field by its partial name:
            Form form = new Form("input.pdf", "output.pdf"); 
            foreach(string fieldName in form.FieldNames)
            {
              if (fieldName.EndsWith("ListBoxField"))
              {
                Console.WriteLine("Full name is: " + fieldName);
              }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FillField(System.String,System.Boolean)">
      <summary>
            Fills the check box field with a boolean value.
            Notice: Only be applied to Check Box.
            Please note that Aspose.Pdf.Facades supports only full field names and does not work with partial 
            field names in contrast with Aspose.Pdf.Kit;
            For example if field has full name "Form.Subform.CheckBoxField" you should specify full name and not "CheckBoxField". 
            You can use FieldNames property to explore existing field names and search required field by its partial name.
            </summary>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            form.FillField("checkboxField", true);
            </code>
        <code lang="C#">
            //how to search field by its partial name:
            Form form = new Form("input.pdf", "output.pdf"); 
            foreach(string fieldName in form.FieldNames)
            {
              if (fieldName.EndsWith("CheckBoxField"))
              {
                Console.WriteLine("Full name is: " + fieldName);
              }
            }
            </code>
      </example>
      <param name="fieldName">The field's name to be filled.</param>
      <param name="beChecked">A boolean flag: true means to check the box, while false to uncheck it.</param>
      <returns>true if field was found and successfully filled.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetButtonOptionCurrentValue(System.String)">
      <summary>
            Returns the current value for radio button option fields.
            </summary>
      <param name="fieldName">Field Name</param>
      <returns>String value for the current radio group optino. See also <see cref="M:Aspose.Pdf.Facades.Form.GetButtonOptionValues(System.String)" /></returns>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            Console.WriteLine(form.GetButtonOptionCurrentValue("btnField"));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetButtonOptionValues(System.String)">
      <summary>
            Gets the radio button option fields and related values based on the field name.
            This method has meaning for radio button groups.
            </summary>
      <param name="fieldName">Field Name</param>
      <returns>Hash table of option values keyed by form item name</returns>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            Hashtable values = form.GetButtonOptionValues("Color");
            Console.WriteLine(values["White"].ToString());
            Console.WriteLine(values["Black"].ToString());
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetField(System.String)">
      <summary>
            Gets the field's value according to its field name.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <returns>The field's value.</returns>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            Console.WriteLine("Field value = " + form.GetField("Field1"));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetFullFieldName(System.String)">
      <summary>
            Gets the full field name according to its short field name.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <returns>The full field name.</returns>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            Console.WriteLine("Full field name is : " + form.GetFullFieldName("textField"));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetFieldLimit(System.String)">
      <summary>
            Get the limitation of text field.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <returns>Return the limitation number of characters a text field can be filled. It not set, return 0.</returns>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            Console.WriteLine(form.GetFieldLimit("textfieldBox"));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.Save">
      <summary>
            Saves the value of the filled fields and close the opened Pdf document.
            </summary>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf", "PdfForm_Changed.pdf");
            form.FillField("textField", "new value");
            form.Save();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.Save(System.String)">
      <summary>
            Saves document into specified file.
            </summary>
      <param name="destFile">File where document will be saved.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.Save(System.IO.Stream)">
      <summary>
            Saves document into specified stream.
            </summary>
      <param name="destStream">Stream where document will be saved.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.Close">
      <summary>
            Closes opened files without any changes.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FlattenAllFields">
      <summary>
            Flattens all the fields.
            </summary>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            form.FlattenAllFields();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FlattenField(System.String)">
      <summary>
            Flattens a specified field with the fully qualified field name.
            Any other field will remain unchangable. If the fieldName is invalid, 
            all the fields will remain unchangable.
            </summary>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            form.FlattenField("textField");
            </code>
      </example>
      <param name="fieldName">The name of the field to be flattened.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FillBarcodeField(System.String,System.String)">
      <summary>
            Fill a barcode field according to its fully qualified field name.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <param name="data">The new barcode value.</param>
      <returns>If filling succeed, return true; otherwise, false.</returns>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            form.FillBarcodeField("textField", "42207252");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.ImportFdf(System.IO.Stream)">
      <summary>
            Imports the content of the fields from the fdf file and put them into the new pdf.
            </summary>
      <param name="inputFdfStream">The input fdf stream.</param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf", "PdfForm_imported.pdf");
            form.ImportFdf(new FileStream("data.fdf", FileMode.Open, FileAccess.Read));
            form.Save();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.ExportFdf(System.IO.Stream)">
      <summary>
            Exports the content of the fields of the pdf into the fdf stream.
            </summary>
      <param name="outputFdfStream">The output fdf stream.</param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            Stream stream = new FileStream("export.fdf", FileMode.Create, FileAccess.Write);
            form.ExportFdf(stream);
            stream.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.ImportXml(System.IO.Stream)">
      <summary>
            Imports the content of the fields from the xml file and put them into the new pdf.
            </summary>
      <param name="inputXmlStream">Stream from which XML for import is read.</param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf", "Form_Imported.pdf");
            FileStream fs = new FileStream(TestSettings.GetInputFile("import.xml"), FileMode.Open, FileAccess.Read);
            form.ImportXml(fs);
            form.Save();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.ExportXml(System.IO.Stream)">
      <summary>
            Exports the content of the fields of the pdf into the xml stream.
            The button field's value will not be exported.
            </summary>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf"));
            FileStream fs = new FileStream("export.xml", FileMode.Create, FileAccess.Write);
            form.ExportXml(fs);
            fs.Close();
            </code>
      </example>
      <param name="outputXmlStream">Output Xml stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.ExtractXfaData(System.IO.Stream)">
      <summary>
            Extracts XFA data packet
            </summary>
      <param name="outputXmlStream">Stream where XML data will be stored.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.SetXfaData(System.IO.Stream)">
      <summary>
            Replaces XFA data with specified data packet. Data packet may be extracted using ExtractXfaData. 
            </summary>
      <param name="inputXmlStream">Stream where XML is stored.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.ImportXfdf(System.IO.Stream)">
      <summary>
            Imports the content of the fields from the xfdf(xml) file and put them into the new pdf.
            </summary>
      <param name="inputXfdfStream">The input xfdf(xml) stream.</param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf", "Form_ImportXfdf.pdf");
            Stream fs = new FileStream("export_old.xfdf", FileMode.Open, FileAccess.Read);
            form.ImportXfdf(fs);
            fs.Close();
            form.Save();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.ExportXfdf(System.IO.Stream)">
      <summary>
            Exports the content of the fields of the pdf into the xml stream.
            The button field's value will not be exported.
            </summary>
      <param name="outputXfdfStream">The output xml stream.</param>
      <example>
        <code lang="C#">
             Form form = new Form("PdfForm.pdf");
             FileStream fs = new FileStream("export.xfdf", FileMode.Create, FileAccess.Write);
             form.ExportXfdf(fs);
             fs.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FillField(System.String,System.String[])">
      <summary>
            Fill a field with multiple selections.Note: only for AcroForm List Box Field.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <param name="fieldValues">A string array which contains several items to be selected.</param>
      <example>
        <code lang="C#">
            Form form = new Aspose.Pdf.Facades.Form("PdfForm.pdf", "Form_Updated.pdf");
            form.FillField("ListBox1", new String[] { "Three", "One" });
            form.Save();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.RenameField(System.String,System.String)">
      <summary> Renames a field. Either AcroForm field or XFA field is OK.
            </summary>
      <param name="fieldName">the old field name
            </param>
      <param name="newFieldName">the new field name
            </param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf", "PdfFormUpdated.pdf");
            form.RenameField("field", "field1");
            form.Save();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetRichText(System.String)">
      <summary>
            Get a Rich Text field's value, including the formattinf information of every character.
            </summary>
      <param name="fieldName">The fully qualified field name of the Rich Text field.</param>
      <returns>Return a string containing formatting information of the Rich Text field.</returns>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            Console.WriteLine(form.GetRichText("txtDescriptionRTF"));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetSubmitFlags(System.String)">
      <summary>
            Returns the submit button's submission flags
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <returns>Submission flags of the button.</returns>
      <example>
        <code lang="C#">
            Aspose.Pdf.Facades.Form form = new Aspose.Pdf.Facades.Form("PdfForm.pdf");
            System.Console.WriteLine((form.GetSubmitFlags("btnSubmit") | Aspose.Pdf.Facades.SubmitFormFlag.Xfdf )!= 0 ? " XFDF" : " ");
            System.Console.WriteLine((form.GetSubmitFlags("btnSubmit") | Aspose.Pdf.Facades.SubmitFormFlag.Fdf )!= 0 ? " FDF" : " ");
            System.Console.WriteLine((form.GetSubmitFlags("btnSubmit") | Aspose.Pdf.Facades.SubmitFormFlag.Pdf )!= 0 ? " PDF" : " ");        
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor(System.String)">
      <summary>
            Constructor of Form.
            </summary>
      <param name="srcFileName">Source file path.</param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor(System.IO.Stream)">
      <summary>
            Constructor for form.
            </summary>
      <param name="srcStream">source stream.</param>
      <example>
        <code lang="C#">
            Form form = new Form(new FileStream("PdfForm.pdf", FileMode.Open, FileAccess.Read));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor(System.String,System.String)">
      <summary>
            Constructor of Form class.
            Specify same source file name and destination file name to perform incremental update.
            </summary>
      <param name="srcFileName">Path of the source file.</param>
      <param name="destFileName">Path of the destination file.</param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf", "PdfForm_Updated.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor(System.String,System.IO.Stream)">
      <summary>
            Constructor of Form.
            </summary>
      <param name="srcFileName">Source file path.</param>
      <param name="destStream">Destination file path.</param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf", "PdfForm_Updated.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor(System.IO.Stream,System.String)">
      <summary>
            Constructor of Form
            </summary>
      <param name="srcStream">Source stream.</param>
      <param name="destFileName">Destination file path.</param>
      <example>
        <code lang="C#">
            Form form = new Form(new FileStream("PdfForm.pdf", FileMode.Open, FileAccess.Read), "PdfForm_Updated.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetFieldType(System.String)">
      <summary>
            Returns type of field. 
            </summary>
      <param name="fieldName">Field name.</param>
      <returns>Element of FileType enumeration corresponding to field type.</returns>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            if (form.GetFieldType("textField") == FieldType.Text)
            {
               Console.WriteLine("Type of field is text");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.IsRequiredField(System.String)">
      <summary>
            Determines whether field is required or not.
            </summary>
      <param name="fieldName">The name of field.</param>
      <returns>True - the field is required; otherwise, false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.GetFieldFlag(System.String)">
      <summary>
            Returns flags of the field.
            </summary>
      <param name="fieldName">Field name</param>
      <returns>Property flag (ReadOnly/ Required/NoExport</returns>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf");
            if (form.GetFieldFlag("textField") == PropertyFlag.ReadOnly)
            {
               Console.WriteLine("Field is read-only");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FillImageField(System.String,System.String)">
      <summary>
            Pastes an image onto the existing button field as its appearance according to 
            its fully qualified field name.
            </summary>
      <param name="fieldName"> The fully qualified field name of the image button field.</param>
      <param name="imageFileName">The path of the image file, relative and absolute are both ok.</param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf", "PdfForm_filled.pdf");
            form.FillImageField("fieldName", "file.jpg");
            form.Save();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FillImageField(System.String,System.IO.Stream)">
      <summary>
            Overloads function of FillImageField.
            The input is a image stream.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <param name="imageStream">The image's stream.</param>
      <example>
        <code lang="C#">
            Form form = new Form("PdfForm.pdf", "PdfForm_filled.pdf");
            form.FillImageField("fieldName", new FileStream("file.jpg", FileMode.Open, FileAccess.Read));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.Form" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor(Aspose.Pdf.Document,System.String)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.Form" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="destFileName">
            Path of the destination file.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.#ctor(Aspose.Pdf.Document,System.IO.Stream)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.Form" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="destStream">
            Destination stream.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.ImportXml(System.IO.Stream,System.Boolean)">
      <summary>
            Imports the content of the fields from the xml file and put them into the new pdf.
            </summary>
      <param name="inputXmlStream">The input xml stream.</param>
      <param name="IgnoreFormTemplateChanges">If this parameter is true then all changes of the XFA form template will not be saved</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Form.FillField(System.String,System.String,System.Boolean)">
      <summary>
            Fills field with specified value. 
            </summary>
      <param name="fieldName">Name of field</param>
      <param name="value">New value of the field</param>
      <param name="fitFontSize">If true, the font size in the edit boxes will be fitted.</param>
      <returns>true if field was found and successfully filled.</returns>
    </member>
    <member name="T:Aspose.Pdf.Facades.FormattedText">
      <summary>
            Class which represents formatted text. Contains information about text and its color, size, style.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormattedText.TextHeight">
      <summary>
            Gets height of text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormattedText.TextWidth">
      <summary>
            Gets width of text.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor">
      <summary>
            Initializes FormattedText.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text which contained in FormattedText.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,Aspose.Pdf.Facades.FontColor,Aspose.Pdf.Facades.FontStyle,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text content of the string.</param>
      <param name="fontColor">Color of the text.</param>
      <param name="fontStyle">Style of the text.</param>
      <param name="encodingType">Encoding type (value of EncodingType enumeration). </param>
      <param name="embedded">True if the font will be embedded.</param>
      <param name="textSize">Size of the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,Aspose.Pdf.Facades.FontColor,Aspose.Pdf.Facades.FontStyle,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single,System.Single)">
      <summary>
            Initialize FormattedText.
            </summary>
      <param name="text">Text content of the string.</param>
      <param name="fontColor">Color of the text.</param>
      <param name="textFont">Font of the text.</param>
      <param name="textEncoding">Encoding of the text.</param>
      <param name="embedded">True if text will be embedded.</param>
      <param name="textSize">Size of the text.</param>
      <param name="lineSpacing">Additional spacing.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,System.Drawing.Color,Aspose.Pdf.Facades.FontStyle,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text content of the string.</param>
      <param name="color">Color of the text.</param>
      <param name="textFont">Font of the text.</param>
      <param name="textEncoding">Encoding of the text.</param>
      <param name="embedded">True if text will be embedded.</param>
      <param name="textSize">Size of the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,System.Drawing.Color,Aspose.Pdf.Facades.FontStyle,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single,System.Single)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text contents of the string.</param>
      <param name="textColor">Color of the text.</param>
      <param name="textFont">Font of the text.</param>
      <param name="textEncoding">Encoding of the text.</param>
      <param name="embedded">If true font will be embedded.</param>
      <param name="textSize">Size of the text.</param>
      <param name="lineSpacing">Additional spacing.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,Aspose.Pdf.Facades.FontColor,Aspose.Pdf.Facades.FontColor,Aspose.Pdf.Facades.FontStyle,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text content of the string.</param>
      <param name="textColor">Color of the text.</param>
      <param name="backColor">Color of background.</param>
      <param name="textFont">Font of the text.</param>
      <param name="textEncoding">Encoding of the text.</param>
      <param name="embedded">If true font will be embedded.</param>
      <param name="textSize">Size of the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,Aspose.Pdf.Facades.FontColor,Aspose.Pdf.Facades.FontColor,Aspose.Pdf.Facades.FontStyle,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single,System.Single)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text content.</param>
      <param name="textColor">Color of the text.</param>
      <param name="backColor">Color of background.</param>
      <param name="textFont">Font of the text.</param>
      <param name="textEncoding">Encoding of the text.</param>
      <param name="embedded">If true font will be embedded.</param>
      <param name="textSize">Size of the text.</param>
      <param name="lineSpacing">Additional spacing.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,Aspose.Pdf.Facades.FontStyle,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text content of the string.</param>
      <param name="textColor">Color of the text.</param>
      <param name="backColor">Color of background.</param>
      <param name="textFont">Font of the text.</param>
      <param name="encoding">Encoding of the text.</param>
      <param name="embedded">True if font will be embedded.</param>
      <param name="textSize">Size of the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,Aspose.Pdf.Facades.FontStyle,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single,System.Single)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text contents of the string.</param>
      <param name="textColor">Color of the text.</param>
      <param name="backColor">Color of the background.</param>
      <param name="textFont">Font of the text.</param>
      <param name="textEncoding">Encoding of the text.</param>
      <param name="embedded">If true font is embedded.</param>
      <param name="textSize">Size of the text.</param>
      <param name="lineSpacing">Additional spacing.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.String,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text content.</param>
      <param name="textColor">Color of the text.</param>
      <param name="backColor">Color of background.</param>
      <param name="fontName">Font of the text.</param>
      <param name="textEncoding">Encoding of the text.</param>
      <param name="embedded">If true font will be embedded.</param>
      <param name="fontSize">Size of the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text content.</param>
      <param name="textColor">Color of the text.</param>
      <param name="backColor">Color of background.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.AddNewLineText(System.String)">
      <summary>
            Adds a new line to the FormattedText object and sets the newLineText to the next line's text.
            </summary>
      <param name="newLineText">Text of new added line.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.AddNewLineText(System.String,System.Single)">
      <summary>
            Adds a new line to the FormattedText object and sets the newLineText to the next line's text.
            </summary>
      <param name="newLineText">Text of new added line.</param>
      <param name="lineSpacing">Spacing of the line.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormattedText.#ctor(System.String,System.Drawing.Color,System.String,Aspose.Pdf.Facades.EncodingType,System.Boolean,System.Single)">
      <summary>
            Initializes FormattedText.
            </summary>
      <param name="text">Text content.</param>
      <param name="textColor">Color of the text.</param>
      <param name="fontName">Font of the text.</param>
      <param name="textEncoding">Encoding of the text.</param>
      <param name="embedded">If true font will be embedded.</param>
      <param name="fontSize">Size of the text.</param>
    </member>
    <member name="T:Aspose.Pdf.Facades.FormDataConverter">
      <summary>
            Represents a class to convert data from one format to another format.
            It can convert the data in fdf/xml/pdf/xfdf to the OLEDB/OdbcDB.
            It also can convert the data in the OLEDB/OdbcDB to the data in fdf/xml/xfdf.
            It can convert the fdf to the xml with "hard-named" tag.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormDataConverter.Table">
      <summary>
            Gets or sets the middle data container, one DataTable.
            It must be defined before converting data from one format to another format.
            The Columns and TableName of the DataTable should be defined.
            The TableName is the name of the Table in the database.
            Every column's ColumnName is the qualified field name of the pdf. Every column's Caption
            is the column name of table in the database. If the field name is the same as the table column
            name, the Caption need not specified.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormDataConverter.CreateMissingField">
      <summary>
            ConvertToDataTable will create required field if it does not exists in Table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormDataConverter.ReplaceExistingTable">
      <summary>
            ImportIntoDatabase will drop existing table and create new table if this property set to true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormDataConverter.ClearTableBeforeExport">
      <summary>
            ExportFromData will clear table before data export.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormDataConverter.CreateMissingTable">
      <summary>
            ImportIntoDatabase will create table if it does not exists.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormDataConverter.ConvertXmlToFdf(System.IO.Stream,System.IO.Stream)">
      <summary>
            Convert XML  import/export form data file into FDF format.
            </summary>
      <param name="sourceXml">Source stream which contains XML file.</param>
      <param name="destFdf">Destination source where resultant FDF file will be stored.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormDataConverter.ConvertFdfToXml(System.IO.Stream,System.IO.Stream)">
      <summary>
            Convert FDF file into XML.
            </summary>
      <param name="sourceFdf">Stream which contains FDF to convert.</param>
      <param name="destXml">Source where reuslt XML will be placed.</param>
      <example>
        <code lang="C#">
             src = new FileStream("test.fdf", FileMode.Open);
             dest = new FileStream("converted_fdf.xml", FileMode.Create);
             FormDataConverter.ConvertFdfToXml(src, dest);
             src.Close();
             dest.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormDataConverter.ConvertToDataTable(System.IO.Stream[],Aspose.Pdf.Facades.DataType)">
      <summary>
            Convert files of strems into table.
            </summary>
      <param name="sourceStreams">Array of source streams in specified format.</param>
      <param name="sourceType">Format of data in streams. Valid values are: PDF, FDF, XFDF, XML.</param>
      <example>
        <code lang="C#">
            DataTable table = new DataTable();
            table.Columns.Add("radiobuttonField");
            table.Columns.Add("textField");
            table.Columns.Add("checkboxField");
            table.Columns.Add("listboxField");
            table.Columns.Add("comboboxField");
            FormDataConverter fc = new FormDataConverter();
            Stream stream = new FileStream("PdfWithAcroForm.pdf", FileMode.Open);
            fc.Table = table;
            fc.ConvertToDataTable(new Stream[] { stream }, DataType.PDF);
            stream.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormDataConverter.ImportIntoDataBase(System.String,Aspose.Pdf.Facades.DataType)">
      <summary>
            Imports data from table into database.
            </summary>
      <param name="connectString">Connection string of database.</param>
      <param name="dbType">Type of database connection: OLEDB or ODBC.</param>
      <example>
        <code lang="C#">
             FormDataConverter fc = new FormDataConverter();
             DataTable table = new DataTable();
             table.TableName = "test";
             table.Columns.Add("TEXT_VALUE");
             table.Columns.Add("INT_VALUE");
             fc.Table = table;
             DataRow row = table.NewRow();
             row["TEXT_VALUE"] = "AAA";
             row["INT_VALUE"] = "123";
             table.Rows.Add(row);
             string connection = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=ConverterDatabase.mdb";
             fc.ImportIntoDataBase(connection, DataType.OLEDB);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormDataConverter.ExportFromDataBase(System.String,Aspose.Pdf.Facades.DataType)">
      <summary>
            Exports data from database into table.
            </summary>
      <param name="connectString">Connection string for database.</param>
      <param name="dbType">Connection type: OLEDB or ODBC.</param>
      <example>
        <code lang="C#">
            FormDataConverter fc = new FormDataConverter();
            string connection = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=ConverterDatabase.mdb";
            DataTable table = new DataTable();
            table.TableName = "TestSource";
            table.Columns.Add("TEXT_VALUE");
            table.Columns.Add("INT_VALUE");
            fc.Table = table;
            fc.ExportFromDataBase(connection, DataType.OLEDB);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormDataConverter.ConvertToStreams(System.IO.Stream[],Aspose.Pdf.Facades.DataType)">
      <summary>
            Convert data in table into streams.
            </summary>
      <param name="destStream">Streams where data will be stored.</param>
      <param name="destType">Type of stored data. Valid values are: XML, FDF, XFDF.</param>
      <example>
        <code lang="C#">
             DataTable table = new DataTable();
             table.Columns.Add("radiobuttonField");
             table.Columns.Add("textField");
             table.Columns.Add("checkboxField");
             table.Columns.Add("listboxField");
             table.Columns.Add("comboboxField");
             DataRow newrow = table.NewRow();
             newrow["textField"] = "NEW DATA";
             newrow["listboxField"] = "Item1";
             newrow["comboboxField"] = "Item1";
             newrow["checkboxField"] = "true";
             newrow["radiobuttonField"] = "true";
             table.Rows.Add(newrow);
             fc.Table = table;
             fc.ConvertToStreams(new Stream[] { stream }, DataType.XML);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormDataConverter.ConverToStreams(System.IO.Stream[],Aspose.Pdf.Facades.DataType)">
      <summary>
            This method is obsolete. Please use ConvertToStreams() instead.
            </summary>
      <param name="destStream">Destination stream object.</param>
      <param name="destType">Destination type value.</param>
    </member>
    <member name="T:Aspose.Pdf.Facades.FormEditor">
      <summary>
            Class for editing forms (ading/deleting field etc)
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.SrcFileName">
      <summary>
            Gets or sets name of source file.
            </summary>
      <example>
        <code lang="C#">
            FormEditor editor = new FormEditor();
            editor.SrcFileName = "InputFile.pdf";
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.DestFileName">
      <summary>
            Gets or sets destination file name.
            </summary>
      <example>
        <code lang="C#">
            FormEditor editor = new FormEditor();
            editor.DestFileName = "OutFile.pdf";
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.SrcStream">
      <summary>
            Gets or sets source stream.
            </summary>
      <example>
        <code lang="C#">
            FormEditor editor = new FormEditor();
            editor.SrcStream = new FileStream("InFile.pdf", FileMode.Open, FileAccess.Read);
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.ConvertTo">
      <summary>
            Sets PDF file format. Result file will be saved in specified file format. 
            If this property is not specified then file will be save in default PDF format without conversion.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.DestStream">
      <summary>
            Gets or sets destination stream.
            </summary>
      <example>
        <code lang="C#">
            FormEditor editor = new FormEditor();
            editor.DestStream = new FileStream("OutFile.pdf", FileMode.Create, FileAccess.Write);
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.Items">
      <summary>
            Sets items which will be added t onewly created list box or combo box. 
            <example><code lang="C#">
             formEditor = new Aspose.Pdf.Facades.FormEditor("input.pdf", "output.pdf");
             formEditor.Items = new string[] { "AAA", "BBB", "CCC" };
             formEditor.AddField(FieldType.ListBox, "AddedListBoxField", "BBB", 1, 10, 30, 110, 130);
             formEditor.Save();
            </code></example></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.ExportItems">
      <summary> Sets options for combo box with export values.</summary>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_Updated.pdf"));
            formEditor.ExportItems = new string[][] 
            { 
                new string[] { "1", "Firs" }, 
                new string[] { "2", "Second" }, 
                new string[] { "3", "Third" } 
            };
            formEditor.AddField(FieldType.ListBox, "AddedListBoxField", "Second", 1, 10, 30, 110, 130);
            formEditor.Save();
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.Facade">
      <summary>
            Sets visual attributes of the field.
            </summary>
      <example>
        <code lang="C#">
            FormEditor fe = new FormEditor("PdfForm.pdf", "PdfForm_DecorateField_text.pdf");
            fe.Facade = new FormFieldFacade();
            fe.Facade.BackgroundColor = System.Drawing.Color.Red;
            fe.Facade.TextColor = System.Drawing.Color.Blue;
            fe.Facade.BorderColor = System.Drawing.Color.Green;
            fe.Facade.Alignment = FormFieldFacade.AlignCenter;
            fe.DecorateField("textField");
            fe.Save();
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.RadioGap">
      <summary>
            The member to record the gap between two neighboring radio buttons in pixels,default is 50.
            </summary>
      <example>
        <code lang="C#">
            formEditor = new Aspose.Pdf.Facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_RadioButton.pdf");
            formEditor.RadioGap = 4;
            formEditor.RadioHoriz = false;
            formEditor.Items = new string[] { "First", "Second", "Third" };
            formEditor.AddField(FieldType.Radio, "AddedRadioButtonField", "Second", 1, 10, 30, 110, 130);
            formEditor.Save();
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.RadioHoriz">
      <summary>
            The flag to indicate whether the radios are arranged horizontally or vertically, default value is true.
            </summary>
      <example>
        <code lang="C#">
            formEditor = new Aspose.Pdf.Facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_RadioButton.pdf");
            formEditor.RadioGap = 4;
            formEditor.RadioHoriz = false;
            formEditor.Items = new string[] { "First", "Second", "Third" };
            formEditor.AddField(FieldType.Radio, "AddedRadioButtonField", "Second", 1, 10, 30, 110, 130);
            formEditor.Save();
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.RadioButtonItemSize">
      <summary>
            Gets or sets size of radio button item size (when new radio button field is added). 
            <code lang="C#">
            formEditor = new Aspose.Pdf.Facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_RadioButton.pdf");
            formEditor.RadioGap = 4;
            formEditor.RadioHoriz = false;
            formEditor.RadioButtonItemSize = 20;
            formEditor.Items = new string[] { "First", "Second", "Third" };
            formEditor.AddField(FieldType.Radio, "AddedRadioButtonField", "Second", 1, 10, 30, 110, 130);
            formEditor.Save();
            </code></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormEditor.SubmitFlag">
      <summary>
            Set the submit button's submission flags
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
            Constructor for FormEditor.
            </summary>
      <param name="srcStream">Source stream.</param>
      <param name="destStream">Destination stream.</param>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor(
              new FileStream(new FileStream("InFile.pdf", FileMode.Open, FileAccess.Read), 
              new FileStream("OutFile.pdf", FileMode.Create, FileAccess.Write));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.#ctor(System.String,System.String)">
      <summary>
            Constructor for FormEditor 
            </summary>
      <param name="srcFileName">Name of source file.</param>
      <param name="destFileName">Name of destination file.</param>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("InFile.pdf", "OutFile.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.#ctor">
      <summary>
            Constructor for FormEditor.
            </summary>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.Save">
      <summary>
            Saves changes into destination file.
            </summary>
            FormEditor formEditor = new FormEditor("InFile.pdf", "OutFile.pdf");
            //make some changes... 
            formEditor.Save();
        </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.SetFieldAttribute(System.String,Aspose.Pdf.Facades.PropertyFlag)">
      <summary>
            Set attributes of field. 
            </summary>
      <param name="fieldName">Name of field which attributes should be set.</param>
      <param name="flag">Flag (NoExport/ReadOnly/Required)</param>
      <returns>true if attribute was set successfully.</returns>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf",  "PdfForm_SetFieldAttribute.pdf");
            formEditor.SetFieldAttribute("listboxField", PropertyFlag.ReadOnly);
            formEditor.SetFieldAttribute("textField", PropertyFlag.NoExport);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.SetFieldAppearance(System.String,Aspose.Pdf.Annotations.AnnotationFlags)">
      <summary>
            Set field flags
            </summary>
      <param name="fieldName">Name of field whose flags should be updated.</param>
      <param name="flags">Flag of the field.</param>
      <returns>true if flags were updated successfully.</returns>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm1.pdf", "FormEditor_SetFieldAppearance.pdf");
            formEditor.SetFieldAppearance("Name", AnnotationFlags.Hidden);
            formEditor.SetFieldAppearance("Phone", AnnotationFlags.NoView | AnnotationFlags.Print);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.GetFieldAppearance(System.String)">
      <summary>
            Get field flags. 
            </summary>
      <param name="fieldName">Name of the field.</param>
      <returns>Set of field flags</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.SetSubmitFlag(System.String,Aspose.Pdf.Facades.SubmitFormFlag)">
      <summary>
            Set submit flag of submit button. 
            </summary>
      <param name="fieldName">Name of submit button.</param>
      <param name="submitFormFlag">Submit flag.</param>
      <returns>true if field was found and submit flag was successfully set. </returns>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_SetSubmitFlag.pdf");
            formEditor.SetSubmitFlag("btnSubmit", SubmitFormFlag.Fdf);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.SetSubmitUrl(System.String,System.String)">
      <summary>
            Sets URL of the button.
            </summary>
      <param name="fieldName">Submit button name.</param>
      <param name="url">Fully qualified URL.</param>
      <returns>true if URL for button was successfully set.</returns>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_SetSubmitUrl.pdf");
            formEditor.SetSubmitUrl("btnSubmit", "www.mysite.com");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.SetFieldLimit(System.String,System.Int32)">
      <summary>
            Sets maximum character count of the text field.
            </summary>
      <param name="fieldName">Name of the text field.</param>
      <param name="fieldLimit">New value of limit for the field.</param>
      <returns>true if field limit was successfully set.</returns>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_SetFieldLimit.pdf");
            formEditor.SetFieldLimit("textField", 15);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.SetFieldCombNumber(System.String,System.Int32)">
      <summary>
            Sets number of combs for a regular single-line text field (the field is 
            automatically divided into as many equally spaced positions, or combs, 
            as the value of combNumber parameter).
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <param name="combNumber">The number of combs to divide the field into.</param>
      <returns>If success, return true;else false.</returns>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfWithAcroForm.pdf", "FormEditor_SetFieldComb.pdf"));
            formEditor.SetFieldCombNumber("textCombField", 5);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.MoveField(System.String,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Set new position of field.
            </summary>
      <param name="fieldName">Name of field which must be moved.</param>
      <param name="llx">Abscissa of the lower-left corner of the field.</param>
      <param name="lly">Ordinate of the lower-left coerner of the field.</param>
      <param name="urx">Abscissa of the upper-right corner of the field.</param>
      <param name="ury">Ordinate of the upper-right corner of the field.</param>
      <returns>true if field position was changed successfully.</returns>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_MoveField.pdf");
            formEditor.MoveField("textField", 20.5f, 20.3f, 120.6f, 40.8f);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.AddField(Aspose.Pdf.Facades.FieldType,System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Add field of specified type to the form.
            </summary>
      <param name="fieldType">Type of the field which must be added.</param>
      <param name="fieldName">Name of the field whic must be added.</param>
      <param name="pageNum">Page number where new field must be placed.</param>
      <param name="llx">Abscissa of the lower-left corner of the field.</param>
      <param name="lly">Ordinate of the lower-left corner of the field.</param>
      <param name="urx">Abscissa of the upper-right corner of the field.</param>
      <param name="ury">Ordinate of the upper-right corner of the field.</param>
      <returns>true if field was successfully added.</returns>
      <example>
        <code lang="C#">
            FormEditor formEditor = new Aspose.Pdf.Facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_Text.pdf");
            formEditor.AddField(FieldType.Text, "AddedTextField",  1, 10, 30, 110, 46);
            formEditor.Save();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.AddField(Aspose.Pdf.Facades.FieldType,System.String,System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Add field of specified type to the form.
            </summary>
      <param name="fieldType">Type of the field which must be added.</param>
      <param name="fieldName">Name of the field whic must be added.</param>
      <param name="initValue">Initial value of the field.</param>
      <param name="pageNum">Page number where new field must be placed.</param>
      <param name="llx">Abscissa of the lower-left corner of the field.</param>
      <param name="lly">Ordinate of the lower-left corner of the field.</param>
      <param name="urx">Abscissa of the upper-right corner of the field.</param>
      <param name="ury">Ordinate of the upper-right corner of the field.</param>
      <returns>true if field was successfully added.</returns>
            /// <example><code lang="C#">
            FormEditor formEditor = new Aspose.Pdf.Facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_Text.pdf");
            formEditor.AddField(FieldType.Text, "AddedTextField", "Text Value", 1, 10, 30, 110, 46);
            formEditor.Items = new string[] { "Item1", "Item2", Item3" };
            formEditor.AddField(FieldType.Radio, "RadioButtonField", 1, 265, 695, 365, 720);
            formEditor.Save();
            </code></example></member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.RemoveField(System.String)">
      <summary>
            Remove field from the form.
            </summary>
      <param name="fieldName">Name of the field which must be removed.</param>
      <example>
        <code lang="C#">
            FormEditr formEditor = new FormEditor("PdfForm.pdf", "FormEditor_RemoveField.pdf");
            formEditor.RemoveField("listboxField");
            formEditor.RemoveField("textField");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.ResetFacade">
      <summary>
            Reset all visual attribtues to empty value.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.ResetInnerFacade">
      <summary>
            Reset all visual attribtues of inner facade to empty value.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.CopyInnerField(System.String,System.String,System.Int32)">
      <summary>
            Copies an existing field to the same position in specified page number.
            A new document will be produced, which contains everything the source document has except for the newly copied field.
            </summary>
      <param name="fieldName">The old fully qualified field name.</param>
      <param name="newFieldName">The new fully qualified field name. If null, it will be set as fieldName + "~".</param>
      <param name="pageNum">The number of page to hold the new field. If -1, new field will be copid to the same page as old one hosted.</param>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_out.pdf");
            //Creates copy of text field on psecond page.
            formEditor.CopyInnerField("textField", "textFieldCopy", 2);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.CopyInnerField(System.String,System.String,System.Int32,System.Single,System.Single)">
      <summary>
            Copies an existing field to a new position specified by both page number and ordinates.
            A new document will be produced, which contains everything the source document has except for the newly copied field.
            </summary>
      <param name="fieldName">The old fully qualified field name.</param>
      <param name="newFieldName">The new fully qualified field name. If null, it will be set as fieldName + "~".</param>
      <param name="pageNum">The number of page to hold the new field. If -1, new field will be copid to the same page as old one hosted.</param>
      <param name="abscissa">The abscissa of the new field. If -1, the abscissa will be equaled to the original one.</param>
      <param name="ordinate">The ordinate of the new field. If -1, the ordinate will be equaled to the original one.</param>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_out.pdf");
            //Creates copy of text field on psecond page.
            formEditor.CopyInnerField("textField", "textFieldCopy", 2, 100, 200);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.CopyOuterField(System.String,System.String)">
      <summary>
            Copies an existing field from one PDF document to another document with original page number and ordinates.
            Notice: Only for AcroForm fields (excluding radio box).
            </summary>
      <param name="srcFileName"> The name of PDF document which containes the field to be copied.</param>
      <param name="fieldName">The original fully qualified field name.</param>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_updated.pdf");
            //copies text field from source.pdf to PdfForm.pdf
            formEditor.CopyOuterField("source.pdf", "textField");
            formEditor.Save();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.CopyOuterField(System.String,System.String,System.Int32)">
      <summary>
             Copies an existing field from one PDF document to another document with specified page number and original ordinates.
             Notice: Only for AcroForm fields (excluding radio box).
             </summary>
      <param name="srcFileName">The name of PDF document which containes the field to be copied.</param>
      <param name="fieldName">The original fully qualified field name.</param>
      <param name="pageNum">The number of page to hold the new field. If -1, new field will be copid to the same page as old one hosted.</param>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_updated.pdf");
            formEditor.CopyOuterField("source.pdf", "textField", 2);
            formEditor.Save();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.CopyOuterField(System.String,System.String,System.Int32,System.Single,System.Single)">
      <summary>
            Copies an existing field from one PDF document to another document with specified page number and ordinates.
            Notice: Only for AcroForm fields (excluding radio box).
            </summary>
      <param name="srcFileName">The name of PDF document which containes the field to be copied.</param>
      <param name="fieldName">The original fully qualified field name.</param>
      <param name="pageNum">The number of page to hold the new field. If -1, new field will be copid to the same page as old one hosted.</param>
      <param name="abscissa">The abscissa of the new field. If -1, the abscissa will be equaled to the original one.</param>
      <param name="ordinate">The ordinate of the new field. If -1, the ordinate will be equaled to the original one.</param>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_updated.pdf");
            formEditor.CopyOuterField("source.pdf", "textField" , 2, 100, 200);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.DecorateField(System.String)">
      <summary>
            Changes visual attributes of the specified field.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <example>
        <code lang="C#">
            FormEditor fe = new FormEditor("PdfWithAcroForm.pdf", "FormEditor_DecorateField_text.pdf");
            fe.Facade = new FormFieldFacade();
            fe.Facade.BackgroundColor = System.Drawing.Color.Red;
            fe.Facade.TextColor = System.Drawing.Color.Blue;
            fe.Facade.BorderColor = System.Drawing.Color.Green;
            fe.Facade.Alignment = FormFieldFacade.AlignCenter;
            fe.DecorateField("textField");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.DecorateField(Aspose.Pdf.Facades.FieldType)">
      <summary>
            Changes visual attributes of all fields with the specified field type.
            </summary>
      <param name="fieldType">Type of fields which will be decorated.</param>
      <example>
        <code lang="C#">
            FormEditor fe = new FormEditor("PdfForm.pdf", "FormEditor_DecorateField.pdf");
            fe.Facade = new FormFieldFacade();
            fe.Facade.BackgroundColor = System.Drawing.Color.Red;
            fe.Facade.TextColor = System.Drawing.Color.Blue;
            fe.Facade.BorderColor = System.Drawing.Color.Green;
            fe.Facade.Alignment = FormFieldFacade.AlignRight;
            //decorate all text fields.
            fe.DecorateField(FieldType.Text);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.DecorateField">
      <summary>
            Changes visual attributes of all fields in the PDF document.
            </summary>
      <example>
        <code lang="C#">
            FormEditor fe = new FormEditor("PdfForm.pdf", "FormEditor_DecorateField.pdf");
            fe.Facade = new FormFieldFacade();
            fe.Facade.BackgroundColor = System.Drawing.Color.Red;
            fe.Facade.TextColor = System.Drawing.Color.Blue;
            fe.Facade.BorderColor = System.Drawing.Color.Green;
            fe.Facade.Alignment = FormFieldFacade.AlignRight;
            //decorate all fields.
            fe.DecorateField();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.RenameField(System.String,System.String)">
      <summary>
            Change name of the field.
            </summary>
      <param name="fieldName">Old name of the field.</param>
      <param name="newFieldName">New name of the field.</param>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_updated.pdf");
            formEditor.RenameField("textField", "textField_Renamed");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.RemoveFieldAction(System.String)">
      <summary>
            Remove submit action of the field.
            </summary>
      <param name="fieldName">Name of the field.</param>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_RemoveFieldAction.pdf");
            formEditor.RemoveFieldAction("btnSubmit");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.AddSubmitBtn(System.String,System.Int32,System.String,System.String,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Add submit button on the form.
            </summary>
      <param name="fieldName">Name of new button. </param>
      <param name="page">Page where button will be placed.</param>
      <param name="label">Button caption.</param>
      <param name="url">URL of the submit button.</param>
      <param name="llx">Abscissa of the lower-left corner.</param>
      <param name="lly">Ordinate of the lower-left corner.</param>
      <param name="urx">Abscissa of the upper-right corner.</param>
      <param name="ury">Ordinate of the upper-right corner.</param>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_AddSubmitBtn.pdf");
            formEditor.AddSubmitBtn("submit", 1, "Submit", "www.check.com", 10, 200, 70, 270);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.AddListItem(System.String,System.String)">
      <summary>
            Adds new item to the list box. 
            </summary>
      <param name="fieldName">Name of the field ot which new item will be added.</param>
      <param name="itemName">Name if new item.</param>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", PdfForm_out.pdf");
            formEditor.AddListItem("listBoxField", "Item 4 (New Item)");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.AddListItem(System.String,System.String[])">
      <summary>
            Add a new item with Export value to the existing list box field, only for AcroForm combo box field.
            </summary>
      <param name="fieldName">Name of field to which items will be added.</param>
      <param name="exportName">A string array denoting a new list item with Export Value, i.e. (Item Label, Export Value).</param>
      <example>
        <code lang="C#">
             FormEditor fe = new FormEditor("PdfForm.pdf", "FormEditor_AddListItem2.pdf");
             fe.AddListItem("listboxField", new string[] { "4", "Item4(Added)" });
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.DelListItem(System.String,System.String)">
      <summary>
            Delete item from the list field.
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="itemName">Name of the item which must be deleted.</param>
      <example>
        <code lang="C#">
            formEditor = new Aspose.Pdf.Facades.FormEditor("PdfForm.pdf", "FormEditor_DelListItem.pdf");
            formEditor.DelListItem("listboxField", "item2");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.SetFieldScript(System.String,System.String)">
      <summary>
            Set JavaScript for a PushButton field. If old JavaScript existed, it will be replaced by the new one.
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <param name="script">The Java script to be added/placed into a push button field.</param>
      <returns>true if field scrip was successfully set. </returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.AddFieldScript(System.String,System.String)">
      <summary>
            Add JavaScript for a PushButton field. If old event exists, new event is added after it. 
            </summary>
      <param name="fieldName">The fully qualified field name.</param>
      <param name="script">The Java script to be added/placed into a push button field.</param>
      <returns>True in case script was added successfully.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.Single2Multiple(System.String)">
      <summary>
            Change a single-lined text field to a multiple-lined one.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <returns>If success, return true;else false.</returns>
      <example>
        <code lang="C#">
            FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_updated.pdf");
            formEditor.Single2Multiple("textField");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.SetFieldAlignment(System.String,System.Int32)">
      <summary>
            Set the alignment style of a text field.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <param name="alignment">The alignment style definition, including FormFieldFacade.AlignLeft,
            FormFieldFacade.AlignCenter and FormFieldFacade.AlignRight.</param>
      <returns>true if true if field was found and alignment was set.</returns>
      <example>
        <code lang="C#">
             FormEditor fe = new FormEditor("PdfStaticForm.pdf", "VerticalAlign.pdf");
             fe.SetFieldAlignment("form1[0].TextField[0]", FormFieldFacade.AlignLeft);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.SetFieldAlignmentV(System.String,System.Int32)">
      <summary>
            Set the vertical alignment style of a text field.
            </summary>
      <param name="fieldName">The qualified field name.</param>
      <param name="alignment">The alignment style definition, including FormFieldFacade.AlignTop,
            FormFieldFacade.AlignMiddle and FormFieldFacade.AlignRight.</param>
      <returns>true if field was found and alignment was successfully filled.</returns>
      <example>
        <code lang="C#">
             FormEditor fe = new FormEditor("PdfStaticForm.pdf", "VerticalAlign.pdf");
             fe.SetFieldAlignmentV("form1[0].TextField[0]", FormFieldFacade.AlignBottom);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.FormEditor" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">Pdf document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.#ctor(Aspose.Pdf.Document,System.String)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.FormEditor" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="destFileName">Path of the destination file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.#ctor(Aspose.Pdf.Document,System.IO.Stream)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.FormEditor" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="destStream">Destination stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormEditor.Close">
      <summary>
            Closes the facade.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.FormFieldFacade">
      <summary>
            Class for representing field properties.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.BorderColor">
      <summary>
            The color of a field border. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.BorderStyle">
      <summary>
            The style of a field border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.BorderWidth">
      <summary>
            The width of a field border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.Font">
      <summary>
            The font type of a field text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.CustomFont">
      <summary>
            Gets or sets name of the font when this is non-standart (other then 14 standard fonts).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.FontSize">
      <summary>
            The size of a field text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.TextColor">
      <summary>
            The color of the field text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.TextEncoding">
      <summary>
            The text encoding type of the field text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.Alignment">
      <summary>
            The alignment of a field text, default is left alignment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.Rotation">
      <summary>
            The rotation of a field text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.Caption">
      <summary>
            The normal caption of form field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.ButtonStyle">
      <summary>
            The style of check box or radio box field, defined by FormFieldFacade.CheckBoxStyle*.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.Box">
      <summary>
            A rectangle object holding field's location.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.Position">
      <summary>
            A rectangle object holding field's location.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.PageNumber">
      <summary>
            An integer value holding the number of page on which field locates.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.Items">
      <summary>
            An array of string, each representing an option of a combo box/list/radio box field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.ExportItems">
      <summary> The options for adding a list/combo/radio box</summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.BackgroundColor">
      <summary>
            The color of a field background, default is white.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.FormFieldFacade.Reset">
      <summary>
            Reset all visual attribtues to empty value.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderWidthUndified">
      <summary>
            Undefined border width.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderWidthUndefined">
      <summary>
            Undefined border width.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderWidthThin">
      <summary>
            Defines a thin border width.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderWidthMedium">
      <summary>
            Defines a medium border width.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderWidthThick">
      <summary>
            Defines a thick border width.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderStyleSolid">
      <summary>
            Defines a solid border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderStyleDashed">
      <summary>
            Defines a dashed border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderStyleBeveled">
      <summary>
            Defines a beveled border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderStyleInset">
      <summary>
            Defines an inseted border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderStyleUnderline">
      <summary>
            Defines an underlined border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.BorderStyleUndefined">
      <summary>
            Undefined border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.AlignLeft">
      <summary>
            Defines aglignment to left style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.AlignCenter">
      <summary>
            Defines aglignment to center style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.AlignRight">
      <summary>
            Defines aglignment to right style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.AlignUndefined">
      <summary>
            Undefined aglignment style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.AlignJustified">
      <summary>
            Defines text justification alignment style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.AlignTop">
      <summary>
            Defines vertical aglignment as top style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.AlignMiddle">
      <summary>
            Defines vertical aglignment as middle style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.AlignBottom">
      <summary>
            Defines vertical aglignment as bottom style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.CheckBoxStyleCircle">
      <summary>
            Defines a circle check box style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.CheckBoxStyleCheck">
      <summary>
            Defines the shape of a check box field when it checked.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.CheckBoxStyleCross">
      <summary>
            Defines a cross check box style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.CheckBoxStyleDiamond">
      <summary>
            Defines a diamond check box style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.CheckBoxStyleStar">
      <summary>
            Defines a star check box style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.CheckBoxStyleSquare">
      <summary>
            Defines a square check box style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.FormFieldFacade.CheckBoxStyleUndefined">
      <summary>
            Defines an undefined check box style.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.FormFieldFacade.BackgroudColor">
      <summary>
            Obsolete property. Use BackgroundColor.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.KeySize">
      <summary>
            Defines different key sizes which can be used to encrypt pdf documents.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.KeySize.x40">
      <summary>
            40 bit key. Such key size is used with RC4 algorithm and provides low level of security. 
            Nevertheless old versions of pdf documents can be encrypted only with such keys (v. 1.3 and lower);
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.KeySize.x128">
      <summary>
            128 bit key. Both RC4 and AES algorithms can use such key size.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.KeySize.x256">
      <summary>
            256 bit key. Such key size can be used only with AES and is recognized with the last Adobe Reader versions (starting from v.9).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.LineInfo">
      <summary>
            Represents the information of line. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.LineInfo.VerticeCoordinate">
      <summary>
            Gets or sets an array of numbers representing the alternating horizontal and vertical,coordinates, respectively, of each vertex.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.LineInfo.LineColor">
      <summary>
            Gets or sets the color of a line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.LineInfo.LineWidth">
      <summary>
            Gets or sets the width of a line. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.LineInfo.Visibility">
      <summary>
            Gets or sets the visibility of a line. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.LineInfo.LineDashPattern">
      <summary>
            Gets or sets the dash pattern of a line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.LineInfo.BorderStyle">
      <summary>
            Gets or sets the border style of a line, 0 represents solid, 1 represents dashed, 2 represents beleved, 3 represents insert, 4 represents underline.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfAnnotationEditor">
      <summary> 
            Represents a class for work with PDF document annotations (comments).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ImportAnnotationFromXfdf(System.String)">
      <summary>
            Imports all annotations from XFDF file.
            </summary>
      <param name="xfdfFile">The input XFDF file.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            editor.ImportAnnotationFromXfdf("annots.xfdf");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ImportAnnotationFromXfdf(System.String,System.Enum[])">
      <summary>
            Imports the specified annotations from XFDF file.
            </summary>
      <param name="xfdfFile">The input XFDF file.</param>
      <param name="annotType">The annotations array to be imported.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            Enum[] annotTypes = {AnnotationType.Highlight, AnnotationType.Text};
            editor.ImportAnnotationFromXfdf("annots.xfdf", annotTypes);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ImportAnnotationFromXfdf(System.IO.Stream,System.Enum[])">
      <summary>
            Imports the specified annotations from XFDF data stream.
            </summary>
      <param name="xfdfStream">The input XFDF data stream.</param>
      <param name="annotType">The array of annotation types to be imported.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            Enum[] annotTypes ={ AnnotationType.Highlight, AnnotationType.Line };
            editor.ImportAnnotationFromXfdf(File.OpenRead("annots.xfdf"), annotTypes);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ImportAnnotationFromXfdf(System.IO.Stream)">
      <summary>
            Imports all annotations from XFDF data stream.
            </summary>
      <param name="xfdfStream">The input XFDF data stream.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            editor.ImportAnnotationFromXfdf(File.OpenRead("annots.xfdf"));
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ImportAnnotations(System.String[],System.Enum[])">
      <summary>
            Imports the specified annotations into document from array of another PDF documents.
            </summary>
      <param name="annotFile">The array of paths of PDF documents that contain source annotations.</param>
      <param name="annotType">The array of annotation types to be imported.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            string[] paths = new string[2] {"with_annots1.pdf", "with_annots2.pdf"};
            Enum[] annotTypes = {AnnotationType.Highlight, AnnotationType.Text};
            editor.ImportAnnotations(paths, annotTypes);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ImportAnnotations(System.String[])">
      <summary>
            Imports annotations into document from array of another PDF documents.
            </summary>
      <param name="annotFile">The array of paths of PDF documents that contain source annotations.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            string[] paths = new string[2] {"with_annots1.pdf", "with_annots2.pdf"};
            editor.ImportAnnotations(paths);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ImportAnnotations(System.IO.Stream[],System.Enum[])">
      <summary>
            Imports the specified annotations into document from array of another PDF document streams.
            </summary>
      <param name="annotFileStream">The array of streams of PDF documents that contain source annotations.</param>
      <param name="annotType">The annotation types to be imported.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            Stream[] streams = new FileStream[2];
            stream[0]= File.OpenRead("with_annots1.pdf");
            stream[1]= File.OpenRead("with_annots2.pdf");
            Enum[] annotTypes = {AnnotationType.Highlight, AnnotationType.Text};
            editor.ImportAnnotations(streams, annotTypes);
            editor.Save("example_out.pdf");
            stream[0].Close();
            stream[1].Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ImportAnnotations(System.IO.Stream[])">
      <summary>
            Imports annotations into document from array of another PDF document streams.
            </summary>
      <param name="annotFileStream">The array of streams of PDF documents that contain source annotations.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            Stream[] streams = new FileStream[2];
            streams[0]= File.OpenRead("with_annots1.pdf");
            streams[1]= File.OpenRead("with_annots2.pdf");
            editor.ImportAnnotations(streams);
            editor.Save("example_out.pdf");
            streams[0].Close();
            streams[1].Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ModifyAnnotations(System.Int32,System.Int32,System.Enum,Aspose.Pdf.Annotations.Annotation)">
      <summary>
            Modifies the annotations of the specifed type on the specified page range.
            It supports to modify next annotation properties: Modified, Title, Contents, Color, Subject and Open.
            </summary>
      <param name="start">The start page number.</param>
      <param name="end">The end page number.</param>
      <param name="annotType">The annotation type.</param>
      <param name="annotation">The annotation object contains new properties.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            TextAnnotation annot = new TextAnnotation();
            annot.Modified = DateTime.Now;
            annot.Title = "NEW AUTHOR";
            annot.Contents = "NEW CONTENTS";
            annot.Color = Color.Red;
            annot.Subject = "NEW SUBJECT";
            annot.Open = true;
            editor.ModifyAnnotations(1, 2, AnnotationType.Text, annot);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ModifyAnnotationsAuthor(System.Int32,System.Int32,System.String,System.String)">
      <summary>
            Modifies the author of annotations on the specified page range.
            </summary>
      <param name="start">The start page number.</param>
      <param name="end">The end page number.</param>
      <param name="srcAuthor">The author that must be modified.</param>
      <param name="desAuthor">The new author.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            editor.ModifyAnnotationsAuthor(1, 2, "PREV AUTHOR", "NEW AUTHOR");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.FlatteningAnnotations">
      <summary>
            Flattens all annotations in the document.
            </summary>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            editor.FlatteningAnnotations();
            editor.Save(example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.FlatteningAnnotations(System.Int32,System.Int32,System.Enum[])">
      <summary>
            Flattens the annotations of the specified types.
            </summary>
      <param name="start">The start page.</param>
      <param name="end">Then end page.</param>
      <param name="annotType">The annotation types should be flattened.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            Enum[] annotTypes ={AnnotationType.Line, AnnotationType.FreeText};
            editor.FlatteningAnnotations(1, 2, annotTypes);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.DeleteAnnotations">
      <summary>
            Deletes all annotations in the document.
            </summary>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            editor.DeleteAnnotations();
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.DeleteAnnotations(System.String)">
      <summary>
            Deletes all annotations of the specified type in the document.
            </summary>
      <param name="annotType">The type of annotation will be deleted.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            editor.DeleteAnnotations("Text");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.DeleteAnnotation(System.String)">
      <summary>
            Deletes the annotation with specified annotation name.
            </summary>
      <param name="annotName">The annotation name</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            editor.DeleteAnnotation("4cfa69cd-9bff-49e0-9005-e22a77cebf38");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ExportAnnotationsXfdf(System.IO.Stream,System.Int32,System.Int32,System.String[])">
      <summary>
            Exports the content of the specified annotation types into XFDF
            </summary>
      <param name="xmlOutputStream">The output XFDF stream.</param>
      <param name="start">Start page from which the annotations of the document will be exported.</param>
      <param name="end">End page to which the annotations of the document will be exported.</param>
      <param name="annotTypes">The array of annotation types need be exported.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            string[] annotTypes = new string[] {"Text", "Highlight"};
            using (Stream stream = File.Create("example.xfdf"))
            {
                editor.ExportAnnotationsXfdf(stream, 1, 2, annotTypes);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ExportAnnotationsXfdf(System.IO.Stream,System.Int32,System.Int32,System.Enum[])">
      <summary>
            Exports the content of the specified annotation types into XFDF
            </summary>
      <param name="xmlOutputStream">The output XFDF stream.</param>
      <param name="start">Start page from which the annotations of the document will be exported.</param>
      <param name="end">End page to which the annotations of the document will be exported.</param>
      <param name="annotTypes">The array of annotation types need be exported.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            Enum[] annotTypes = new Enum[] {AnnotationType.Text, AnnotationType.Highlight};
            using (Stream stream = File.Create("example.xfdf"))
            {
                editor.ExportAnnotationsXfdf(stream, 1, 2, annotTypes);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ExtractAnnotations(System.Int32,System.Int32,System.String[])">
      <summary>
            Gets the list of annotations of the specified types.
            </summary>
      <param name="start">Start page from which the annotations will be selected.</param>
      <param name="end">End page to which the annotations will be selected.</param>
      <param name="annotTypes">The array of needed annotation types.</param>
      <returns>Annotations list.</returns>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            string[] annotTypes = new string[] {"Text", "Highlight"};
            IList annotList = editor.ExtractAnnotations(1, 2 , annotTypes);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ExtractAnnotations(System.Int32,System.Int32,System.Enum[])">
      <summary>
            Gets the list of annotations of the specified types.
            </summary>
      <param name="start">Start page from which the annotations will be selected.</param>
      <param name="end">End page to which the annotations will be selected.</param>
      <param name="annotTypes">The array of needed annotation types.</param>
      <returns>Annotations list.</returns>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            Enum[] annotTypes = new Enum[] {AnnotationType.Text, AnnotationType.Highlight};
            IList annotList = editor.ExtractAnnotations(1, 2 , annotTypes);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.#ctor">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfAnnotationEditor" /> object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfAnnotationEditor" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.ModifyAnnotations(System.Int32,System.Int32,Aspose.Pdf.Annotations.Annotation)">
      <summary>
            Modifies the annotations of the specifed type on the specified page range.
            It supports to modify next annotation properties: Modified, Title, Contents, Color, Subject and Open.
            </summary>
      <param name="start">The start page number.</param>
      <param name="end">The end page number.</param>
      <param name="annotation">The annotation object contains new properties.</param>
      <example>
        <code lang="C#">
            PdfAnnotationEditor editor = new PdfAnnotationEditor();
            editor.BindPdf("example.pdf");
            TextAnnotation annot = new TextAnnotation();
            annot.Modified = DateTime.Now;
            annot.Title = "NEW AUTHOR";
            annot.Contents = "NEW CONTENTS";
            annot.Color = Color.Red;
            annot.Subject = "NEW SUBJECT";
            annot.Open = true;
            editor.ModifyAnnotations(1, 2, annot);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfAnnotationEditor.RedactArea(System.Int32,Aspose.Pdf.Rectangle,System.Drawing.Color)">
      <summary>
            Redacts area on the specified page. All contents is removed. 
            </summary>
      <param name="pageIndex">Index of the page.</param>
      <param name="rect">Area rectangle.</param>
      <param name="color">Filling color.</param>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfBookmarkEditor">
      <summary>
            Represents a class to work with PDF file's bookmarks including create, modify, export, import and delete.    
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.CreateBookmarks">
      <summary>
            Creates bookmarks for all pages.
            </summary>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            editor.CreateBookmarks();
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.CreateBookmarkOfPage(System.String,System.Int32)">
      <summary>
            Creates bookmark for the specified page.
            </summary>
      <param name="bookmarkName">The specified bookmark name.</param>
      <param name="pageNumber">The specified desination page.</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            editor.CreateBookmarkOfPage("bookmark for page 1", 1);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.CreateBookmarks(Aspose.Pdf.Facades.Bookmark)">
      <summary>
            Creates the specified bookmark in the document. The method can be used for forming nested bookmarks hierarchy.
            </summary>
      <param name="bookmark">The bookmark will be added to the document.</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            Bookmark bm1=new Bookmark();
            bm1.PageNumber=1;
            bm1.Title="First child";
            Bookmark bm2=new Bookmark();
            bm2.PageNumber=2;
            bm2.Title="Second child";
            Bookmark bm=new Bookmark();
            bm.Action="GoTo";
            bm.PageNumber=1;
            bm.Title="Parent";
            Bookmarks bms=new Bookmarks();
            bms.Add(bm1);
            bms.Add(bm2);
            bm.ChildItem=bms;
            editor.CreateBookmarks(bm);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.CreateBookmarks(System.Drawing.Color,System.Boolean,System.Boolean)">
      <summary>
            Create bookmarks for all pages with specified color and style (bold, italic).
            </summary>
      <param name="color">The color of title.</param>
      <param name="boldFlag">The flag of bold attribution.</param>
      <param name="italicFlag">The flag of italic attribution.</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            editor.CreateBookmarks(System.Drawing.Color.Red, true, true);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.CreateBookmarkOfPage(System.String[],System.Int32[])">
      <summary>
            Creates bookmarks for the specified pages.
            </summary>
      <param name="bookmarkName">Bookmarks title array.</param>
      <param name="pageNumber">Bookmarks desination page array.</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            editor.CreateBookmarkOfPage("bookmark for page 1", 1);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.DeleteBookmarks">
      <summary>
            Deletes all bookmarks of the PDF document.
            </summary>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            editor.DeleteBookmarks();
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.DeleteBookmarks(System.String)">
      <summary>
            Deletes the bookmark of the PDF document.
            </summary>
      <param name="title">The title of bookmark deleted.</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            editor.DeleteBookmarks("existing bookmark title");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ModifyBookmarks(System.String,System.String)">
      <summary>
            Modifys bookmark title according to the specified bookmark title.
            </summary>
      <param name="sTitle">Source bookmark title.</param>
      <param name="dTitle">Modified bookmark title.</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            editor.ModifyBookmarks("existing bookmark title", "new bookmark title");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ExtractBookmarks">
      <summary>
            Extracts bookmarks of all levels from the document.
            </summary>
      <returns>The bookmarks collection of all bookmarks that exist in the document.</returns>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            Bookmarks bms = editor.ExtractBookmarks();
            foreach(Bookmark bm in bms)
                Console.WriteLine(bm.Title);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ExtractBookmarks(System.Boolean)">
      <summary>
            Extracts bookmarks of all levels from the document.
            </summary>
      <param name="upperLevel">If true, extracts only upper level bookmarks. Else, extracts all bookmarks recursively.</param>
      <returns>List of extracted bookmarks.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ExtractBookmarks(System.String)">
      <summary>
            Extracts the bookmarks with the specified title.
            </summary>
      <param name="title">Extracted item title.</param>
      <returns>Bookmark collection has items with the same title.</returns>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            Bookmarks bms = editor.ExtractBookmarks("Title");
            foreach(Bookmark bm in bms)
                Console.WriteLine(bm.Title);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ExtractBookmarks(Aspose.Pdf.Facades.Bookmark)">
      <summary>
            Extracts the children of a bookmark with a title like in specified bookamrk.
            </summary>
      <param name="bookmark">The specified bookamrk.</param>
      <returns>Bookmark collection with child bookmarks.</returns>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            Bookmark bookmark = new Bookmark();
            bookmark.Title = "Title";
            Bookmarks bms = editor.ExtractBookmarks(bookmark);
            foreach(Bookmark bm in bms)
                Console.WriteLine(bm.Title);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ExtractBookmarksToHTML(System.String,System.String)">
      <summary>
            Exports bookmarks to HTML file.
            </summary>
      <param name="pdfFile">The PDF file which bookmarks will be exported.</param>
      <param name="cssFile">The CSS file to display HTML file, can be null.</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.ExtractBookmarksToHTML("example.pdf", null);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ExportBookmarksToXML(System.String)">
      <summary>
            Exports bookmarks to XML file.
            </summary>
      <param name="xmlFile">The output XML file.</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            editor.ExportBookmarksToXML("bookmarks.xml");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ExportBookmarksToXML(System.IO.Stream)">
      <summary>
            Exports bookmarks to XML stream.
            </summary>
      <param name="stream">Output stream where data will be stored.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ImportBookmarksWithXML(System.String)">
      <summary>
            Imports bookmarks to the document from XML file.
            </summary>
      <param name="xmlFile">The XML file containing bookmarks list.</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor editor = new PdfBookmarkEditor();
            editor.BindPdf("example.pdf");
            editor.ImportBookmarksWithXML("bookmarks.xml");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ImportBookmarksWithXML(System.IO.Stream)">
      <summary>
            Imports bookmarks to the document from XML file.
            </summary>
      <param name="stream">Stream with bookmarks data.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.#ctor">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfBookmarkEditor" /> object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfBookmarkEditor" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfBookmarkEditor.ExportBookmarksToHtml(System.String,System.String)">
      <summary>
            Exports bookmarks to HTML file.
            </summary>
      <param name="inPdfFile">Input PDF file which bookmarks will be exported.</param>
      <param name="outHtmlFile">Output HTML file</param>
      <example>
        <code lang="C#">
            PdfBookmarkEditor.ExtractBookmarksToHTML("example.pdf", "bookmarks.html");
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfContentEditor">
      <summary>
            Represents a class to edit PDF file's content.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfContentEditor.TextSearchOptions">
      <summary>
            Gets or sets text search options.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfContentEditor.TextEditOptions">
      <summary>
            Gets or sets text edit options. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfContentEditor.TextReplaceOptions">
      <summary>
            Gets or sets text replace options. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfContentEditor.ReplaceTextStrategy">
      <summary>
            A set of parameters for replace text operation
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.BindPdf(System.String)">
      <summary> 
            Binds a PDF file for editing.
            </summary>
      <param name="inputFile">A PDF file to be edited.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.BindPdf(System.IO.Stream)">
      <summary> 
            Binds a PDF stream for editing.
            </summary>
      <param name="inputStream">A PDF stream to be edited.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.ExtractLink">
      <summary>
            Extracts the collection of Link instances contained in PDF document.
            </summary>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            IList links = editor.ExtractLink();
            foreach (object obj in links)
            {
                Link link = (Link)obj;
                // work with Link instance
            }
            </code>
      </example>
      <returns>The collection of Link objects</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateWebLink(System.Drawing.Rectangle,System.String,System.Int32,System.Drawing.Color,System.Enum[])">
      <summary>
            Creates a web link in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="url">The web link destination.</param>
      <param name="originalPage">The number of original page on which rectangle bound with web link will be created.</param>
      <param name="clr">The colour of rectangle for active click.</param>
      <param name="actionName">The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateWebLink(new System.Drawing.Rectangle(0, 0, 100, 100),
                "http://www.aspose.com", 1, System.Drawing.Color.Red,
                new Enum[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateWebLink(System.Drawing.Rectangle,System.String,System.Int32,System.Drawing.Color)">
      <summary>
            Creates a web link in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="url">The web link destination.</param>
      <param name="originalPage">The number of original page where rectangle bound with web link will be created.</param>
      <param name="clr">The colour of rectangle for active click.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateWebLink(new System.Drawing.Rectangle(0, 0, 100, 100),
                "http://www.aspose.com", 1, System.Drawing.Color.Red });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateWebLink(System.Drawing.Rectangle,System.String,System.Int32)">
      <summary>
            Creates a web link in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="url">The web link destination.</param>
      <param name="originalPage">The number of original page where rectangle bound with web link will be created.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateWebLink(new System.Drawing.Rectangle(0, 0, 100, 100), "http://www.aspose.com", 1 });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateLocalLink(System.Drawing.Rectangle,System.Int32,System.Int32,System.Drawing.Color,System.Enum[])">
      <summary>
            Creates a local link in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="desPage">The destination page.</param>
      <param name="originalPage">The number of original page where rectangle bound with local link will be created.</param>
      <param name="clr">The colour of rectangle for active click.</param>
      <param name="actionName">The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateLocalLink(new System.Drawing.Rectangle(0, 0, 100, 100),
                2, 1, System.Drawing.Color.Red,
                new Enum[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateLocalLink(System.Drawing.Rectangle,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
            Creates a local link in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="desPage">The destination page.</param>
      <param name="originalPage">The number of original page where rectangle bound with local link will be created.</param>
      <param name="clr">The colour of rectangle for active click.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateLocalLink(new System.Drawing.Rectangle(0, 0, 100, 100),
                2, 1, System.Drawing.Color.Red });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreatePdfDocumentLink(System.Drawing.Rectangle,System.String,System.Int32,System.Int32,System.Drawing.Color,System.Enum[])">
      <summary>
            Creates a link to another PDF document page.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="remotePdf">The PDF document which page will be opened.</param>
      <param name="originalPage">The number of original page where rectangle bound with link will be created.</param>
      <param name="destinationPage">The destination page.</param>
      <param name="clr">The colour of rectangle for active click.</param>
      <param name="actionName">The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreatePdfDocumentLink(new System.Drawing.Rectangle(0, 0, 100, 100),
                "another_example.pdf", 1, 1, System.Drawing.Color.Red,
                new Enum[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreatePdfDocumentLink(System.Drawing.Rectangle,System.String,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
            Creates a link to another PDF document page.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="remotePdf">The PDF document which page will be opened.</param>
      <param name="originalPage">The number of original page where rectangle bound with link will be created.</param>
      <param name="destinationPage">The destination page.</param>
      <param name="clr">The colour of rectangle for active click.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreatePdfDocumentLink(new System.Drawing.Rectangle(0, 0, 100, 100),
                "another_example.pdf", 1, 1, System.Drawing.Color.Red });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreatePdfDocumentLink(System.Drawing.Rectangle,System.String,System.Int32,System.Int32)">
      <summary>
            Creates a link to another PDF document page.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="remotePdf">The PDF document which page will be opened.</param>
      <param name="originalPage">The number of original page where rectangle bound with link will be created.</param>
      <param name="destinationPage">The destination page.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreatePdfDocumentLink(new System.Drawing.Rectangle(0, 0, 100, 100), "another_example.pdf", 1, 1 });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateCustomActionLink(System.Drawing.Rectangle,System.Int32,System.Drawing.Color,System.Enum[])">
      <summary>
            Creates a link to custom actions in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="originalPage">The number of original page where rectangle bound with link will be created.</param>
      <param name="color">The colour of rectangle for active click.</param>
      <param name="actionName">The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.</param>/// 
            <example><code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateCustomActionLink(new System.Drawing.Rectangle(0, 0, 100, 100),
                1, System.Drawing.Color.Red,
                new Enum[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog });
            editor.Save("example_out.pdf");
            </code></example></member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateApplicationLink(System.Drawing.Rectangle,System.String,System.Int32,System.Drawing.Color,System.Enum[])">
      <summary>
            Creates a link to launch an application in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="application">The path of application to be launched.</param>
      <param name="page">The number of original page where rectangle bound with link will be created.</param>
      <param name="clr">The colour of rectangle for active click.</param>
      <param name="actionName">The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.</param>/// 
            <example><code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateApplicationLink(new System.Drawing.Rectangle(0, 0, 100, 100),
                "explorer", 1, System.Drawing.Color.Red,
                new Enum[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog });
            editor.Save("example_out.pdf");
            </code></example></member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateApplicationLink(System.Drawing.Rectangle,System.String,System.Int32,System.Drawing.Color)">
      <summary>
            Creates a link to launch an application in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="application">The path of application to be launched.</param>
      <param name="page">The number of original page where rectangle bound with link will be created.</param>
      <param name="clr">The colour of rectangle for active click.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateApplicationLink(new System.Drawing.Rectangle(0, 0, 100, 100),
                "explorer", 1, System.Drawing.Color.Red });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateApplicationLink(System.Drawing.Rectangle,System.String,System.Int32)">
      <summary>
            Creates a link to launch an application in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="application">The path of application to be launched.</param>
      <param name="page">The number of original page where rectangle bound with link will be created.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateApplicationLink(new System.Drawing.Rectangle(0, 0, 100, 100), "explorer", 1 });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateJavaScriptLink(System.String,System.Drawing.Rectangle,System.Int32,System.Drawing.Color)">
      <summary>
            Creates a link to JavaScript in PDF document.
            </summary>
      <param name="code">The JavaScript code.</param>
      <param name="rect">The rectangle for active click.</param>
      <param name="originalPage">The number of original page where rectangle bound with link will be created.</param>
      <param name="color">The colour of rectangle for active click.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateJavaScriptLink("app.alert('welcome to aspose!');",
                new System.Drawing.Rectangle(0, 0, 100, 100), 1, System.Drawing.Color.Red });
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateText(System.Drawing.Rectangle,System.String,System.String,System.Boolean,System.String,System.Int32)">
      <summary>
            Creates text annotation in PDF document
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="title">The title of the annotation.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="open">A flag specifying whether the annotation should initially be displayed open.</param>
      <param name="icon">The name of an icon will be used in displaying the annotation. 
            This value can be: "Comment", "Key", "Note", "Help", "NewParagraph", "Paragraph", "Insert"</param>
      <param name="page">The number of original page where the text annotation will be created.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateText(new System.Drawing.Rectangle(0, 0, 100, 100),
                "Welcome to Aspose", "You are welcome to Aspose!", true, "Key", 1);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateFreeText(System.Drawing.Rectangle,System.String,System.Int32)">
      <summary>
            Creates free text annotation in PDF document
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="page">The number of original page where the text annotation will be created.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateFreeText(new System.Drawing.Rectangle(0, 0, 100, 100), "Welcome to Aspose", 1);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateMarkup(System.Drawing.Rectangle,System.String,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
            Creates markup annotation it PDF document.
            </summary>
      <param name="rect">The rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="type">The type of markup annotation. Can be 0 (Highlight), 1 (Underline), 2 (StrikeOut), 3 (Squiggly).</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="clr">The color of markup.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateMarkup(new System.Drawing.Rectangle(0, 0, 100, 100),
                "Welcome to Aspose", 0, 1, System.Drawing.Color.Red);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreatePopup(System.Drawing.Rectangle,System.String,System.Boolean,System.Int32)">
      <summary>
            Creates popup annotation in PDF document.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="open">A flag specifying whether the pop-up annotation should initially be displayed open.</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreatePopup(new System.Drawing.Rectangle(0, 0, 100, 100), "Welcome to Aspose", true, 1);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateFileAttachment(System.Drawing.Rectangle,System.String,System.String,System.Int32,System.String)">
      <summary>
            Creates file attachment annotation.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="filePath">The path of the file will be attached.</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="name">The name of an icon will be used in displaying the annotation.
            This value can be: "Graph", "PushPin", "Paperclip", "Tag".</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateFileAttachment(new System.Drawing.Rectangle(0, 0, 100, 100),
                "Welcome to Aspose", "attachment_file.pdf", 1, "Graph");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateFileAttachment(System.Drawing.Rectangle,System.String,System.String,System.Int32,System.String,System.Double)">
      <summary>
            Creates file attachment annotation.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="filePath">The path of the file will be attached.</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="name">The name of an icon will be used in displaying the annotation.
            This value can be: "Graph", "PushPin", "Paperclip", "Tag".</param>
      <param name="opacity">Icon's opacity from 0 to 1: 0 - completely transparant, 1 - completely opaque.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateFileAttachment(new System.Drawing.Rectangle(0, 0, 100, 100),
                "Welcome to Aspose", "attachment_file.pdf", 1, "Graph", 0.5);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateFileAttachment(System.Drawing.Rectangle,System.String,System.IO.Stream,System.String,System.Int32,System.String)">
      <summary>
            Creates file attachment annotation.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="attachmentStream">The attachment file stream.</param>
      <param name="attachmentName">The attachment name.</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="name">The name of an icon will be used in displaying the annotation.
            This value can be: "Graph", "PushPin", "Paperclip", "Tag".</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            using(System.IO.FileStream attStream = System.IO.File.OpenRead("attachment_file.pdf"))
            {
                editor.CreateFileAttachment(new System.Drawing.Rectangle(0, 0, 100, 100),
                    "Welcome to Aspose", attStream, "attachment_file.pdf", 1, "Graph");
                editor.Save("example_out.pdf");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateFileAttachment(System.Drawing.Rectangle,System.String,System.IO.Stream,System.String,System.Int32,System.String,System.Double)">
      <summary>
            Creates file attachment annotation.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="attachmentStream">The attachment file stream.</param>
      <param name="attachmentName">The attachment name.</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="name">The name of an icon will be used in displaying the annotation.
            This value can be: "Graph", "PushPin", "Paperclip", "Tag".</param>
      <param name="opacity">Icon's opacity from 0 to 1: 0 - completely transparant, 1 - completely opaque.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            using(System.IO.FileStream attStream = System.IO.File.OpenRead("attachment_file.pdf"))
            {
                editor.CreateFileAttachment(new System.Drawing.Rectangle(0, 0, 100, 100),
                    "Welcome to Aspose", attStream, "attachment_file.pdf", 1, "Graph", 0.5);
                editor.Save("example_out.pdf");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.AddDocumentAttachment(System.String,System.String)">
      <summary>
            Adds document attachment with no annotation.
            </summary>
      <param name="fileAttachmentPath">The path of the file will be attached.</param>
      <param name="description">The description information.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.AddDocumentAttachment("attachment_file.pdf", "description of attachment_file");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.AddDocumentAttachment(System.IO.Stream,System.String,System.String)">
      <summary>
            Adds document attachment with no annotation.
            </summary>
      <param name="fileAttachmentStream">The stream of the file will be attached.</param>
      <param name="fileAttachmentName">The attachment name.</param>
      <param name="description">The description information.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            using(System.IO.FileStream attStream = System.IO.File.OpenRead("attachment_file.pdf"))
            {
                editor.AddDocumentAttachment(attStream, "attachment_file.pdf", "description of attachment_file");
                editor.Save("example_out.pdf");
            }    
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.DeleteAttachments">
      <summary>
            Deletes all attachments in PDF document.
            </summary>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.DeleteAttachments();
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateLine(System.Drawing.Rectangle,System.String,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Drawing.Color,System.String,System.Int32[],System.String[])">
      <summary>
            Creates line annotation.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="x1">The starting horizontal coordinate of the line.</param>
      <param name="y1">The starting vertical coordinate of the line.</param>
      <param name="x2">The ending horizontal coordinate of the line.</param>
      <param name="y2">The ending vertical coordinate of the line.</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="border">The border width in points. If this value is 0 no border is drawn. Default value is 1.</param>
      <param name="clr">The color of line.</param>
      <param name="borderStyle">The border style specifying the width and dash pattern to be used in drawing the line.
            This value can be: "S" (Solid), "D" (Dashed), "B" (Beveled), "I" (Inset), "U" (Underline).</param>
      <param name="dashArray">A dash array defining a pattern of dashes and gaps to be used in drawing a dashed border.
            If it is used, borderSyle must be accordingly set to "D".</param>
      <param name="LEArray">An array of two values respectively specifying the beginning and ending style of the drawing line.
            The values can be: "Square", "Circle", "Diamond", "OpenArrow", "ClosedArrow", "None", "Butt", "ROpenArrow", "RClosedArrow", "Slash".</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateLine(new System.Drawing.Rectangle(0, 0, 100, 100), "Welcome to Aspose", 0, 0, 100, 100,
                1, 1, System.Drawing.Color.Red, "D", new int[] {2, 3}, new string[] {"OpenArrow", "ClosedArrow"});
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateSquareCircle(System.Drawing.Rectangle,System.String,System.Drawing.Color,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Creates square-circle annotation.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="contents">The contents of the annotation.</param>
      <param name="clr">The colour of square or circle.</param>
      <param name="square">True (square), false (sircle).</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="borderWidth">The border width of square or circle.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateSquareCircle(new System.Drawing.Rectangle(0, 0, 100, 100),
                "Welcome to Aspose", System.Drawing.Color.Red, false, 1, 5);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.DrawCurve(Aspose.Pdf.Facades.LineInfo,System.Int32,System.Drawing.Rectangle,System.String)">
      <summary>
            Creates curve annotation.
            </summary>
      <param name="lineInfo">The instance of LineInfo class.</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="annotContents">The contents of the annotation.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            newApiEditor.BindPdf("example.pdf");
            LineInfo lineInfo = new LineInfo();
            lineInfo.VerticeCoordinate = new float[] { 0, 0, 100, 100 };  //x1, y1, x2, y2, .. xn, yn
            lineInfo.Visibility = true;
            editor.DrawCurve(lineInfo, 1, new System.Drawing.Rectangle(0, 0, 0, 0), "Welcome to Aspose");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreatePolygon(Aspose.Pdf.Facades.LineInfo,System.Int32,System.Drawing.Rectangle,System.String)">
      <summary>
            Creates polygon annotation.
            </summary>
      <param name="lineInfo">The instance of LineInfo class.</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="annotContents">The contents of the annotation.</param>
      <example>
        <code lang="C#"> 
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            LineInfo lineInfo = new LineInfo();
            lineInfo.VerticeCoordinate = new float[] { 0, 0, 100, 100, 100, 50 };
            lineInfo.Visibility = true;
            editor.CreatePolygon(lineInfo, 1 , new System.Drawing.Rectangle(0, 0, 0, 0), "Welcome to Aspose");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreatePolyLine(Aspose.Pdf.Facades.LineInfo,System.Int32,System.Drawing.Rectangle,System.String)">
      <summary>
            Creates polyline annotation.
            </summary>
      <param name="lineInfo">The instance of LineInfo class.</param>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="annotContents">The contents of the annotation.</param>
      <example>
        <code lang="C#"> 
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            LineInfo lineInfo = new LineInfo();
            lineInfo.VerticeCoordinate = new float[] { 0, 0, 100, 100, 100, 50 };
            lineInfo.Visibility = true;
            editor.CreatePolyLine(lineInfo, 1 , new System.Drawing.Rectangle(0, 0, 0, 0), "Welcome to Aspose");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateCaret(System.Int32,System.Drawing.Rectangle,System.Drawing.Rectangle,System.String,System.String,System.Drawing.Color)">
      <summary>
            Creates caret annotation.
            </summary>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="caretRect">The actual boundaries of the underlying caret.</param>
      <param name="symbol">A symbol will be associated with the caret. Value can be: "P" (Paragraph), "None".</param>
      <param name="annotContents">The contents of the annotation.</param>
      <param name="color">The colour of the annotation.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateCaret(1,
                new System.Drawing.Rectangle(50, 50, 100, 100),
                new System.Drawing.Rectangle(60, 60, 70, 70),
                "None", "Welcome to Aspose", System.Drawing.Color.Red);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateRubberStamp(System.Int32,System.Drawing.Rectangle,System.String,System.String,System.Drawing.Color)">
      <summary>
            Creates a rubber stamp annotation.
            </summary>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="icon">An icon is to be used in displaying the annotation. Default value: 'Draft'."</param>
      <param name="annotContents">The contents of the annotation.</param>
      <param name="color">The colour of the annotation.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateRubberStamp(1, System.Drawing.Rectangle(0, 0, 100, 100),
                "Welcome to Aspose", System.Drawing.Color.Red);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateRubberStamp(System.Int32,System.Drawing.Rectangle,System.String,System.Drawing.Color,System.String)">
      <summary>
            Creates a rubber stamp annotation.
            </summary>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="annotContents">The contents of the annotation.</param>
      <param name="color">The colour of the annotation.</param>
      <param name="appearanceFile">The path of appearance file.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateRubberStamp(1, System.Drawing.Rectangle(0, 0, 100, 100),
                "Welcome to Aspose", System.Drawing.Color.Red, "appearance_file.pdf");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateRubberStamp(System.Int32,System.Drawing.Rectangle,System.String,System.Drawing.Color,System.IO.Stream)">
      <summary>
            Creates a rubber stamp annotation.
            </summary>
      <param name="page">The number of original page where the annotation will be created.</param>
      <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="annotContents">The contents of the annotation.</param>
      <param name="color">The colour of the annotation.</param>
      <param name="appearanceStream">The stream of appearance file.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            using (System.IO.FileStream appStream = File.OpenRead("appearance_file.pdf"))
            {
                editor.CreateRubberStamp(1, System.Drawing.Rectangle(0, 0, 100, 100),
                    "Welcome to Aspose", System.Drawing.Color.Red, appStream);
                editor.Save("example_out.pdf");
            }    
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateBookmarksAction(System.String,System.Drawing.Color,System.Boolean,System.Boolean,System.String,System.String,System.String)">
      <summary>
            Creates a bookmark with the specified action.
            </summary>
      <param name="title">The title of the bookmark.</param>
      <param name="color">The colour of the bookmark's title.</param>
      <param name="boldFlag">The flag of bold attribution.</param>
      <param name="italicFlag">The flag of italic attribution.</param>
      <param name="file">Another file or application required when the action type is "GoToR" or "Launch".</param>
      <param name="actionType">The action type. The value can be: "GoToR", "Launch", "GoTo", "URI".</param>
      <param name="destination">The local destination or remote destination or URL.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateBookmarksAction("bookmark title",
                System.Drawing.Color.Red, true, true, null, "GoTo", 1/*page number*/);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.AddDocumentAdditionalAction(System.String,System.String)">
      <summary>
            Adds additional action for document event.
            </summary>
      <param name="eventType">The document event types.</param>
      <param name="code">The code of JavaScript.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.AddDocumentAdditionalAction(PdfContentEditor.DocumentClose, "app.alert('Good-bye!');");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.RemoveDocumentOpenAction">
      <summary>
            Removes open action from the document. This operation is useful when concatenating multiple documents that use explicit 'GoTo' action on startup.
            </summary>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.RemoveDocumentOpenAction();
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.ChangeViewerPreference(System.Int32)">
      <summary>
            Changes the view preference.
            </summary>
      <param name="viewerAttribution">The view attribution defined in the ViewerPreference class.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.ChangeViewerPreference(ViewerPreference.HideMenubar);
            editor.ChangeViewerPreference(ViewerPreference.PageModeUseNone);
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.GetViewerPreference">
      <summary>
            Returns the view preference.
            </summary>
      <returns>Returns set of ViewerPrefernece flags </returns>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            int prefValue = editor.GetViewerPreference();
            if ((prefValue &amp; ViewerPreference.PageModeUseOutline) != 0)
            { // ... }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.ReplaceImage(System.Int32,System.Int32,System.String)">
      <summary>
            Replaces the specified image on the specified page of PDF document with another image.
            </summary>
      <param name="pageNumber">The number of page on which the image is replaced.</param>
      <param name="index">The index of the image object must be replaced.</param>
      <param name="imageFile">The image file will be used for replacing.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.ReplaceImage(1, 1, "image.jpg");
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.DeleteImage(System.Int32,System.Int32[])">
      <summary>
            Deletes the specified images on the specified page.
            </summary>
      <param name="pageNumber">The number of page on which images must be deleted.</param>
      <param name="index">An array repsents images' indexes.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.DeleteImage(1, new int[] {1, 2});
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.DeleteImage">
      <summary>
            Deletes all images from PDF document.
            </summary>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.DeleteImage();
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.ReplaceText(System.String,System.Int32,System.String,Aspose.Pdf.Text.TextState)">
      <summary>
            Replaces text in the PDF file on the specified page. <see cref="T:Aspose.Pdf.Text.TextState" /> object (font family, color) can be specified to replaced text.
            </summary>
      <example>
            The example demonstrates how to replace text on the first page of the PDF document and set <see cref="T:Aspose.Pdf.Text.TextState" /> text properties for the new text.
            <code lang="C#">
            // open document
            Document doc = new Document(inFile);
            
            // Create font and mark it to be embedded
            Aspose.Pdf.Text.Font font = FontRepository.FindFont("Courier New");
            font.IsEmbedded = true;
            
            // create PdfContentEditor object to edit text
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf(doc);
            
            // create textState object
            TextState textState = new TextState();
            textState.Font = font;
            textState.FontSize = 17;
            textState.FontStyle = FontStyle.Bold | FontStyle.Italic;
            textState.ForegroundColor = Color.Red;
            
            // change text with specified font
            editor.ReplaceText("hello world", 1, "hi world", textState);
            
            // save document
            doc.Save(outFile);
            </code></example>
      <param name="srcString">The string to be replaced.</param>
      <param name="thePage">Page number (0 means "all pages").</param>
      <param name="destString">The replaced string.</param>
      <param name="textState">Text state (Text Color, Font etc).</param>
      <returns>Returns true if replacement was made.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.ReplaceText(System.String,System.String)">
      <summary>
            Replaces text in the PDF file.
            </summary>
      <example>
            The example demonstrates how to replace text in PDF document.
            <code lang="C#">
            // open document
            Document doc = new Document(inFile);
            
            // create PdfContentEditor object to edit text
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf(doc);
            
            // change text 
            editor.ReplaceText("hello world", "hi world");
            
            // save document
            doc.Save(outFile);
            </code></example>
      <param name="srcString">The string to be replaced.</param>
      <param name="destString">Replacing string.</param>
      <returns>Returns true if replacement was made.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.ReplaceText(System.String,System.Int32,System.String)">
      <summary>
            Replaces text in the PDF file on the specified page.
            </summary>
      <example>
            The example demonstrates how to replace text in PDF document on the specified page.
            <code lang="C#">
            // open document
            Document doc = new Document(inFile);
            
            // create PdfContentEditor object to edit text
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf(doc);
            
            // change text 
            editor.ReplaceText("hello world", 1, "hi world");
            
            // save document
            doc.Save(outFile);
            </code></example>
      <param name="srcString">The sting to be replaced.</param>
      <param name="thePage">Page number (0 for all pages)</param>
      <param name="destString">Replacing string.</param>
      <returns>Returns true if replacement was made.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.ReplaceText(System.String,System.String,Aspose.Pdf.Text.TextState)">
      <summary>
            Replaces text in the PDF file using specified <see cref="T:Aspose.Pdf.Text.TextState" /> object.
            </summary>
      <example>
            The example demonstrates how to replace text and set <see cref="T:Aspose.Pdf.Text.TextState" /> text properties for the new text.
            <code lang="C#">
            // open document
            Document doc = new Document(inFile);
            
            // Create font and mark it to be embedded
            Aspose.Pdf.Text.Font font = FontRepository.FindFont("Courier New");
            font.IsEmbedded = true;
            
            // create PdfContentEditor object to edit text
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf(doc);
            
            // create textState object
            TextState textState = new TextState();
            textState.Font = font;
            textState.FontStyle = FontStyle.Bold | FontStyle.Italic;
            
            // change text with specified font
            editor.ReplaceText("hello world", "hi world", textState);
            
            // save document
            doc.Save(outFile);
            </code></example>
      <param name="srcString">String to be replaced</param>
      <param name="destString">Replacing string</param>
      <param name="textState">Text state (Text Color, Font etc)</param>
      <returns>Returns true if replacement was made.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateMovie(System.Drawing.Rectangle,System.String,System.Int32)">
      <summary>
            Creates Movie Annotations.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="filePath">The path of movie file to be played.</param>
      <param name="page">The page in which the Line annotation is created.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateSound(System.Drawing.Rectangle,System.String,System.String,System.Int32,System.String)">
      <summary>
            Creates Sound Annotations.
            </summary>
      <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
      <param name="filePath">The file path of sound file.</param>
      <param name="name">The name of an icon to be used in displaying the annotation,include:Speaker and Mic.</param>
      <param name="page">The page in which the Sound annotation is created.</param>
      <param name="rate">The sampling rate, in samples per second.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.DeleteStamp(System.Int32,System.Int32[])">
      <summary>
            Deletes multiple stamps on the specified page by stamp indexes.
            </summary>
      <param name="pageNumber">Page number where stamp will be deleted.</param>
      <param name="index">Stamp indexes.</param>
      <example>
        <code lang="C#">
            PdfContentEditor contentEditor = new PdfContentEditor();
            contentEditor.BindPdf("file.pdf");
            contentEditor.DeleteStamp(1, new int[] { 2, 3, 5} );
            contentEditor.Save("outfile.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.DeleteStampByIds(System.Int32[])">
      <summary>
            Deletes stamps with specified IDs from all pages of the document.
            </summary>
      <param name="stampIds">Array of stamp IDs.</param>
      <example>
        <code lang="C#">
            PdfContentEditor contentEditor = new PdfContentEditor();
            contentEditor.BindPdf("file.pdf");
            contentEditor.DeleteStampByIds(new int[] { 102, 103 } );
            contentEditor.Save("outfile.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.DeleteStampByIds(System.Int32,System.Int32[])">
      <summary>
            Deletes stamps on the specified page by multiple stamp IDs.
            </summary>
      <param name="pageNumber">Page number where stamps will be deleted.</param>
      <param name="stampIds">Array of stamp IDs.</param>
      <example>
        <code lang="C#">
            PdfContentEditor contentEditor = new PdfContentEditor();
            contentEditor.BindPdf("file.pdf");
            contentEditor.DeleteStampByIds(1, new int[] { 100, 101 } );
            contentEditor.Save("outfile.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.DeleteStampById(System.Int32,System.Int32)">
      <summary>
            Deletes stamp on the specified page by stamp ID.
            </summary>
      <param name="pageNumber">Page number where stamp will be deleted.</param>
      <param name="stampId">Identifier of stanp which should be deleted.</param>
      <example>
        <code lang="C#">
            PdfContentEditor contentEditor = new PdfContentEditor();
            contentEditor.BindPdf("file.pdf");
            contentEditor.DeleteStampById(1, 100);
            contentEditor.Save("outfile.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.HideStampById(System.Int32,System.Int32)">
      <summary>
            Hides the stamp. After hiding, stamp visibility may be restored with ShowStampById method.
            </summary>
      <param name="pageNumber">Number of the page.</param>
      <param name="stampId">Identifier of stamp which should be hidden.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.ShowStampById(System.Int32,System.Int32)">
      <summary>
            Shows stamp which was hidden by HiddenStampById.
            </summary>
      <param name="pageNumber">Number of the page.</param>
      <param name="stampId">Identifier of stamp which should be shown.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.MoveStampById(System.Int32,System.Int32,System.Double,System.Double)">
      <summary>
            Changes position of the stamp on page. 
            </summary>
      <param name="pageNumber">Numer of page.</param>
      <param name="stampId">Identifier of stamp which should be moved.</param>
      <param name="x">New stamp horizontal pozition on the page.</param>
      <param name="y">New stamp vertical position on the page.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.MoveStamp(System.Int32,System.Int32,System.Double,System.Double)">
      <summary>
            Changes position of the stamp on page.
            </summary>
      <param name="pageNumber">Number of page.</param>
      <param name="stampIndex">Index of stamp on the page.</param>
      <param name="x">New stamp horizontal position.</param>
      <param name="y">New stamp vertical position.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.DeleteStampById(System.Int32)">
      <summary>
            Delete stamp by ID from all pages of the document.
            </summary>
      <param name="stampId">Identifier of stamp which should be deleted.</param>
      <example>
        <code lang="C#">
            PdfContentEditor contentEditor = new PdfContentEditor();
            contentEditor.BindPdf("file.pdf");
            contentEditor.DeleteStampById(100);
            contentEditor.Save("outfile.pdf");
            </code>
      </example>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfContentEditor.DocumentOpen">
      <summary>
            A document event type. Opens a document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfContentEditor.DocumentClose">
      <summary>
            A document event type. Closes a document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfContentEditor.DocumentWillSave">
      <summary>
            A document event type. Excute a action before saving.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfContentEditor.DocumentSaved">
      <summary>
            A document event type. Excute a action after saving.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfContentEditor.DocumentWillPrint">
      <summary>
            A document event type. Excute a action before printing.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfContentEditor.DocumentPrinted">
      <summary>
            A document event type. Excute a action after printing.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.#ctor">
      <summary> 
            The constructor of the PdfContentEditor object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfContentEditor" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.CreateLocalLink(System.Drawing.Rectangle,System.Int32,System.Int32)">
      <summary>
            Creates a local link in PDF document.
            </summary>
      <param name="rect">The rectangle for active click.</param>
      <param name="desPage">The destination page.</param>
      <param name="originalPage">The number of original page where rectangle bound with local link will be created.</param>
      <example>
        <code lang="C#">
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf("example.pdf");
            editor.CreateLocalLink(new System.Drawing.Rectangle(0, 0, 100, 100), 2, 1});
            editor.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.ReplaceText(System.String,System.String,System.Int32)">
      <summary>
            Replaces text in the PDF file and sets font size.
            </summary>
      <example>
            The example demonstrates how to replace text and set font size for the new text.
            <code lang="C#">
            // open document
            Document doc = new Document(inFile);
            
            // Create font and mark it to be embedded
            Aspose.Pdf.Text.Font font = FontRepository.FindFont("Courier New");
            font.IsEmbedded = true;
            
            // create PdfContentEditor object to edit text
            PdfContentEditor editor = new PdfContentEditor();
            editor.BindPdf(doc);
            
            // change text with specified font
            editor.ReplaceText("hello world", "hi world", 14);
            
            // save document
            doc.Save(outFile);
            </code></example>
      <param name="srcString">String to be replaced.</param>
      <param name="destString">Replacing string.</param>
      <param name="fontSize">Font size.</param>
      <returns>Returns true if replacement was made.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.GetStamps(System.Int32)">
      <summary>
            Returns array of stamps on the page.
            </summary>
      <param name="pageNumber">Page number where stamps will be searched.</param>
      <returns>Array of stamps.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfContentEditor.Close">
      <summary>
            Closes opened document.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfConverter">
      <summary>
            Represents a class to convert a pdf file's each page to images, supporting BMP, JPEG, PNG and TIFF now.
            Supported content in pdfs: pictures, form, comment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfConverter.CoordinateType">
      <summary>
            Gets or sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfConverter.ShowHiddenAreas">
      <summary>
            Gets or sets flag that controls visibility of hidden areas on the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfConverter.RenderingOptions">
      <summary>
            Gets or sets rendering options.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfConverter.FormPresentationMode">
      <summary>
            Gets or sets form presentation mode.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfConverter.Resolution">
      <summary>
            Gets or sets resolution during convertting. The higher resolution, the slower convertting speed. The default value is 150.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfConverter.StartPage">
      <summary>
            Gets or sets start position which you want to convert. The minimal value is 1.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfConverter.EndPage">
      <summary>
            Gets or sets end position which you want to convert.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfConverter.Password">
      <summary>
            Gets or sets document OwnerPassword.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfConverter.UserPassword">
      <summary>
            Gets or sets document UserPassword.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfConverter.PageCount">
      <summary>
            Gets the page count.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.DoConvert">
      <summary>
            Do some initial works for converting a pdf document to images.
            </summary>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            String prefix = @"D:\Test\";
            String suffix = ".jpg";
            int imageCount = 1;
            while (converter.HasNextImage())
            {
            	converter.GetNextImage(prefix + imageCount + suffix);
            	imageCount++;
            }
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            Dim prefix As String =  "D:\Test\" 
            Dim suffix As String =  ".jpg" 
            Dim imageCount As Integer =  1 
            While converter.HasNextImage()
            	converter.GetNextImage(prefix + imageCount + suffix)
            	imageCount = imageCount + 1
            End While
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String)">
      <summary>
            Converts each pages of a pdf document to images and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file to save the TIFF image.</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            converter.SaveAsTIFF(@"D:\Test\test.tiff");	
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            converter.SaveAsTIFF(@"D:\Test\test.tiff")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String,Aspose.Pdf.Devices.CompressionType)">
      <summary>
            Converts each pages of a pdf document to images and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The output file.</param>
      <param name="compressionType">Type of the compression.</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            converter.SaveAsTIFF(@"D:\Test\test.tiff");
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter()
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            converter.SaveAsTIFF(@"D:\Test\test.tiff")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String,System.Int32,System.Int32)">
      <summary>
            Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file name to save the TIFF image</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String,Aspose.Pdf.PageSize)">
      <summary>
            Converts each pages of a pdf document to images with page size and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file name to save the TIFF image</param>
      <param name="pageSize">The page size of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String,Aspose.Pdf.PageSize,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Converts each pages of a pdf document to images with page size and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file name to save the TIFF image</param>
      <param name="pageSize">The page size of the image.</param>
      <param name="settings">Settings object that defines TIFF parameters.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String,System.Int32,System.Int32,Aspose.Pdf.Devices.CompressionType)">
      <summary>
            Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file name to save the TIFF image</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="compressionType">Type of the compression.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String,System.Int32,System.Int32,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file name to save the TIFF image</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="settings">Settings object that defines TIFF parameters.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String,System.Int32,System.Int32,Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file name to save the TIFF image</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="settings">Settings object that defines TIFF parameters.</param>
      <param name="converter">External converter</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFFClassF(System.String,System.Int32,System.Int32)">
      <summary>
            Converts each pages of a pdf document to images and save images to a single TIFF ClassF file.
            </summary>
      <param name="outputFile">The stream to save the TIFF image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            converter.SaveAsTIFFClassF(@"D:\Test\test.tiff",204,196);	
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            converter.SaveAsTIFFClassF(@"D:\Test\test.tiff",204,196)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFFClassF(System.String,Aspose.Pdf.PageSize)">
      <summary>
            Converts each pages of a pdf document to images and save images to a single TIFF ClassF file.
            </summary>
      <param name="outputFile">The stream to save the TIFF image.</param>
      <param name="pageSize">The page size of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFFClassF(System.IO.Stream,System.Int32,System.Int32)">
      <summary>
            Converts each pages of a pdf document to images and save images to a single TIFF ClassF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFFClassF(System.IO.Stream,Aspose.Pdf.PageSize)">
      <summary>
            Converts each pages of a pdf document to images and save images to a single TIFF ClassF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="pageSize">The page size of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream)">
      <summary>
            Converts each pages of a pdf document to images and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream,Aspose.Pdf.Devices.CompressionType)">
      <summary>
            Converts each pages of a pdf document to images and saves images to a single TIFF file.
            </summary>
      <param name="outputStream">The output stream.</param>
      <param name="compressionType">Type of the compression.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream,Aspose.Pdf.PageSize)">
      <summary>
            Converts each pages of a pdf document to images with page size and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="pageSize">The page size of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream,Aspose.Pdf.PageSize,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Converts each pages of a pdf document to images with page size and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="pageSize">The page size of the image.</param>
      <param name="settings">Settings object that defines TIFF parameters.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream,System.Int32,System.Int32)">
      <summary>
            Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream,System.Int32,System.Int32,Aspose.Pdf.Devices.CompressionType)">
      <summary>
            Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="compressionType">Type of the compression.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream,System.Int32,System.Int32,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="settings">Settings object that defines TIFF parameters.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream,System.Int32,System.Int32,Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="settings">Settings object that defines TIFF parameters.</param>
      <param name="converter">External converter</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.HasNextImage">
      <summary>
            Indicates whether the pdf file has more images or not.
            </summary>
      <returns>Can get more images or not, true if can, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.String)">
      <summary>
            Saves image to file with default image format - jpeg.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.String,Aspose.Pdf.PageSize)">
      <summary>
            Saves image to file with ith given page size and default image format - jpeg.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="pageSize">The page size of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves image to file with the givin image format.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="format">The format of the image.</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            String prefix = @"D:\Test\";
            String suffix = ".png";
            int imageCount = 1;
            while (converter.HasNextImage())
            {
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Png);
            	imageCount++;
            }
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            Dim prefix As String =  "D:\Test\" 
            Dim suffix As String =  ".png" 
            Dim imageCount As Integer =  1 
            While converter.HasNextImage()
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Png)
            	imageCount = imageCount + 1
            End While
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.String,Aspose.Pdf.PageSize,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves image to file with given page size and image format.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="pageSize">The page size of the image.</param>
      <param name="format">The format of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.IO.Stream)">
      <summary>
            Saves image to stream with default image format - jpeg.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.IO.Stream,Aspose.Pdf.PageSize)">
      <summary>
            Saves image to stream with given page size.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="pageSize">The page size of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves image to stream with given image format.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="format">The format of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.IO.Stream,Aspose.Pdf.PageSize,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves image to stream with given page size.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="pageSize">The page size of the image.</param>
      <param name="format">The format of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.String,System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32,System.Int32)">
      <summary>
            Saves image to file with the given image format, dimensions and quality.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            String prefix = @"D:\Test\";
            String suffix = ".jpg";
            int imageCount = 1;
            while (converter.HasNextImage())
            {
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, 800, 1000, 50);
            	imageCount++;
            }
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            Dim prefix As String =  "D:\Test\" 
            Dim suffix As String =  ".jpg" 
            Dim imageCount As Integer =  1 
            While converter.HasNextImage()
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, 800, 1000, 50)
            	imageCount = imageCount + 1
            End While
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32,System.Int32)">
      <summary>
            Saves image to stream with the givin image format, dimensions and quality.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.String,System.Drawing.Imaging.ImageFormat,System.Double,System.Double,System.Int32)">
      <summary>
            Saves image to file with the givin image format, image size,  and quality.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="imageWidth">The image width, the unit is pixels.</param>
      <param name="imageHeight">The image height, the unit is pixels..</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            String prefix = @"D:\Test\";
            String suffix = ".jpg";
            int imageCount = 1;
            float pixelX=800f;
            float pixelY=600f;
            while (converter.HasNextImage())
            {
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, pixelX, pixelY, 50);
            	imageCount++;
            }
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            Dim prefix As String =  "D:\Test\" 
            Dim suffix As String =  ".jpg" 
            Dim pixelX As float =800
            Dim pixelY As float=600
            Dim imageCount As Integer =  1 
            While converter.HasNextImage()
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, pixelX, pixelY, 50)
            	imageCount = imageCount + 1
            End While
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Double,System.Double,System.Int32)">
      <summary>
            Saves image to stream with the givin image format, size and quality.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.BindPdf(System.String)">
      <summary>
            Binds a Pdf file for converting.
            </summary>
      <param name="inputFile">The pdf file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.BindPdf(System.IO.Stream)">
      <summary>
            Binds a Pdf Stream for convert.
            </summary>
      <param name="inputStream">The pdf Stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.#ctor">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfConverter" /> object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfConverter" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.Close">
      <summary>
             Close the instance of PdfConverter and release the resources.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFFClassF(System.String)">
      <summary>
            Converts each pages of a pdf document to images and save images to a single TIFF ClassF file.
            </summary>
      <param name="outputFile">The stream to save the TIFF image.</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            converter.SaveAsTIFFClassF(@"D:\Test\test.tiff");	
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            converter.SaveAsTIFFClassF(@"D:\Test\test.tiff")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFFClassF(System.IO.Stream)">
      <summary>
            Converts each pages of a pdf document to images and save images to a single TIFF ClassF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Converts each pages of a pdf document to images with and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file name to save the TIFF image</param>
      <param name="settings">Settings object that defines TIFF parameters.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.String,Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Converts each pages of a pdf document to images with and saves images to a single TIFF file.
            </summary>
      <param name="outputFile">The file name to save the TIFF image</param>
      <param name="settings">Settings object that defines TIFF parameters.</param>
      <param name="converter">External converter</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Converts each pages of a pdf document to images and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="settings">Settings object that defines TIFF parameters.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.SaveAsTIFF(System.IO.Stream,Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Converts each pages of a pdf document to images and saves images to a single TIFF stream.
            </summary>
      <param name="outputStream">The stream to save the TIFF image.</param>
      <param name="settings">Settings object that defines TIFF parameters.</param>
      <param name="converter">External converter</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.String,System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32)">
      <summary>
            Saves image to file with the given image format and dimensions.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
      <example>
        <code>
            [C#]
            PdfConverter converter = new PdfConverter();
            converter.BindPdf(@"D:\Test\test.pdf");
            converter.DoConvert();
            String prefix = @"D:\Test\";
            String suffix = ".jpg";
            int imageCount = 1;
            while (converter.HasNextImage())
            {
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, 800, 1000);
            	imageCount++;
            }
            
            [Visual Basic]
            Dim converter As PdfConverter =  New PdfConverter() 
            converter.BindPdf("D:\Test\test.pdf")
            converter.DoConvert()
            Dim prefix As String =  "D:\Test\" 
            Dim suffix As String =  ".jpg" 
            Dim imageCount As Integer =  1 
            While converter.HasNextImage()
            	converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, 800, 1000)
            	imageCount = imageCount + 1
            End While
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32)">
      <summary>
            Saves image to stream with the givin image format, size and quality.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="imageWidth">The image width, the unit is pixel.</param>
      <param name="imageHeight">The image height, the unit is pixel.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Int32)">
      <summary>
            Saves image to stream with given image format and quality.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.IO.Stream,Aspose.Pdf.PageSize,System.Drawing.Imaging.ImageFormat,System.Int32)">
      <summary>
            Saves image to stream with given page size, image format and quality.
            </summary>
      <param name="outputStream">The stream to save the image.</param>
      <param name="pageSize">The page size of the image.</param>
      <param name="format">The format of the image.</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.String,System.Drawing.Imaging.ImageFormat,System.Int32)">
      <summary>
            Saves image to file with given image format and quality.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="format">The format of the image.</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfConverter.GetNextImage(System.String,Aspose.Pdf.PageSize,System.Drawing.Imaging.ImageFormat,System.Int32)">
      <summary>
            Saves image to file with given page size, image format and quality.
            </summary>
      <param name="outputFile">The file path and name to save the image.</param>
      <param name="pageSize">The page size of the image.</param>
      <param name="format">The format of the image.</param>
      <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfExtractor">
      <summary>
            Class for extracting images and text from PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfExtractor.StartPage">
      <summary>
            Gets or sets start page in the page range where extracting operation will be performed.
            <example><code lang="C#">
            PdfExtractor ext = new PdfExtractor();
            ext.BindBdf("sample.pdf");
            ext.StartPage = 2;
            ext.EndPage = 5;
            ext.ExtractText();
            </code></example></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfExtractor.EndPage">
      <summary>
            Gets or sets end page in the page range where extracting operation will be performed.
            <example><code lang="C#">
            PdfExtractor ext = new PdfExtractor();
            ext.BindBdf("sample.pdf");
            ext.StartPage = 2;
            ext.EndPage = 3;
            ext.ExtractText();
            </code></example></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfExtractor.ExtractTextMode">
      <summary>
            Sets the mode for extract text's result.
            </summary>
      <value>0 is pure text mode and 1 is raw ordering mode. Default is 0.</value>
      <example>
            The example demonstratres the <see cref="P:Aspose.Pdf.Facades.PdfExtractor.ExtractTextMode" /> property usage in text extraction scenario.
            <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(@"D:\Text\text.pdf");
            extractor.ExtractTextMode = 1;
            extractor.ExtractText();
            extractor.GetText(@"D:\Text\text.txt");
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfExtractor.TextSearchOptions">
      <summary>
            Gets or sets text search options.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfExtractor.ExtractImageMode">
      <summary>
            Sets the mode for extract images process.
            </summary>
      <remarks>
            Default value is ExtractImageMode.DefinedInResources that extracts all images defined in resources.
            
            To extract actually shown images ExtractImageMode.ActuallyUsed mode should be used.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfExtractor.IsBidi">
      <summary>
            Is true when text has hebriew or arabic symbols. This case must be specially considered because
            string functions change their behaviour and start process text from right to left (except numbers 
            and other non text chars).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.ExtractText">
      <summary>
            Extracts text from a Pdf document using Unicode encoding.
            </summary>
      <example>
            First example demonstratres how to extract all the text from PDF file.
            <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(@"D:\Text\text.pdf");
            extractor.ExtractText();
            extractor.GetText(@"D:\Text\text.txt");
            </code><code lang="VB.NET">
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf("D:\Text\text.pdf")
            extractor.ExtractText()
            extractor.GetText("D:\Text\text.txt")
            </code>
            Second example demonstratres how to extract each page's text into one txt file.
            <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf");
            extractor.ExtractText();
            String prefix = TestPath + @"Aspose.Pdf.Kit";
            String suffix = ".txt";
            int pageCount = 1;
            while (extractor.HasNextPageText())
            {
                extractor.GetNextPageText(prefix + pageCount + suffix);
                pageCount++;
            }
            </code><code lang="VB.NET">		
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf(TestPath + "Aspose.Pdf.Kit.Pdf")
            extractor.ExtractText()
            Dim prefix As String =  TestPath + "Aspose.Pdf.Kit" 
            Dim suffix As String =  ".txt" 
            Dim pageCount As Integer =  1 
            While extractor.HasNextPageText()
                extractor.GetNextPageText(prefix + pageCount + suffix)
                pageCount = pageCount + 1
            End While
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.ExtractText(System.Text.Encoding)">
      <summary>
            Extracts text from a Pdf document using specified encoding.
            </summary>
      <example>
            First example demonstratres how to extract all the text from PDF file.
            <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(@"D:\Text\text.pdf");
            extractor.ExtractText(Encoding.Unicode);
            extractor.GetText(@"D:\Text\text.txt");
            </code><code lang="VB.NET">
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf("D:\Text\text.pdf")
            extractor.ExtractText(Encoding.Unicode)
            extractor.GetText("D:\Text\text.txt")
            </code>
            Second example demonstratres how to extract each page's text into one txt file.
            <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf");
            extractor.ExtractText(Encoding.Unicode);
            String prefix = TestPath + @"Aspose.Pdf.Kit";
            String suffix = ".txt";
            int pageCount = 1;
            while (extractor.HasNextPageText())
            {
                extractor.GetNextPageText(prefix + pageCount + suffix);
                pageCount++;
            }
            </code><code lang="VB.NET">		
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf(TestPath + "Aspose.Pdf.Kit.Pdf")
            extractor.ExtractText(Encoding.Unicode)
            Dim prefix As String =  TestPath + "Aspose.Pdf.Kit" 
            Dim suffix As String =  ".txt" 
            Dim pageCount As Integer =  1 
            While extractor.HasNextPageText()
                extractor.GetNextPageText(prefix + pageCount + suffix)
                pageCount = pageCount + 1
            End While
            </code></example>
      <param name="encoding">The encoding of the extracted text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetText(System.String)">
      <summary>
            Saves text to file. see also:<see cref="M:Aspose.Pdf.Facades.PdfExtractor.ExtractText" /></summary>
      <param name="outputFile">The file path and name to save the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetText(System.IO.Stream)">
      <summary>
            Saves text to stream. see also:<see cref="M:Aspose.Pdf.Facades.PdfExtractor.ExtractText" /></summary>
      <param name="outputStream">The stream to save the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.BindPdf(System.String)">
      <summary>
            Bind input PDF file.
            </summary>
      <param name="inputFile">PDF fiel to bind</param>
      <example>
        <code lang="C#">
            PdfExtractor ext = new PdfExtractor();
            ext.BindPdf("sample.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.BindPdf(System.IO.Stream)">
      <summary>
            Binds PDF document from stream.
            </summary>
      <param name="inputStream">Stream containing PDF document data</param>
      <example>
        <code lang="C#">
            PdfExtractor ext = new PdfExtractor();
            Stream stream = new FileStream("sample.pdf", FileMode.Open, FileAccess.Read);
            ext.BindPdf(stream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.ExtractImage">
      <summary>
            Extract images from PDF file.
            </summary>
      <example>
        <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf("sample.pdf");
            extractor.ExtractImage();
            int i = 1;
            while (extractor.HasNextImage())
            {
                extractor.GetNextImage("image-" + i +".pdf");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.HasNextImage">
      <summary>
            Checks if more images are accessible in PDF document. Note: ExtractImage must be called before using of this method.
            </summary>
      <returns>Trues if more images are accessible</returns>
      <example>
        <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf("sample.pdf");
            extractor.ExtractImage();
            int i = 1;
            while (extractor.HasNextImage())
            {
                extractor.GetNextImage("image-" + i +".pdf");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetNextImage(System.String)">
      <summary>
            Retreives next image from PDF document. Note: ExtractImage must be called before using of this method.
            </summary>
      <param name="outputFile">File where image will be stored</param>
      <returns>True is image is successfully extracted</returns>
      <example>
        <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf("sample.pdf");
            extractor.ExtractImage();
            int i = 1;
            while (extractor.HasNextImage())
            {
                extractor.GetNextImage("image-" + i +".pdf");
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetNextImage(System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Retreives next image from PDF document with given image format. Note: ExtractImage must be called before using of this method.
            </summary>
      <param name="outputFile">File where image will be stored</param>
      <param name="format">The format of the image.</param>
      <returns>True is image is successfully extracted</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetNextImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Retreive next image from PDF file and stores it into stream with given image format.
            </summary>
      <param name="outputStream">Stream where image data will be saved</param>
      <param name="format">The format of the image.</param>
      <returns>True in case the image is successfully extracted.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetNextImage(System.IO.Stream)">
      <summary>
            Retreive next image from PDF file and stores it into stream.
            </summary>
      <param name="outputStream">Stream where image data will be saved</param>
      <returns>True in case the image is successfully extracted.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetAttachNames">
      <summary>
            Returns list of attachments in PDF file. Note: ExtractAttachments must be called befor using this method.
            </summary>
      <returns>List of attachments</returns>
      <example>
            Example demonstrates how to extract attachment names form PDF file.
            <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(TestSettings.GetInputFile("sample.pdf"));
            extractor.ExtractAttachment();
            IList attachments = extractor.GetAttachNames();
            foreach (string name in attachments)
            	Console.WriteLine(name);
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.ExtractAttachment">
      <summary>
            Extracts attachments from a Pdf document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.ExtractAttachment(System.String)">
      <summary>
            Extracts attachment to PDF file by attachment name.
            </summary>
      <param name="attachmentFileName">Name of attachment to extract</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetAttachment(System.String)">
      <summary>
            Stores attachment into file.
            </summary>
      <param name="outputPath">
            Directory path where attachment(s) will be stored.
            Null or empty string means attachment(s) will be placed in the application directory.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.HasNextPageText">
      <summary>
            Indicates that whether can get more texts or not.
            </summary>
      <example>
            The example demonstratres the <see cref="M:Aspose.Pdf.Facades.PdfExtractor.HasNextPageText" /> property usage in text extraction scenario.
            <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf");
            extractor.ExtractText(Encoding.Unicode);
            String prefix = TestPath + @"Aspose.Pdf.Kit";
            String suffix = ".txt";
            int pageCount = 1;
            while (extractor.HasNextPageText())
            {
                extractor.GetNextPageText(prefix + pageCount + suffix);
                pageCount++;
            }
            </code><code lang="VB.NET">		
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf(TestPath + "Aspose.Pdf.Kit.Pdf")
            extractor.ExtractText(Encoding.Unicode)
            Dim prefix As String =  TestPath + "Aspose.Pdf.Kit" 
            Dim suffix As String =  ".txt" 
            Dim pageCount As Integer =  1 
            While extractor.HasNextPageText()
                extractor.GetNextPageText(prefix + pageCount + suffix)
                pageCount = pageCount + 1
            End While
            </code></example>
      <returns>Can get more texts or not, true is can, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetNextPageText(System.String)">
      <summary>
            Saves one page's text to file.
            </summary>
      <example>
            The example demonstratres the GetNextPageText method usage in text extraction scenario.
            <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf");
            extractor.ExtractText(Encoding.Unicode);
            String prefix = TestPath + @"Aspose.Pdf.Kit";
            String suffix = ".txt";
            int pageCount = 1;
            while (extractor.HasNextPageText())
            {
                extractor.GetNextPageText(prefix + pageCount + suffix);
                pageCount++;
            }
            </code><code lang="VB.NET">		
            Dim extractor As PdfExtractor =  New PdfExtractor() 
            extractor.BindPdf(TestPath + "Aspose.Pdf.Kit.Pdf")
            extractor.ExtractText(Encoding.Unicode)
            Dim prefix As String =  TestPath + "Aspose.Pdf.Kit" 
            Dim suffix As String =  ".txt" 
            Dim pageCount As Integer =  1 
            While extractor.HasNextPageText()
                extractor.GetNextPageText(prefix + pageCount + suffix)
                pageCount = pageCount + 1
            End While
            </code></example>
      <param name="outputFile">The file path and name to save the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetNextPageText(System.IO.Stream)">
      <summary>
            Saves one page's text to stream.
            </summary>
      <example>
            The example demonstratres the <see cref="M:Aspose.Pdf.Facades.PdfExtractor.GetNextPageText(System.String)" /> method usage in text extraction scenario.
            <code lang="C#">
            PdfExtractor extractor = new PdfExtractor();
            extractor.BindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf");
            extractor.ExtractText(Encoding.Unicode);
            String prefix = TestPath + @"Aspose.Pdf.Kit";
            String suffix = ".txt";
            int pageCount = 1;
            while (extractor.HasNextPageText())
            {
                FileStream fs = new FileStream(prefix + pageCount + suffix, FileMode.Create);
                extractor.GetNextPageText(prefix + pageCount + suffix);
                fs.Close();
                pageCount++;
            }
            </code></example>
      <param name="outputStream">The stream to save the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.#ctor">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfExtractor" /> object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfExtractor" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetText(System.IO.Stream,System.Boolean)">
      <summary>
            Saves text to stream. see also:<see cref="M:Aspose.Pdf.Facades.PdfExtractor.ExtractText" /></summary>
      <param name="outputStream">The stream to save the text.</param>
      <param name="filterNotAscii">If this parameter is true all Not ASCII simbols will be removed</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetAttachment">
      <summary>
             Saves all the attachment file to streams.
             </summary>
      <returns>The stream array of the attachment file in the pdf document.</returns>
      <example>
        <code>
             [C#]
             PdfExtractor extractor = new PdfExtractor();     
            	extractor.BindPdf(path + "Attach.pdf");
            	extractor.ExtractAttachment();
            	IList names = extractor.GetAttachNames();
            	MemoryStream[] tempStreams =  extractor.GetAttachment();
            	for (int i=0; i&lt;tempStreams.Length; i++)
            	{
            		string name = (string)names[i];
            		FileStream fs = new FileStream(path + name,System.IO.FileMode.Create);
            		byte[] tempBytes = new byte[4096];
            		tempStreams[i].Position = 0;
            
            		for (; ; )
            		{
            			int numOfBytes = tempStreams[i].Read(tempBytes, 0, 4096);
            			if (numOfBytes &lt; 1)
            			break;
            			fs.Write(tempBytes, 0, numOfBytes);
            		}
            		fs.Close();
            	}
            	
             [Visual Basic]
             Dim extractor As PdfExtractor =  New PdfExtractor() 
            	extractor.BindPdf(path + "Attach.pdf")
            	extractor.ExtractAttachment()
            	extractor.GetAttachment(path)
             Dim names As IList =  extractor.GetAttachNames() 
             Dim tempStreams() As MemoryStream =  extractor.GetAttachment() 
             for(Integer i = 0 i&lt;tempStreams.Length i++)
             {
             	Dim name As String = CType(names(i), String)
             	Dim fs As FileStream =  New FileStream(path + name,System.IO.FileMode.Create) 
             	Dim tempBytes() As Byte =  New Byte(4096) {} 
             	tempStreams(i).Position = 0
             
             	for()
             	{
             		Dim numOfBytes As Integer =  tempStreams(i).Read(tempBytes,0,4096) 
             		If numOfBytes &lt; 1 Then
             			break
             		End If
             		fs.Write(tempBytes, 0, numOfBytes)
             	}
             	fs.Close()
             }
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfExtractor.GetAttachmentInfo">
      <summary>
            Gets the list of attachments.
            </summary>
      <returns>Returns a List&lt;FileSpecificatio&gt;&gt;.</returns>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfExtractor.Resolution">
      <summary>
            Set or gets resolution for extracted images.
            Default value is 150.
            Images which have greater resolution value are more clear.
            However increasing resolution value results in increasing time and memory needed to extract images.
            Usually to get clear image it's enough to set resolution to 150 or 300.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfExtractor.Password">
      <summary>
            Gets or sets input file's password.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfFileEditor">
      <summary>
            Implements operations with PDF file: concatenation, splitting, extracting pages, making booklet, etc.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfFileEditor.ConcatenateCorruptedFileAction">
      <summary>
            Action performed when corrupted file was met in concatenation process. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileEditor.ConcatenateCorruptedFileAction.StopWithError">
      <summary>
            If corrupted file was met, then stop concatentation process and return error.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileEditor.ConcatenateCorruptedFileAction.ConcatenateIgnoringCorrupted">
      <summary>
            If corrupted file was met, then don't stop concatenation and don't process corrupted file.
            List of corrupted files is accessible in Failures property.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileEditor.ConcatenateCorruptedFileAction.ConcatenateIgnoringCorruptedObjects">
      <summary>
            When corrupted object is met in source document, process will not stopped and corrupted object only is ignored.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.ConversionLog">
      <summary>
            Gets log of conversion process.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.MergeDuplicateLayers">
      <summary>
            Optional contents of concatentated documents with equal names will be merged into one layer in resulstant document if this property is true. 
            Else, layers with equal names will be save as different layers in resultant document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.CopyOutlines">
      <summary>
            If true then outlines will be copied. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.CopyLogicalStructure">
      <summary>
            If true then logical structure of the file is copied when concatenation is performed. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.MergeDuplicateOutlines">
      <summary>
            If true, duplicate outlines are merged.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.PreserveUserRights">
      <summary>
            If true, user rights of first document are applied to concatenated document. User rights of all other documents are ignored. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.IncrementalUpdates">
      <summary>
            If true, incremental updates are made during concatenation. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfFileEditor.CorruptedItem">
      <summary>
            Class which provides information about corrupted files in time of concatenation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.CorruptedItem.Index">
      <summary>
            Index of corrupted file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.CorruptedItem.Exception">
      <summary>
            Exception thrown for this file which indicates problem with the file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.OptimizeSize">
      <summary>
            Gets or sets optimization flag. Equal resource streams in resultant file are merged into one PDF object if this flag set. 
            This allows to decrease resultant file size but may cause slower execution and larger memory requirements.
            Default value: false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.CorruptedItems">
      <summary>
            Array of encountered problems when concatenation was performed. For every corrupted document from passed to Concatenate() 
            function new CorruptedItem entry is created.
            This property may be used only when CorruptedFileAction is ConcatenateIgnoringCorrupted.
            <example><code lang="C#">
            //concatenate documents and show information about corrupted documents
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.CorruptedFileAction = PdfFileEditor.ConcatenateCorruptedFileActions.ConcatenateIgnoringCorrupted;
            if (pfe.CorruptedItems.Length &gt;0)
            {
              foreach(PdfFileEditor.CorruptedItem item in pfe.CorruptedItems)
              {
                 Console.WriteLine(item.Index + " reason: " + item.Exception);
              }
            }
            </code></example></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.CorruptedFileAction">
      <summary>
            This property defines behavior when concatenating process met corrupted file.
            Possible values are: StopWithError and ConcatenateIgnoringCorrupted.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeValue">
      <summary>
            Value of margin or content size specified in percents of default space units.
            This class is used in ContentsResizeParameters.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeValue.PercentValue">
      <summary>
            Sets value in percents of page size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeValue.UnitValue">
      <summary>
            Sets value in default space units.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeValue.Value">
      <summary>
            Gets specified value. Use Unit property to get value units.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeValue.IsPercent">
      <summary>
            Gets true if value is expressed in percents; 
            False if value is expressed in default units.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeValue.Percents(System.Double)">
      <summary>
            Initializes value in percents.
            </summary>
      <param name="value">Value in percents.</param>
      <returns>New value instance.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeValue.Units(System.Double)">
      <summary>
            Initializes value in default space units.
            </summary>
      <param name="value">Value in units.</param>
      <returns>New value instance.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeValue.Auto">
      <summary>
            Initializes automatically calculated value.
            </summary>
      <returns>New value instance.</returns>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters">
      <summary>
            Class for specifing page resize parameters.
            Allow to set the following parameters: 
            Size of result page (width, height) in default space units or in percents of initial pages size; 
            Left, Top, Bottom and Right margins in default space units or in percents of initial page size;
            Some values may be left null for automatic calculation. These values will be calculated 
            from rest of page size after calculation explicitly specified values.
            For example: if page width = 100 and new page width specified 60 units then 
            left and right margins are automatically calculated:
            (100 - 60) / 2 = 15.
            This class is used in ResizeContents method.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters.LeftMargin">
      <summary>
            Gets or sets left margin on the resultant page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters.RightMargin">
      <summary>
            Gets or sets right margin on the resultant page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters.TopMargin">
      <summary>
            Gets or sets top margin on the resultant page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters.BottomMargin">
      <summary>
            Gets or sets bottom margin on the resultant page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters.ContentsWidth">
      <summary>
            Gets or sets width of the content of the source page on the resultant page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters.ContentsHeight">
      <summary>
            Gets or sets height of the content of the source page on the resultant page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters.#ctor">
      <summary>
            Creates resize parameters where al values are set to "auto". Later margins and contents size may be specified if required.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters.#ctor(Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeValue,Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeValue,Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeValue,Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeValue,Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeValue,Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeValue)">
      <summary>
            Creates resize parameters with specified margin values and contents size. 
            </summary>
      <param name="leftMargin">Left margin value.</param>
      <param name="contentsWidth">Contents width.</param>
      <param name="rightMargin">Right margin.</param>
      <param name="topMargin">Top margin.</param>
      <param name="contentsHeight">Contents height.</param>
      <param name="bottomMargin">Bottom margin.</param>
            Empty values means that corresponding value calculated automatically
        </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters.Margins(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates resize parameters with specifed margins value. Contents size is automatically calculated.
            </summary>
      <param name="left">Left margin.</param>
      <param name="right">Right margin.</param>
      <param name="top">Top margin.</param>
      <param name="bottom">Bottom margin.</param>
      <returns>Created resize parameters.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters.MarginsPercent(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates resize parameters. Margins are specified in percents of initial page size.
            </summary>
      <param name="left">Left margin (in percents of page width).</param>
      <param name="right">Right margin (in percents of page height).</param>
      <param name="top">Top margin (in percents of page height).</param>
      <param name="bottom">Bottom margin (in percents of page height).</param>
      <returns>Returns new resize parameters.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters.ContentSize(System.Double,System.Double)">
      <summary>
            Creates resize parameters with specified contents size.
            </summary>
      <param name="width">New width of contents.</param>
      <param name="height">New height of contetns.</param>
      <returns>Returns new resize parameters.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters.ContentSizePercent(System.Double,System.Double)">
      <summary>
            Creates resize parameters with specified contents size in percents of initial page size.
            Margins are caculated automatically.
            </summary>
      <param name="width">New content width in percents.</param>
      <param name="height">New contents height in percents.</param>
      <returns>New resize parameters.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters.PageResize(System.Double,System.Double)">
      <summary>
            Creates resize paramters for page resize. 
            </summary>
      <param name="width">New page width in units.</param>
      <param name="height">New page height in units. </param>
      <returns>New resize paramteres.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters.PageResizePct(System.Double,System.Double)">
      <summary>
            Creates resize paramters for page resize. New sizes are specified in percent. 
            </summary>
      <param name="widthPct">New page width in percents.</param>
      <param name="heightPct">New page height in percents. </param>
      <returns>New resize paramteres.</returns>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.OwnerPassword">
      <summary>
            Sets owner's password if the source input Pdf file is encrypted.
            This property is not implemented yet.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.AllowConcatenateExceptions">
      <summary>
            If set to true, exceptions are thrown if error occured. Else excetion are not thrown and methods return false if failed.
            </summary>
      <example>
        <code lang="C#">
             PdfFileEditor pfe = new PdfFileEditor();
             pfe.AllowConcatenatedException = true;
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.ConvertTo">
      <summary>
            Sets PDF file format. Result file will be saved in specified file format. 
            If this property is not specified then file will be save in default PDF format without conversion.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.CloseConcatenatedStreams">
      <summary>
            If set to true, streams are closed after operation.
            </summary>
      <example>
        <code lang="C#">
             PdfFileEditor pfe = new PdfFileEditor();
             pfe.CloseConcatenatedStreams = true;
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.UniqueSuffix">
      <summary>
            Format of the suffix which is added to field name to make it unique when forms are concatenated.
            This string must contain %NUM% substring which will be replaced with numbers.
            For example if UniqueSuffix = "ABC%NUM%" then for field "fieldName" names will be:
            fieldNameABC1, fieldNameABC2, fieldNameABC3 etc.
            </summary>
      <example>
        <code lang="C#">
              PdfFileEditor ed = new PdfFileEditor();
              ed.UniqueSuffix = "_%NUM%";
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.KeepFieldsUnique">
      <summary>
            If true then field names will be made unique when forms are concatenated.
            Suffixes will be added to field names, suffix template may be specified in UniqueSuffix property.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Concatenate(System.String,System.String,System.String)">
      <summary>
            Concatentates two files.
            </summary>
      <param name="firstInputFile">First file to concatenate.</param>
      <param name="secInputFile">Second file to concatenate.</param>
      <param name="outputFile">Output file.</param>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            fileEditor.Concatenate("file1.pdf", "file2.pdf", "outfile.pdf");
            </code>
      </example>
      <returns>True if operation was succeeded.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Concatenate(System.IO.Stream,System.IO.Stream,System.IO.Stream)">
      <summary>
            Concatenates two files.
            </summary>
      <param name="firstInputStream">Stream of first file.</param>
      <param name="secInputStream">Stream of second file.</param>
      <param name="outputStream">Stream where result file will be stored.</param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Stream stream1 = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream stream2 = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
            Stream outstream = new FileStream("outfile.pdf", FileMode.Create, FileAccess.Write);
            fileEditor.Concatenate(stream1, stream2, outstream);
            </code>
      </example>
      <returns>True if operation was succeeded.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Concatenate(Aspose.Pdf.Document[],Aspose.Pdf.Document)">
      <summary>
            Concatenates documents.
            </summary>
      <param name="src">Array of source documents.</param>
      <param name="dest">Destination document.</param>
      <returns>True if concatenation is successful. </returns>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.UseDiskBuffer">
      <summary>
            If this option used then destination document will be saved on disk periodically and further concatenation will appllied to it as incremental updates. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.ConcatenationPacketSize">
      <summary>
            Number of documents concatenated before new incremental update was made during concatenation when UseDiskBuffer is set to true.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Concatenate(System.String[],System.String)">
      <summary>
            Concatenates files into one file. 
            </summary>
      <param name="inputFiles">Array of files to concatenate.</param>
      <param name="outputFile">Name of output file.</param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
             PdfFileEditor pfe = new PdfFileEditor();
             pfe.Concatenate(new string[]  { "src1.pdf", "src2.pdf" }, "dest.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Concatenate(System.IO.Stream[],System.IO.Stream)">
      <summary>
            Concatenates files 
            </summary>
      <param name="inputStream">Array of streams to be concatenated.</param>
      <param name="outputStream">Stream where result file will be stored.</param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Stream stream1 = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream stream2 = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
            Stream outstream = new FileStream("outfile.pdf", FileMode.Create, FileAccess.Write);
            fileEditor.Concatenate(new Stream[] { stream1, stream2 } , outstream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Concatenate(System.String,System.String,System.String,System.String)">
      <summary>
            Merges two Pdf documents into a new Pdf document with pages in alternate ways and fill the blank places with blank pages.
            e.g.: document1 has 5 pages: p1, p2, p3, p4, p5. document2 has 3 pages: p1', p2', p3'.
            Merging the two Pdf document will produce the result document with pages:p1, p1', p2, p2', p3, p3', p4, blankpage, p5, blankpage.
            </summary>
      <param name="firstInputFile">First file.</param>
      <param name="secInputFile">Second file.</param>
      <param name="blankPageFile">PDF file with blank page.</param>
      <param name="outputFile">Result file.</param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
             PdfFileEditor pfe = new PdfFileEditor();
             pfe.Concatenate("src1.pdf", "src2.pdf", "blank.pdf", "dest.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Concatenate(System.IO.Stream,System.IO.Stream,System.IO.Stream,System.IO.Stream)">
      <summary>
            Merges two Pdf documents into a new Pdf document with pages in alternate ways and fill the blank places with blank pages.
            e.g.: document1 has 5 pages: p1, p2, p3, p4, p5. document2 has 3 pages: p1', p2', p3'.
            Merging the two Pdf document will produce the result document with pages:p1, p1', p2, p2', p3, p3', p4, blankpage, p5, blankpage.
            </summary>
      <param name="firstInputStream">The first Pdf Stream.</param>
      <param name="secInputStream">The second Pdf Stream.</param>
      <param name="blankPageStream">The Pdf Stream with blank page</param>
      <param name="outputStream">Output Pdf Stream.</param>
      <returns> True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Stream stream1 = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream stream2 = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
            Stream blank = new FileStream("blank.pdf", FileMode.Open, FileAccess.Read);
            Stream outstream = new FileStream("outfile.pdf", FileMode.Create, FileAccess.Write);
            fileEditor.Concatenate(new Stream[] { stream1, stream2, blank } , outstream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Append(System.IO.Stream,System.IO.Stream[],System.Int32,System.Int32,System.IO.Stream)">
      <summary>
            Appends pages, which are chosen from array of documents in portStreams.
            The result document includes firstInputFile and all portStreams documents pages in the range startPage to endPage.
            </summary>
      <param name="inputStream">Input Pdf stream.</param>
      <param name="portStreams">Documents to copy pages from.</param>
      <param name="startPage">Page starts in portStreams documents.</param>
      <param name="endPage">Page ends in portStreams documents .</param>
      <param name="outputStream">Output Pdf stream.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Stream instream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream stream1 = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream stream2 = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
            Stream outstream = new FileStream("outfile.pdf", FileMode.Create, FileAccess.Write);
            fileEditor.Append(instream, new Stream[] { stream1, stream2}, 3, 5, outstream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Append(System.String,System.String[],System.Int32,System.Int32,System.String)">
      <summary>
            Appends pages, which are chosen from portFiles documents. 
            The result document includes firstInputFile and all portFiles documents pages in the range startPage to endPage.
            </summary>
      <param name="inputFile">Input Pdf file.</param>
      <param name="portFiles">Documents to copy pages from.</param>
      <param name="startPage">Page starts in portFiles documents.</param>
      <param name="endPage">Page ends in portFiles documents .</param>
      <param name="outputFile">Output Pdf document.</param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            fileEditor.Append("input.pdf", new string[] { "file1.pdf", "file2.pdf"}, 3, 5, "outfile.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Append(System.String,System.String,System.Int32,System.Int32,System.String)">
      <summary>
            Appends pages, which are chosen from portFile within the range from startPage to endPage, in portFile at the end of firstInputFile.
            </summary>
      <param name="inputFile">Input Pdf file.</param>
      <param name="portFile">Pages from Pdf file.</param>
      <param name="startPage">Page starts in portFile.</param>
      <param name="endPage">Page ends in portFile.</param>
      <param name="outputFile">Output Pdf document.</param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            fileEditor.Append("input.pdf", "file1.pdf",  3, 5, "outfile.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Append(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32,System.IO.Stream)">
      <summary>
             Appends pages,which are chosen from portStream within the range from startPage to endPage, in portStream at the end of firstInputStream.
            </summary>
      <param name="inputStream">Input file Stream.</param>
      <param name="portStream">Pages from Pdf file Stream.</param>
      <param name="startPage">Page starts in portFile Stream.</param>
      <param name="endPage">Page ends in portFile Stream.</param>
      <param name="outputStream">Output Pdf file Stream.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Stream instream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream stream1 = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream outstream = new FileStream("outfile.pdf", FileMode.Create, FileAccess.Write);
            fileEditor.Append(instream, stream1,  3, 5, "outfile.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Insert(System.String,System.Int32,System.String,System.Int32,System.Int32,System.String)">
      <summary>
            Inserts pages from an other file into the Pdf file at a position. 
            </summary>
      <param name="inputFile">Input Pdf file.</param>
      <param name="insertLocation">Position in input file.</param>
      <param name="portFile">The porting Pdf file.</param>
      <param name="startPage">Start position in portFile.</param>
      <param name="endPage">End position in portFile.</param>
      <param name="outputFile">Output Pdf file.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.Insert("file1.pdf", 1, "file2.pdf", 2, 6, "out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Insert(System.IO.Stream,System.Int32,System.IO.Stream,System.Int32,System.Int32,System.IO.Stream)">
      <summary>
            Inserts pages from an other file into the input Pdf file.
            </summary>
      <param name="inputStream">Input Stream of  Pdf file. </param>
      <param name="insertLocation">Insert position in input file.</param>
      <param name="portStream">Stream of Pdf file for pages.</param>
      <param name="startPage">From which page to start.</param>
      <param name="endPage">To which page to end.</param>
      <param name="outputStream">Output Stream.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream insertedStream = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
            Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
            pfe.Insert(sourceStream, 1, insertedStream, 2, 6, outStream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Insert(System.String,System.Int32,System.String,System.Int32[],System.String)">
      <summary>
            Inserts pages from an other file into the input Pdf file.
            </summary>
      <param name="inputFile">Input Pdf file.</param>
      <param name="insertLocation">Insert position in input file.</param>
      <param name="portFile">Pages from the Pdf file.</param>
      <param name="pageNumber">The page number of the ported in portFile.</param>
      <param name="outputFile">Output Pdf file.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream insertedStream = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
            Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
            pfe.Insert(sourceStream, 1, insertedStream, 2, 6, outStream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Insert(System.IO.Stream,System.Int32,System.IO.Stream,System.Int32[],System.IO.Stream)">
      <summary>
            Inserts pages from an other file into the input Pdf file.
            </summary>
      <param name="inputStream">Input Stream of  Pdf file. </param>
      <param name="insertLocation">Insert position in input file.</param>
      <param name="portStream">Stream of Pdf file for pages.</param>
      <param name="pageNumber">The page number of the ported in portFile.</param>
      <param name="outputStream">Output Stream.</param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream insertedStream = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
            Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
            pfe.Insert(sourceStream, 1, insertedStream, new int[] { 3, 4, 5}, outStream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Delete(System.String,System.Int32[],System.String)">
      <summary>
            Deletes pages specified by number array from input file, saves as a new Pdf file. 
             </summary>
      <param name="inputFile">Input file path.</param>
      <param name="pageNumber">Index of page out of the input file.</param>
      <param name="outputFile">Output file path.</param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
             PdfFileEditor pfe = new PdfFileEditor();
             pfe.Delete("input.pdf", new int[] { 2, 3 }, "out.pdf");
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Delete(System.IO.Stream,System.Int32[],System.IO.Stream)">
      <summary>
            Deletes pages specified by number array from input file, saves as a new Pdf file. 
            </summary>
      <param name="inputStream">Input file Stream.</param>
      <param name="pageNumber">Index of page out of the input file.</param>
      <param name="outputStream">Output file stream.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream intputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
            pfe.Delete(inputStream, new int[] { 2, 3 }, outputStream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Extract(System.String,System.Int32,System.Int32,System.String)">
      <summary>
            Extracts pages from input file,saves as a new Pdf file.
            </summary>
      <param name="inputFile">Input Pdf file path.</param>
      <param name="startPage">Start page number.</param>
      <param name="endPage">End page number.</param>
      <param name="outputFile">Output Pdf file path.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.Extract("input.pdf", 3, 7, "output.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Extract(System.String,System.Int32[],System.String)">
      <summary>
            Extracts pages specified by number array, saves as a new PDF file. 
             </summary>
      <param name="inputFile">Input file path.</param>
      <param name="pageNumber">Index of page out of the input file.</param>
      <param name="outputFile">Output file path.</param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
             PdfFileEditor pfe = new PdfFileEditor();
             pfe.Extract("input.pdf", new int[] { 3, 5, 7 }, "output.pdf");
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Extract(System.IO.Stream,System.Int32,System.Int32,System.IO.Stream)">
      <summary>
            Extracts pages from input file,saves as a new Pdf file.
            </summary>
      <param name="inputStream">Input file Stream.</param>
      <param name="startPage">Start page number.</param>
      <param name="endPage">End page number.</param>
      <param name="outputStream">Output Pdf file Stream.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
            pfe.Extract(sourceStream, 1, 3, 6, outStream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.Extract(System.IO.Stream,System.Int32[],System.IO.Stream)">
      <summary>
            Extracts pages specified by number array, saves as a new Pdf file. 
            </summary>
      <param name="inputStream">Input file Stream.</param>
      <param name="pageNumber">Index of page out of the input file.</param>
      <param name="outputStream">Output file stream.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
            pfe.Extract(sourceStream, new int[] { 3, 5, 8 }, outStream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitFromFirst(System.String,System.Int32,System.String)">
      <summary>
            Splits Pdf file from first page to specified location,and saves the front part as a new file.
            </summary>
      <param name="inputFile">Source Pdf file.</param>
      <param name="location">The splitting point.</param>
      <param name="outputFile">Output Pdf file.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.SplitFromFirst("input.pdf", 5, "out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitFromFirst(System.IO.Stream,System.Int32,System.IO.Stream)">
      <summary>
            Splits from start to specified location,and saves the front part in output Stream.
            </summary>
      <param name="inputStream">Source Pdf file Stream.</param>
      <param name="location">The splitting point.</param>
      <param name="outputStream">Output file Stream.</param>
      <returns>True for success, or false.</returns>
      <remarks>The streams are NOT closed after this operation.</remarks>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
            pfe.SplitFromFirst(sourceStream, 5, outStream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitToEnd(System.String,System.Int32,System.String)">
      <summary>
            Splits from location, and saves the rear part as a new file.
            </summary>
      <param name="inputFile">Source Pdf file.</param>
      <param name="location">The splitting position.</param>
      <param name="outputFile">Output Pdf file path.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.SplitToEnd("input.pdf", 5, "out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitToEnd(System.IO.Stream,System.Int32,System.IO.Stream)">
      <summary>
            Splits from specified location, and saves the rear part as a new file Stream.
            </summary>
      <param name="inputStream">Source Pdf file Stream.</param>
      <param name="location">The splitting position.</param>
      <param name="outputStream">Output Pdf file Stream.</param>
      <returns>True for success, or false.</returns>
      <remarks>The streams are NOT closed after this operation unless CloseConcatedStreams is specified.</remarks>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
            Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
            pfe.SplitToEnd(sourceStream, 5, outStream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeBooklet(System.String,System.String)">
      <summary> Makes booklet from the input file to output file.
            </summary>
      <param name="inputFile">Input pdf file path and name.
            </param>
      <param name="outputFile">Output pdf file path and name.
            </param>
      <returns> boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.MakeBooklet("input.pdf", "output.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeBooklet(System.IO.Stream,System.IO.Stream)">
      <summary> Makes booklet from the InputStream to outputStream.
            </summary>
      <param name="inputStream">Input pdf stream.
            </param>
      <param name="outputStream">output pdf stream.
            </param>
      <returns> True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream inputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
            pfe.MakeBooklet(inputStream, outputStream);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeBooklet(System.String,System.String,Aspose.Pdf.PageSize)">
      <summary> Makes booklet from the inputFile to outputFile.
            </summary>
      <param name="inputFile">Input pdf file path and name.
            </param>
      <param name="outputFile">Output pdf file path and name.
            </param>
      <param name="pageSize">The page size of the output pdf file.
            </param>
      <returns>True if operation is succeeded.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.MakeBooklet("input.pdf", "output.pdf", PageSize.A4);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeBooklet(System.IO.Stream,System.IO.Stream,Aspose.Pdf.PageSize)">
      <summary> Makes booklet from the input stream and save result into output stream.
            </summary>
      <param name="inputStream">Input PDF stream.
            </param>
      <param name="outputStream">output pdf stream.
            </param>
      <param name="pageSize">The page size of the output pdf file.
            </param>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream inputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
            pfe.MakeBooklet(inputStream, outputStream, PageSize.A4);
            </code>
      </example>
      <returns>True if operation was succeeded.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeBooklet(System.String,System.String,System.Int32[],System.Int32[])">
      <summary>
            Makes customized booklet from the firstInputFile to outputFile.
            </summary>
      <param name="inputFile">The input file.</param>
      <param name="outputFile">Output pdf file path and name.</param>
      <param name="leftPages">The left pages of the booklet.</param>
      <param name="rightPages">The right pages of the booklet.</param>
      <returns>boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.MakeBooklet("input.pdf", "output.pdf", new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeBooklet(System.IO.Stream,System.IO.Stream,System.Int32[],System.Int32[])">
      <summary>
            Makes customized booklet from the firstInputStream to outputStream.
            </summary>
      <param name="inputStream">The input stream.</param>
      <param name="outputStream">output pdf stream.</param>
      <param name="leftPages">The left pages.</param>
      <param name="rightPages">The right pages.</param>
      <returns>boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream inputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
            pfe.MakeBooklet(inputStream, outputStream, new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeBooklet(System.String,System.String,Aspose.Pdf.PageSize,System.Int32[],System.Int32[])">
      <summary>
            Makes customized booklet from the firstInputFile to outputFile.
            </summary>
      <param name="inputFile">The input file.</param>
      <param name="outputFile">Output pdf file path and name.</param>
      <param name="pageSize">The page size of the output pdf file.</param>
      <param name="leftPages">The left pages.</param>
      <param name="rightPages">The right pages.</param>
      <returns>boolean - True for success, or false. </returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.MakeBooklet("input.pdf", "output.pdf", PageSize.A4, new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeBooklet(System.IO.Stream,System.IO.Stream,Aspose.Pdf.PageSize,System.Int32[],System.Int32[])">
      <summary>
            Makes booklet from the firstInputStream to outputStream.
            </summary>
      <param name="inputStream">The input stream.</param>
      <param name="outputStream">output pdf stream.</param>
      <param name="pageSize">The page size of the output pdf file.</param>
      <param name="leftPages">The left pages.</param>
      <param name="rightPages">The right pages.</param>
      <returns>boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream inputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
            pfe.MakeBooklet(inputStream, outputStream, PageSize.A4, new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeNUp(System.String,System.String,System.Int32,System.Int32)">
      <summary> Makes N-Up document from the firstInputFile to outputFile.
            </summary>
      <param name="inputFile">Input pdf file path and name.
            </param>
      <param name="outputFile">Output pdf file path and name.
            </param>
      <param name="x">Number of columns.
            </param>
      <param name="y">Number of rows.
            </param>
      <returns> boolean - True for success, or false. </returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.MakeNUp("input.pdf", "output.pdf", 3, 3);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeNUp(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32)">
      <summary> Makes N-Up document from the input stream and saves result into output stream.
            </summary>
      <param name="inputStream">Input pdf stream.
            </param>
      <param name="outputStream">Output pdf stream.
            </param>
      <param name="x">Number of columns.
            </param>
      <param name="y">Number of rows.
            </param>
      <returns> boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream inputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
            pfe.MakeNUp(inputStream, outputStream, 3, 3);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeNUp(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32,Aspose.Pdf.PageSize)">
      <summary> Makes N-Up document from the first input stream to output stream.
            </summary>
      <param name="inputStream">Input pdf stream.
            </param>
      <param name="outputStream">Output pdf stream.
            </param>
      <param name="x">Number of columns.
            </param>
      <param name="y">Number of rows.
            </param>
      <param name="pageSize">The page size of the output pdf file.
            </param>
      <returns>True if operation was succeeded.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream inputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
            pfe.MakeNUp(inputStream, outputStream, 3, 3, PageSize.A4);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeNUp(System.String,System.String,System.String)">
      <summary> Makes N-Up document from the two input PDF files to outputFile. 
            Each page of outputFile will contain two pages, one page is from the first input file 
            and another is from the second input file. The two pages are piled up horizontally. 
            </summary>
      <param name="firstInputFile">first input file.
            </param>
      <param name="secondInputFile">second input file.
            </param>
      <param name="outputFile">Output pdf file path and name.
            </param>
      <returns> boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.MakeNUp("input1.pdf", "input2.pdf", "output.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeNUp(System.IO.Stream,System.IO.Stream,System.IO.Stream)">
      <summary> Makes N-Up document from the two input PDF streams to outputStream.
            </summary>
      <param name="firstInputStream">first input stream.
            </param>
      <param name="secondInputStream">second input stream.
            </param>
      <param name="outputStream">Output pdf stream.
            </param>
      <returns> boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream input1 = new FileStream("input1.pdf", FileMode.Open, FileAccess.Read);
            Stream input2 = new FileStream("input2.pdf", FileMode.Open, FileAccess.Read);
            Stream output = new FileStream("output.pdf");
            pfe.MakeNUp(input1, input2, output);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeNUp(System.String[],System.String,System.Boolean)">
      <summary> Makes N-Up document from the multi input PDF files to outputFile. 
            Each page of outputFile will contain multi pages, which are combination with pages 
            in the input files of the same page number. The multi pages piled up horizontally 
            if isSidewise is true and piled up vertically if isSidewise is false. 
            </summary>
      <param name="inputFiles">Input Pdf files.</param>
      <param name="outputFile">Output pdf file path and name.
            </param>
      <param name="isSidewise">Piled up way, true for horizontally and flase for vertically.</param>
      <returns> boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.MakeNUp(new string[] { "input1.pdf", "input2.pdf", "input3.pdf" }, "output.pdf", false);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeNUp(System.IO.Stream[],System.IO.Stream,System.Boolean)">
      <summary> Makes N-Up document from the multi input PDF streams to outputStream.
            Each page of outputStream will contain multi pages, which are combination with pages 
            in the input streams of the same page number. The multi-pages piled up horizontally 
            if isSidewise is true and piled up vertically if isSidewise is false.
            </summary>
      <param name="inputStreams">Input Pdf streams.</param>
      <param name="outputStream">Output pdf stream.
            <param name="isSidewise">Piled up way, true for horizontally and flase for vertically</param></param>
      <returns> boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            Stream stream1 = new FileStream("input1.pdf", FileMode.Open, FileAccess.Read);
            Stream stream2 = new FileStream("input2.pdf", FileMode.Open, FileAccess.Read);
            Stream stream3 = new FileStream("input3.pdf", FileMode.Open, FileAccess.Read);
            Stream output = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
            pfe.MakeNUp(new Stream[] { stream1, stream2, stream3 }, output, false);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.MakeNUp(System.String,System.String,System.Int32,System.Int32,Aspose.Pdf.PageSize)">
      <summary> Makes N-Up document from the input file to outputFile.
            </summary>
      <param name="inputFile">Input pdf file path and name.
            </param>
      <param name="outputFile">Output pdf file path and name.
            </param>
      <param name="x">Number of columns.
            </param>
      <param name="y">Number of rows.
            </param>
      <param name="pageSize">The page size of the output pdf file.
            </param>
      <returns> boolean - True for success, or false.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor pfe = new PdfFileEditor();
            pfe.MakeNUp("input.pdf", "output.pdf", 3, 3, PageSize.A4);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitToPages(System.String)">
      <summary>
            Splits the PDF file into single-page documents.
            </summary>
      <param name="inputFile">Input PDF file name.</param>
      <returns>Output PDF streams, each stream buffers a single-page PDF document.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitToPages(System.IO.Stream)">
      <summary>
            Splits the Pdf file into single-page documents.
            </summary>
      <param name="inputStream">Input Pdf stream.</param>
      <returns>Array of memory streams which contain pages of the document.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitToPages(System.String,System.String)">
      <summary>
            Split the Pdf file into single-page documents and saves it into specified path. Path is specifield by field name temaplate.
            </summary>
      <param name="inputFile">Input file name.</param>
      <param name="fileNameTemplate">Template of resultant file name. Must contain %NUM% which is replaced with page number. For example, if c:/dir/page%NUM%.pdf is specified, resultant files will have the following names: c:/dir/page1.pdf, c:/dir/page2.pdf etc.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitToPages(System.IO.Stream,System.String)">
      <summary>
            Split the Pdf file into single-page documents and saves it into specified path. Path is specifield by field name temaplate.
            </summary>
      <param name="inputStream">Stream of the soruce document.</param>
      <param name="fileNameTemplate">Template of resultant file name. Must contain %NUM% which is replaced with page number. For example, if c:/dir/page%NUM%.pdf is specified, resultant files will have the following names: c:/dir/page1.pdf, c:/dir/page2.pdf etc.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitToBulks(System.String,System.Int32[][])">
      <summary>
            Splits the Pdf file into several documents.The documents can be single-page or multi-pages.
            </summary>
      <param name="inputFile">Input PDF file.</param>
      <param name="numberOfPage">Array which contains array of double elements, which is start and end pages of document.</param>
      <returns>Output PDF streams, each stream buffers a PDF document.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.SplitToBulks(System.IO.Stream,System.Int32[][])">
      <summary>
            Splits the Pdf file into several documents.The documents can be single-page or multi-pages.
            </summary>
      <param name="inputStream">Input PDF stream.</param>
      <param name="numberOfPage">The start page and the end page of each document.</param>
      <returns>Output PDF streams, each stream buffers a PDF document.</returns>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.LastException">
      <summary>
            Gets last occured exception. May be used to check the reason of failure when AllowconcatenateExceptions = false.
            </summary>
      <example>
        <code lang="C#">
             PdfFileEditor pfe = new PdfFileEditor();
               pfe.AllowConcatenateExceptions = false;
               if (!pfe.Concatenate("file1.pdf", "file2.pdf", "file3.pdf"))
               {
                  Console.WriteLine("Error occured:");
                  if (pfe.LastException != null)
                  {
                     Console.WriteLine(pfe.LastException.Message);
                     if (pfe.LastException.InnerException != null)
                       Console.WriteLine(pfe.LastException.InnerException.Message);
                  }
               }
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ResizeContents(System.IO.Stream,System.IO.Stream,System.Int32[],Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters)">
      <summary>
            Resizes contents of pages of the document.
            </summary>
      <param name="source">Stream with source document.</param>
      <param name="destination">Stream with the destination document.</param>
      <param name="pages">Array of page indexes.</param>
      <param name="parameters">Resize parameters.</param>
      <returns>Returns true if success.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Stream src = new Stream("input.pdf", FileMode.Open);
            Stream dest = new Stream("output.pdf", FileMode.Create);
            PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters(
                //left margin = 10% of page width
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //new contents width calculated automatically as width - left margin - right margin (100% - 10% - 10% = 80%)
                null,
                //right margin is 10% of page 
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //top margin = 10% of height
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //new contents height is calculated automatically (similar to width)
                null,
                //bottom margin is 10%
                PdfFileEditor.ContentsResizeValue.Percents(10)
                   );
            fileEditor.ResizeContents(src, dest, new int[] { 1, 2,.3}, parameters);
            dest.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ResizeContents(System.IO.Stream,System.IO.Stream,System.Int32[],System.Double,System.Double)">
      <summary>
            Resizes contents of document pages. 
            Shrinks contents of page and adds margins.
            New size of contents is specified in default space units.
            </summary>
      <param name="source">Stream which contains source document.</param>
      <param name="destination">Stream where resultant document will be saved.</param>
      <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
      <param name="newWidth">New width of page contents in default space units.</param>
      <param name="newHeight">New height of page contents in default space units.</param>
      <returns>True if resize was successful.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Stream src = new Stream("input.pdf", FileMode.Open);
            Stream dest = new Stream("output.pdf", FileMode.Create);
            fileEditor.ResizeContents(src, dest, 
            //resize all pages of document
            null, 
            //new contents width = 200
            200, 
            //new contents height = 300
            300);
            // rest area of page will be empty
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ResizeContentsPct(System.IO.Stream,System.IO.Stream,System.Int32[],System.Double,System.Double)">
      <summary>
            Resizes contents of document pages.
            Shrinks contents of page and adds margins.
            New contents size is specified in percents.
            </summary>
      <param name="source">Stream which contains source document.</param>
      <param name="destination">Stream where resultant document will be saved.</param>
      <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
      <param name="newWidth">New width of page contents in percents.</param>
      <param name="newHeight">New height of page contents in percetns.</param>
      <returns>true if resized sucessfully.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Stream src = new Stream("input.pdf", FileMode.Open);
            Stream dest = new Stream("output.pdf", FileMode.Create);
            fileEditor.ResizePct(src, dest, 
            //resize all pages of document
            null, 
            //new contents width = 60% of initial size
            60, 
            //new contents height = 60% of initial size
            60);
            // Rest area of page will be empty (page margins).  Size of left and right margins is (100% - 60%) / 2 = 20%
            // The same for top and bottom margins.
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.AddMargins(System.IO.Stream,System.IO.Stream,System.Int32[],System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Resizes page contents and add specifed margins. 
            Margins are specified in default space units.
            </summary>
      <param name="source">Stream which contains source document.</param>
      <param name="destination">Stream where resultant document will be saved.</param>
      <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
      <param name="leftMargin">Left margin.</param>
      <param name="rightMargin">Right margin.</param>
      <param name="topMargin">Top margin.</param>
      <param name="bottomMargin">Bottom margin.</param>
      <returns>true if operation was successful.</returns>
      <example>
        <code lang="C#">
             PdfFileEditor fileEditor = new PdfFileEditor();
             Stream src = new Stream("input.pdf", FileMode.Open);
             Stream dest = new Stream("output.pdf", FileMode.Create);
             fileEditor.AddMargins(src, dest, 
                 //process pages 1, 2, 3
                 new int[] { 1, 2, 3}, 
                 //left margin is 10 units
                 10, 
                 //right margin is 5 units
                 5, 
                 //top margin is 5 units
                 5, 
                 //bottom margin is 5 units
                 5);
                 dest.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.AddMarginsPct(System.IO.Stream,System.IO.Stream,System.Int32[],System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Resizes page contents and add specified margins.
            Margins are specified in percents of intitial page size.
            </summary>
      <param name="source">Stream which contains source document.</param>
      <param name="destination">Stream where resultant document will be saved.</param>
      <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
      <param name="leftMargin">Left margin in percents of initial page size.</param>
      <param name="rightMargin">Right margin in percents of initial page size.</param>
      <param name="topMargin">Top margin in percents of initial page size.</param>
      <param name="bottomMargin">Bottom margin in percents of initial page size. </param>
      <returns>true if action was performed successfully.</returns>
      <example>
        <code lang="C#">
             PdfFileEditor fileEditor = new PdfFileEditor();
             Stream src = new Stream("input.pdf", FileMode.Open);
             Stream dest = new Stream("output.pdf", FileMode.Create);
             fileEditor.AddMarginsPct(src, dest, 
                 //process pages 1, 2, 3
                 new int[] { 1, 2, 3}, 
                 //left margin is 15% of page width 
                 15, 
                 //right margin is 10% of page width
                 10, 
                 //top margin is 20% of page width
                 20, 
                 //bottom margin is 5% of page width
                 5);
                 dest.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ResizeContents(System.String,System.String,System.Int32[],System.Double,System.Double)">
      <summary>
            Resizes contents of document pages. 
            Shrinks contents of page and adds margins.
            New size of contents is specified in default space units.
            </summary>
      <param name="source">Path to source document.</param>
      <param name="destination">Path where resultant document will be saved.</param>
      <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
      <param name="newWidth">New width of page contents in default space units.</param>
      <param name="newHeight">New height of page contents in default space units.</param>
      <returns>true if resize was successful.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            fileEditor.ResizeContents("input.pdf", "output.pdf", 
            //resize all pages of document
            null, 
            //new contents width = 200
            200, 
            //new contents height = 300
            300);
            // rest area of page will be empty
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ResizeContentsPct(System.String,System.String,System.Int32[],System.Double,System.Double)">
      <summary>
            Resizes contents of document pages.
            Shrinks contents of page and adds margins.
            New contents size is specified in percents.
            </summary>
      <param name="source">Path to source document.</param>
      <param name="destination">Path where resultant document will be saved.</param>
      <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
      <param name="newWidth">New width of page contents in percents.</param>
      <param name="newHeight">New height of page contents in percetns.</param>
      <returns>true if resize was successful.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            fileEditor.ResizePct("input.pdf", "output.pdf",
            //resize all pages of document
            null, 
            //new contents width = 60% of initial size
            60, 
            //new contents height = 60% of initial size
            60);
            // Rest area of page will be empty (page margins).  Size of left and right margins is (100% - 60%) / 2 = 20%
            // The same for top and bottom margins.
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.AddMargins(System.String,System.String,System.Int32[],System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Resizes page contents and add specifed margins. 
            Margins are specified in default space units.
            </summary>
      <param name="source">Path to source document.</param>
      <param name="destination">Path where resultant document will be saved.</param>
      <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
      <param name="leftMargin">Left margin.</param>
      <param name="rightMargin">Right margin.</param>
      <param name="topMargin">Top margin.</param>
      <param name="bottomMargin">Bottom margin.</param>
      <returns>true if resize was successful.</returns>
      <example>
        <code lang="C#">
             PdfFileEditor fileEditor = new PdfFileEditor();
             fileEditor.AddMargins("input.pdf", "output.pdf", 
                 //process pages 1, 2, 3
                 new int[] { 1, 2, 3}, 
                 //left margin is 10 units
                 10, 
                 //right margin is 5 units
                 5, 
                 //top margin is 5 units
                 5, 
                 //bottom margin is 5 units
                 5);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.AddMarginsPct(System.String,System.String,System.Int32[],System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Resizes page contents and add specified margins.
            Margins are specified in percents of intitial page size.
            </summary>
      <param name="source">Path to source document.</param>
      <param name="destination">Path where resultant document will be saved.</param>
      <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
      <param name="leftMargin">Left margin in percents of initial page size.</param>
      <param name="rightMargin">Right margin in percents of initial page size.</param>
      <param name="topMargin">Top margin in percents of initial page size.</param>
      <param name="bottomMargin">Bottom margin in percents of initial page size. </param>
      <returns>true if resize was successful</returns>
      <example>
        <code lang="C#">
             PdfFileEditor fileEditor = new PdfFileEditor();
             fileEditor.AddMarginsPct("input.pdf", "output.pdf", 
                 //process pages 1, 2, 3
                 new int[] { 1, 2, 3}, 
                 //left margin is 15% of page width 
                 15, 
                 //right margin is 10% of page width
                 10, 
                 //top margin is 20% of page width
                 20, 
                 //bottom margin is 5% of page width
                 5);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ResizeContents(System.String,System.String,System.Int32[],Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters)">
      <summary>
            Resizes contents of pages in document. If page is shrinked blank margins are added around the page.
            </summary>
      <param name="source">Source document path.</param>
      <param name="destination">Destination document path.</param>
      <param name="pages">Array of page indexes (page index starts from 1).</param>
      <param name="parameters">Parameters of page resize.</param>
      <returns>trure if resize was successful.</returns>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters(
                //left margin = 10% of page width
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //new contents width calculated automatically as width - left margin - right margin (100% - 10% - 10% = 80%)
                null,
                //right margin is 10% of page 
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //top margin = 10% of height
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //new contents height is calculated automatically (similar to width)
                null,
                //bottom margin is 10%
                PdfFileEditor.ContentsResizeValue.Percents(10)
                   );
            fileEditor.ResizeContents("input.pdf", "output.pdf", new int[] { 1, 2,.3}, parameters);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ResizeContents(Aspose.Pdf.Document,System.Int32[],Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters)">
      <summary>
            Resizes pages of document. Blank margins are added around of shrinked page.
            </summary>
      <param name="source">Source document.</param>
      <param name="pages">List of page indexes.</param>
      <param name="parameters">Resize parameters.</param>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Document doc = new Document("input.pdf");
            PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters(
                //left margin = 10% of page width
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //new contents width calculated automatically as width - left margin - right margin (100% - 10% - 10% = 80%)
                null,
                //right margin is 10% of page 
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //top margin = 10% of height
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //new contents height is calculated automatically (similar to width)
                null,
                //bottom margin is 10%
                PdfFileEditor.ContentsResizeValue.Percents(10)
                   );
            fileEditor.ResizeContents(doc, new int[] { 1, 2,.3}, parameters);
            doc.Save("output.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.ResizeContents(Aspose.Pdf.Document,Aspose.Pdf.Facades.PdfFileEditor.ContentsResizeParameters)">
      <summary>
            Resizes pages of document. Blank margins are added around of shrinked page.
            </summary>
      <param name="source">Source document.</param>
      <param name="parameters">Resize parameters.</param>
      <example>
        <code lang="C#">
            PdfFileEditor fileEditor = new PdfFileEditor();
            Document doc = new Document("input.pdf");
            PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters(
                //left margin = 10% of page width
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //new contents width calculated automatically as width - left margin - right margin (100% - 10% - 10% = 80%)
                null,
                //right margin is 10% of page 
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //top margin = 10% of height
                PdfFileEditor.ContentsResizeValue.Percents(10),
                //new contents height is calculated automatically (similar to width)
                null,
                //bottom margin is 10%
                PdfFileEditor.ContentsResizeValue.Percents(10)
                   );
            fileEditor.ResizeContents(doc, parameters);
            doc.Save("output.pdf");
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfFileEditor.PageBreak">
      <summary>
            Data of page break position.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.PageBreak.PageNumber">
      <summary>
            Number of page (starting from 1) where page break must be added.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileEditor.PageBreak.Position">
      <summary>
            Vertical position of page break.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.PageBreak.#ctor(System.Int32,System.Double)">
      <summary>
            Constructor to create PageBreak object.
            </summary>
      <param name="pageNumber">Number of page where page break is placed.</param>
      <param name="position">Vertical position of page break.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.AddPageBreak(Aspose.Pdf.Document,Aspose.Pdf.Document,Aspose.Pdf.Facades.PdfFileEditor.PageBreak[])">
      <summary>
            Adds page breaks into document pages. 
            </summary>
      <param name="src">Source document.</param>
      <param name="dest">Destination document.</param>
      <param name="pageBreaks">Array of PageBreak objects which describe places of page breaks.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.AddPageBreak(System.String,System.String,Aspose.Pdf.Facades.PdfFileEditor.PageBreak[])">
      <summary>
            Adds page breaks into document pages. 
            </summary>
      <param name="src">Path to source document.</param>
      <param name="dest">Path to destination document.</param>
      <param name="pageBreaks">Array of PageBreak object describing pages and places where page break will be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileEditor.AddPageBreak(System.IO.Stream,System.IO.Stream,Aspose.Pdf.Facades.PdfFileEditor.PageBreak[])">
      <summary>
            Adds page breaks into document pages. 
            </summary>
      <param name="src">Source which contains source document.</param>
      <param name="dest">Source where destination document will be saved.</param>
      <param name="pageBreaks">Array of PageBreak object describing pages and places where page break will be added.</param>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfFileInfo">
      <summary>
            Represents a class for accessing meta information of PDF document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.BindPdf(Aspose.Pdf.Document)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcDoc">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.Author">
      <summary>
            Gets or sets the Author information of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.IsEncrypted">
      <summary>
            Checkes whether the PDF document is encrypted.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.IsPdfFile">
      <summary>
            Checkes whether the source input is a valid PDF file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.CreationDate">
      <summary>
            Gets or sets the CreationDate information of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.Creator">
      <summary>
            Gets or sets the Creator information of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.HasCollection">
      <summary>
            Returns true if the current input file is a 'Portfolio' file containing collection of PDF files in it.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.Header">
      <summary>
            Gets or sets the customized information of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.InputFile">
      <summary>
            Gets or sets the input file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.InputStream">
      <summary>
            Gets or sets the input stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.Keywords">
      <summary>
            Gets or sets the Keywords information of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.ModDate">
      <summary>
            Gets or sets the ModDate date information of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.NumberOfPages">
      <summary>
            Gets the number of document pages.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.Producer">
      <summary>
            Gets the Producer information of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.Subject">
      <summary>
            Gets or sets the Subject information of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.Title">
      <summary>
            Gets or sets the Title information of PDF document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.#ctor">
      <summary>
            Initializes a new instance of the Aspose.Pdf.Facades.PdfFileInfo class with default values.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the Aspose.Pdf.Facades.PdfFileInfo class.
            </summary>
      <param name="inputStream">Stream where input file is placed.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.#ctor(System.IO.Stream,System.String)">
      <summary>
            Initializes a new instance of the Aspose.Pdf.Facades.PdfFileInfo class.
            </summary>
      <param name="inputStream">Stream where input file is placed.</param>
      <param name="password">Password for access to file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.#ctor(System.String)">
      <summary>
            Initializes a new instance of the Aspose.Pdf.Facades.PdfFileInfo class.
            </summary>
      <param name="inputFile">Name of file containing input file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the Aspose.Pdf.Facades.PdfFileInfo class.
            </summary>
      <param name="inputFile">Name of file containing input file.</param>
      <param name="password">Password for access to file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.ClearInfo">
      <summary>
            Clears all meta information of PDF document.
            </summary>
      <example>
        <code lang="C#">
        </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.GetDocumentPrivilege">
      <summary>
            Gets the PDF document privilege settings.
            </summary>
      <returns>The PDF document privilege settings.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.GetMetaInfo(System.String)">
      <summary>
            Gets customized information of PDF document with property name. If there is no property match the name it will return a blank string.
            </summary>
      <param name="name">Custom meta property key.</param>
      <returns>Custom meta property value.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.GetPageHeight(System.Int32)">
      <summary>
            Gets the height of the specified page.
            </summary>
      <param name="pageNum">Page number.</param>
      <returns>The height of the page.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.GetPageRotation(System.Int32)">
      <summary>
            Gets the rotation of the specified page.
            </summary>
      <param name="pageNum">Page number.</param>
      <returns>The rotation of the page. The value may be 0,90,180,270.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.GetPageWidth(System.Int32)">
      <summary>
            Gets the width of the specified page.
            </summary>
      <param name="pageNum">Page number.</param>
      <returns>The width of the page.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.GetPageXOffset(System.Int32)">
      <summary>
            Gets the horizontal offset of the specified page display area.
            </summary>
      <param name="pageNum">Page number.</param>
      <returns>The horizontal offset from the left side of the page.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.GetPageYOffset(System.Int32)">
      <summary>
            Gets the vertical offset of the specified page display area.
            </summary>
      <param name="pageNum">Page number.</param>
      <returns>The vertical offset of the page display area.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.GetPdfVersion">
      <summary>
            Gets the version info of PDF document.
            </summary>
      <returns>The version string.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.SaveNewInfo(System.IO.Stream)">
      <summary>
            Save updated PDF document into specified stream.
            </summary>
      <param name="outputStream">Output stream.</param>
      <returns>True if success otherwise is false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.SaveNewInfo(System.String)">
      <summary>
            Save updated PDF document into specified file.
            </summary>
      <param name="outputFile">Output file.</param>
      <returns>True if success otherwise is false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.Save(System.IO.Stream)">
      <summary>
            Saves the PDF document to the specified file.
            </summary>
      <param name="destStream">The destination stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.Save(System.String)">
      <summary>
            Saves the PDF document to the specified file.
            </summary>
      <param name="destFile">The destination file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.SetMetaInfo(System.String,System.String)">
      <summary>
            Sets customized information of PDF document.
            </summary>
      <param name="name">Custom meta property key.</param>
      <param name="value">Custom meta property value.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.SaveNewInfoWithXmp(System.String)">
      <summary>
            Changes the properties specified explicitly by setting file information, other properties remain.
            </summary>
      <param name="outputFileName">Output file.</param>
      <returns>True for success, or false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileInfo" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">Pdf document.</param>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.PasswordType">
      <summary>
            Returns the type of password which was passed for creating PdfFileInfo instance. See possible values in <see cref="P:Aspose.Pdf.Facades.PdfFileInfo.PasswordType" />.
            Pay attention that pdf document can be opened using both user (or open) password and owner (or permissions, edit) password.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.HasOpenPassword">
      <summary>
            Returns true if password is needed to open password protected pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileInfo.HasEditPassword">
      <summary>
            Returns true if password is needed to modify permissions or document security property.
            Pay attention that this property can be read only if valid password was provided in <see cref="T:Aspose.Pdf.Facades.PdfFileInfo" /> constructor.
            In case PasswordType is Inaccessible (means that invalid password was provided) reading this property will fail with <see cref="T:Aspose.Pdf.InvalidPasswordException" />.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileInfo.Close">
      <summary>
            Deinitializes the instance.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfFileMend">
      <summary>
            Represents a class for adding texts and images on the pages of existing PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileMend.InputStream">
      <summary>
            Sets the input stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileMend.OutputStream">
      <summary>
            Sets the output stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileMend.InputFile">
      <summary>
            Sets the input file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileMend.OutputFile">
      <summary>
            Sets the output file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileMend.IsWordWrap">
      <summary>
            Sets a bool value that indicates word wrap in AddText methods.
            If the value is true, the text in FormattedText will word wrap.
            By defalt, the value is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileMend.WrapMode">
      <summary>
            Sets or gets word wrapping algorithm. See WordWrapMode and IsWordWrap.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileMend.TextPositioningMode">
      <summary>
            Sets or gets text positioning strategy. <see cref="T:Aspose.Pdf.Facades.PositioningMode" />
            Default mode is Legacy.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddImage(System.IO.Stream,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds image to the specified page of PDF document at specified coordinates.
            </summary>
      <param name="imageStream">Input image stream.</param>
      <param name="pageNum">The number of page that will receive the image.</param>
      <param name="lowerLeftX">The lower left x of image rectangle.</param>
      <param name="lowerLeftY">The lower left y of image rectangle.</param>
      <param name="upperRightX">The upper right x of image rectangle.</param>
      <param name="upperRightY">The upper right y of image rectangle.</param>
      <returns>True if success false otherwise.</returns>
      <example>
        <code lang="C#">
            PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
            using (Stream stream = File.OpenRead("picture.jpg"))
            {
                mendor.AddImage(stream, 1, 10, 10, 100, 100);
            }
            mendor.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddImage(System.IO.Stream,System.Int32,System.Single,System.Single,System.Single,System.Single,Aspose.Pdf.CompositingParameters)">
      <summary>
            Adds image to the specified page of PDF document at specified coordinates.
            </summary>
      <param name="imageStream">Input image stream.</param>
      <param name="pageNum">The number of page that will receive the image.</param>
      <param name="lowerLeftX">The lower left x of image rectangle.</param>
      <param name="lowerLeftY">The lower left y of image rectangle.</param>
      <param name="upperRightX">The upper right x of image rectangle.</param>
      <param name="upperRightY">The upper right y of image rectangle.</param>
      <param name="compositingParameters">The graphics compositing parameters for the image.</param>
      <returns>True if success false otherwise.</returns>
      <example>
        <code lang="C#">
            PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
            using (Stream stream = File.OpenRead("picture.jpg"))
            {
                mendor.AddImage(stream, 1, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply);
            }
            mendor.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddImage(System.IO.Stream,System.Int32[],System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds image to the specified pages of PDF document at specified coordinates.
            </summary>
      <param name="imageStream">Input image stream.</param>
      <param name="pageNums">The numbers of pages that will receive the image.</param>
      <param name="lowerLeftX">The lower left x of image rectangle.</param>
      <param name="lowerLeftY">The lower left y of image rectangle.</param>
      <param name="upperRightX">The upper right x of image rectangle.</param>
      <param name="upperRightY">The upper right y of image rectangle.</param>
      <returns>True if success false otherwise.</returns>
      <example>
        <code lang="C#">
            PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
            using (Stream stream = File.OpenRead("picture.jpg"))
            {
                mendor.AddImage(stream, new int[]{1, 2}, 10, 10, 100, 100);
            }
            mendor.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddImage(System.IO.Stream,System.Int32[],System.Single,System.Single,System.Single,System.Single,Aspose.Pdf.CompositingParameters)">
      <summary>
            Adds image to the specified pages of PDF document at specified coordinates.
            </summary>
      <param name="imageStream">Input image stream.</param>
      <param name="pageNums">The numbers of pages that will receive the image.</param>
      <param name="lowerLeftX">The lower left x of image rectangle.</param>
      <param name="lowerLeftY">The lower left y of image rectangle.</param>
      <param name="upperRightX">The upper right x of image rectangle.</param>
      <param name="upperRightY">The upper right y of image rectangle.</param>
      <param name="compositingParameters">The graphics compositing parameters for the images.</param>
      <returns>True if success false otherwise.</returns>
      <example>
        <code lang="C#">
            PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
            using (Stream stream = File.OpenRead("picture.jpg"))
            {
                mendor.AddImage(stream, new int[]{1, 2}, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply);
            }
            mendor.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddImage(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds image to the specified page of PDF document at specified coordinates.
            </summary>
      <param name="imageName">The path of input image file.</param>
      <param name="pageNum">The number of page that will receive the image.</param>
      <param name="lowerLeftX">The lower left x of image rectangle.</param>
      <param name="lowerLeftY">The lower left y of image rectangle.</param>
      <param name="upperRightX">The upper right x of image rectangle.</param>
      <param name="upperRightY">The upper right y of image rectangle.</param>
      <returns>True if success false otherwise.</returns>
      <example>
        <code lang="C#">
            PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
            mendor.AddImage("picture.jpg", 1, 10, 10, 100, 100);
            mendor.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddImage(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single,Aspose.Pdf.CompositingParameters)">
      <summary>
            Adds image to the specified page of PDF document at specified coordinates.
            </summary>
      <param name="imageName">The path of input image file.</param>
      <param name="pageNum">The number of page that will receive the image.</param>
      <param name="lowerLeftX">The lower left x of image rectangle.</param>
      <param name="lowerLeftY">The lower left y of image rectangle.</param>
      <param name="upperRightX">The upper right x of image rectangle.</param>
      <param name="upperRightY">The upper right y of image rectangle.</param>
      <param name="compositingParameters">The graphics compositing parameters for the images.</param>
      <returns>True if success false otherwise.</returns>
      <example>
        <code lang="C#">
            PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
            mendor.AddImage("picture.jpg", 1, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply));
            mendor.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddImage(System.String,System.Int32[],System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds image to the specified pages of PDF document at specified coordinates.
            </summary>
      <param name="imageName">The path of input image file.</param>
      <param name="pageNums">The numbers of pages that will receive the image.</param>
      <param name="lowerLeftX">The lower left x of image rectangle.</param>
      <param name="lowerLeftY">The lower left y of image rectangle.</param>
      <param name="upperRightX">The upper right x of image rectangle.</param>
      <param name="upperRightY">The upper right y of image rectangle.</param>
      <returns>True if success false otherwise.</returns>
      <example>
        <code lang="C#">
            PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
            mendor.AddImage("picture.jpg", 1, 10, 10, 100, 100);
            mendor.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddImage(System.String,System.Int32[],System.Single,System.Single,System.Single,System.Single,Aspose.Pdf.CompositingParameters)">
      <summary>
            Adds image to the specified pages of PDF document at specified coordinates.
            </summary>
      <param name="imageName">The path of input image file.</param>
      <param name="pageNums">The numbers of pages that will receive the image.</param>
      <param name="lowerLeftX">The lower left x of image rectangle.</param>
      <param name="lowerLeftY">The lower left y of image rectangle.</param>
      <param name="upperRightX">The upper right x of image rectangle.</param>
      <param name="upperRightY">The upper right y of image rectangle.</param>
      <param name="compositingParameters">The graphics compositing parameters for the images.</param>
      <returns>True if success false otherwise.</returns>
      <example>
        <code lang="C#">
            PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
            mendor.AddImage("picture.jpg", 1, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply));
            mendor.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddText(Aspose.Pdf.Facades.FormattedText,System.Int32,System.Single,System.Single)">
      <summary>
            Not implemented.
            </summary>
      <param name="text">FormattedText object.</param>
      <param name="pageNum">Page number.</param>
      <param name="lowerLeftX">Lower left X coordinate.</param>
      <param name="lowerLeftY">Lower left Y coordinate.</param>
      <returns>True in case text was successfully added.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddText(Aspose.Pdf.Facades.FormattedText,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Not implemented.
            </summary>
      <param name="text">FormattedText object.</param>
      <param name="pageNum">Page number.</param>
      <param name="lowerLeftX">Lower left X coordinate.</param>
      <param name="lowerLeftY">Lower left Y coordinate.</param>
      <param name="upperRightX">Upper right X coordinate.</param>
      <param name="upperRightY">Upper right Y coordinate.</param>
      <returns>True in case text was successfully added.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.AddText(Aspose.Pdf.Facades.FormattedText,System.Int32[],System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Not implemented.
            </summary>
      <param name="text">FormattedText object.</param>
      <param name="pageNums">Page numbers array.</param>
      <param name="lowerLeftX">Lower left X coordinate.</param>
      <param name="lowerLeftY">Lower left Y coordinate.</param>
      <param name="upperRightX">Upper right X coordinate.</param>
      <param name="upperRightY">Upper right Y coordinate.</param>
      <returns>True in case text was successfully added.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.Close">
      <summary>
            Closes PdfFileMend object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.#ctor">
      <summary>
            Constructor.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.#ctor(System.String,System.String)">
      <summary>
            Constructor.
            </summary>
      <param name="inputFileName">Input PDF file name.</param>
      <param name="outputFileName">Output PDF file name.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
            Constructor.
            </summary>
      <param name="inputStream">Input PDF stream.</param>
      <param name="outputStream">Output PDF stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileMend" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.#ctor(Aspose.Pdf.Document,System.String)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileMend" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="outputFileName">
            Output PDF file name.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.#ctor(Aspose.Pdf.Document,System.IO.Stream)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileMend" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="destStream">
            Output PDF stream.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.Save(System.String)">
      <summary>
            Saves the PDF document to the specified file.
            </summary>
      <param name="destFile">The destination file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileMend.Save(System.IO.Stream)">
      <summary>
            Saves the PDF document to the specified stream.
            </summary>
      <param name="destStream">The destination stream.</param>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfFileSecurity">
      <summary>
            Represents encrypting or decrypting a Pdf file with owner or user password, changing the security setting and password.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileSecurity.InputFile">
      <summary>
            Sets the input file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileSecurity.InputStream">
      <summary>
            Sets the input stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileSecurity.OutputFile">
      <summary>
            Sets the output file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileSecurity.OutputStream">
      <summary>
            Sets the output stream.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
            Initialize the object of PdfFileSecurity with input and output stream.
            </summary>
      <param name="inputStream"> Input Pdf Stream.</param>
      <param name="outputStream">Output Pdf Stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.#ctor(System.String,System.String)">
      <summary>
             Initializes the object of PdfFileSecurity with input and output file.
            </summary>
      <param name="inputFile">Source input Pdf file.</param>
      <param name="outputFile">Output Pdf file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.#ctor">
      <summary>
            Initialize the object of PdfFileSecurity.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.EncryptFile(System.String,System.String,Aspose.Pdf.Facades.DocumentPrivilege,Aspose.Pdf.Facades.KeySize)">
      <summary>
            Encrypts Pdf file with userpassword and ownerpassword and sets the document's privileges to access.
            The user password and the owner password can be null or empty. The owner password will be replaced 
            with a random string if the input owner password is null or empty.
            </summary>
      <param name="userPassword">User password.</param>
      <param name="ownerPassword">Owner password.</param>
      <param name="privilege">Set privilege.</param>
      <param name="keySize">KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\example1.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.	
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
            fileSecurity.EncryptFile("userpass", "ownerpass", DocumentPrivilege.Print, KeySize.x256);	
            
            [Visual Basic]
            Dim inFile As String =  "..\\AsposePdfKitExample\\example1.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"   'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity = New PdfFileSecurity(inFile,outFile) 
            fileSecurity.EncryptFile("userpass", "ownerpass", DocumentPrivilege.Print, KeySize.x256)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.EncryptFile(System.String,System.String,Aspose.Pdf.Facades.DocumentPrivilege,Aspose.Pdf.Facades.KeySize,Aspose.Pdf.Facades.Algorithm)">
      <summary>
            Encrypts Pdf file with userpassword and ownerpassword and sets the document's privileges to access.
            The user password and the owner password can be null or empty. The owner password will be replaced 
            with a random string if the input owner password is null or empty.
            There are 6 possible combinations of KeySize and Algorithm values. 
            However (KeySize.x40, Algorithm.AES) and (KeySize.x256, Algorithm.RC4) are invalid and corresponding 
            exception will be raised if kit encounters this combination.
            </summary>
      <param name="userPassword">User password.</param>
      <param name="ownerPassword">Owner password.</param>
      <param name="privilege">Set privilege.</param>
      <param name="keySize">KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption.</param>
      <param name="cipher">Algorithm.AES to encrypt using AES algorithm or Algorithm.RC4 for RC4 encryption.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\example1.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.	
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
            fileSecurity.EncryptFile("userpass","ownerpass",DocumentPrivilege.Print,KeySize.x256,Algorithm.AES);	
            
            [Visual Basic]
            Dim inFile As String =  "..\\AsposePdfKitExample\\example1.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"   'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.EncryptFile("userpass","ownerpass",DocumentPrivilege.Print,KeySize.x256,Algorithm.AES)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.DecryptFile(System.String)">
      <summary>
            Decrypts an encrypted Pdf document by owner password. 
            If the document hasn't owner password, it is allow to use user password.
            </summary>
      <param name="ownerPassword">Owner password.</param>
      <returns>True for success,or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0404.pdf"; //The TestPath may be re-assigned.	
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
            fileSecurity.DecryptFile("ownerpass");
            
            [Visual Basic]
            Dim inFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0404.pdf"  'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.DecryptFile("ownerpass")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.SetPrivilege(Aspose.Pdf.Facades.DocumentPrivilege)">
      <summary>
            Sets Pdf file security with empty user/owner passwords.
            The owner password will be added by a random string.
            </summary>
      <param name="privilege">Set privilege.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\example1.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0405.pdf"; //The TestPath may be re-assigned.
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
            fileSecurity.SetPrivilege(DocumentPrivilege.Print);
            
            [Visual Basic]
            Dim inFile As String =  "..\\AsposePdfKitExample\\example1.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..1\\AsposePdfKitExample\\Kit0405.pdf"  'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.SetPrivilege(DocumentPrivilege.Print)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.SetPrivilege(System.String,System.String,Aspose.Pdf.Facades.DocumentPrivilege)">
      <summary>
            Sets Pdf file security with original password.
            </summary>
      <param name="userPassword">Original user password.</param>
      <param name="ownerPassword">Original owner password.</param>
      <param name="privilege">Set privilege.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\example1.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0405.pdf"; //The TestPath may be re-assigned.
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
            fileSecurity.SetPrivilege(userPassword, ownerPassword, DocumentPrivilege.Print);
            
            [Visual Basic]
            Dim inFile As String =  "..\\AsposePdfKitExample\\example1.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..1\\AsposePdfKitExample\\Kit0405.pdf"  'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.SetPrivilege(userPassword, ownerPassword, DocumentPrivilege.Print)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.ChangePassword(System.String,System.String,System.String)">
      <summary>
             Changes the user password and owner password by owner password, keeps the original security settings.
             The new user password and the new owner password can be null or empty. The owner password will be replaced 
             with a random string if the new owner password is null or empty.
             </summary>
      <param name="ownerPassword">Original Owner password.</param>
      <param name="newUserPassword">New User password.</param>
      <param name="newOwnerPassword">New Owner password.</param>
      <returns>True for success,or false.</returns>
      <example>
        <code>
            [C#]
             string inFile = "..\\AsposePdfKitExample\\Kit0406.pdf"; //The TestPath may be re-assigned.
             string outFile = "..\\AsposePdfKitExample\\Kit0407.pdf";	//The TestPath may be re-assigned.
             PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);		
             fileSecurity.ChangePassword("owner","newuser","newowner");
            
            [Visual Basic]
             Dim inFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"  'The TestPath may be re-assigned.'
             Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0406.pdf"  'The TestPath may be re-assigned.'
             Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
             fileSecurity.ChangePassword("owner","newuser","newowner")	
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.ChangePassword(System.String,System.String,System.String,Aspose.Pdf.Facades.DocumentPrivilege,Aspose.Pdf.Facades.KeySize)">
      <summary>
            Changes the user password and password by owner password, allows to reset Pdf documnent security.
            The new user password and the new owner password can be null or empty. The owner password will be replaced 
            with a random string if the new owner password is null or empty.
            </summary>
      <param name="ownerPassword">Original owner password.</param>
      <param name="newUserPassword">New User password.</param>
      <param name="newOwnerPassword">New Owner password.</param>
      <param name="privilege">Reset security.</param>
      <param name="keySize">KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0407.pdf";	//The TestPath may be re-assigned.
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);	
            fileSecurity.ChangePassword("owner","newuser","newowner", DocumentPrivilege.Print,KeySize.x256);
            
            [Visual Basic] 
            Dim inFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0407.pdf"  'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.ChangePassword("owner","newuser","newowner", DocumentPrivilege.Print,KeySize.x256)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.ChangePassword(System.String,System.String,System.String,Aspose.Pdf.Facades.DocumentPrivilege,Aspose.Pdf.Facades.KeySize,Aspose.Pdf.Facades.Algorithm)">
      <summary>
            Changes the user password and password by owner password, allows to reset Pdf documnent security.
            The new user password and the new owner password can be null or empty. The owner password will be replaced 
            with a random string if the new owner password is null or empty.
            There are 6 possible combinations of KeySize and Algorithm values. 
            However (KeySize.x40, Algorithm.AES) and (KeySize.x256, Algorithm.RC4) are invalid and corresponding 
            exception will be raised if kit encounters this combination.
            </summary>
      <param name="ownerPassword">Original owner password.</param>
      <param name="newUserPassword">New User password.</param>
      <param name="newOwnerPassword">New Owner password.</param>
      <param name="privilege">Reset security.</param>
      <param name="keySize">KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption.</param>
      <param name="cipher">Algorithm.AES to encrypt using AES algorithm or Algorithm.RC4 for RC4 encryption.</param>
      <returns>True for success, or false.</returns>
      <example>
        <code>
            [C#]
            string inFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.
            string outFile = "..\\AsposePdfKitExample\\Kit0407.pdf";	//The TestPath may be re-assigned.
            PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);	
            fileSecurity.ChangePassword("owner","newuser","newowner", DocumentPrivilege.Print,KeySize.x256,Algorithm.AES);
            
            [Visual Basic] 
            Dim inFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"  'The TestPath may be re-assigned.'
            Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0407.pdf"  'The TestPath may be re-assigned.'
            Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile) 
            fileSecurity.ChangePassword("owner","newuser","newowner", DocumentPrivilege.Print,KeySize.x256,Algorithm.AES)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileSecurity" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.#ctor(Aspose.Pdf.Document,System.String)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileSecurity" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="outputFile">
            Output Pdf file.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.#ctor(Aspose.Pdf.Document,System.IO.Stream)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileSecurity" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="outputStream">
            Output Pdf Stream.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.BindPdf(System.String)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcFile">The PDF file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.BindPdf(System.IO.Stream)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcStream">The stream of PDF file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSecurity.Close">
      <summary>
            Closes the facade.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfFileSignature">
      <summary>
            Represents a class to sign a pdf file with a certificate.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileSignature.SignatureAppearance">
      <summary>
            Sets or gets a graphic appearance for the signature. Property value represents image file name.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.#ctor">
      <summary>
            The constructor of PdfFileSignature class. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.#ctor(System.String)">
      <summary>
            The constructor of PdfFileSignature class.
            </summary>
      <param name="inputFile">The input file for signature.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.#ctor(System.String,System.String)">
      <summary>
            The constructor of PdfFileSignature class.
            </summary>
      <param name="inputFile">The input file for signature.</param>
      <param name="outputFile">The output file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.BindPdf(System.String)">
      <summary> 
            Binds a Pdf file for editing.
            </summary>
      <param name="inputFile">The pdf file to be edited.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.BindPdf(System.IO.Stream)">
      <summary> 
            Binds a Pdf stream for editing.
            </summary>
      <param name="inputStream">The pdf stream to be edited.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Save(System.String)">
      <summary>
            Saves the result PDF to file.
            </summary>
      <param name="outputFile">output pdf file</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Save(System.IO.Stream)">
      <summary>
            Saves the result PDF to stream.
            </summary>
      <param name="outputStream">output pdf stream</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Sign(System.Int32,System.String,System.String,System.String,System.Boolean,System.Drawing.Rectangle)">
      <summary>
             Make a signature on the pdf document.
            </summary>
      <param name="page">The page number on which signature is made.</param>
      <param name="SigReason">The reason of signature.</param>
      <param name="SigContact">The contact of signature.</param>
      <param name="SigLocation">The location of signature.</param>
      <param name="visible">The visiblity of signature.</param>
      <param name="annotRect">The rect of signature.</param>
      <example>
        <code>
            [C#]
            string inFile = TestPath + "example1.pdf";
            string outFile = TestPath + "signature.pdf";
            PdfFileSignature pdfSign = new PdfFileSignature();
            pdfSign.BindPdf(inFile);
            System.Drawing.Rectangle rect = new System.Drawing.Rectangle(100, 100, 200, 200);
            pdfSign.SignatureAppearance = TestPath + "butterfly.jpg";
            pdfSign.SetCertificate("certificate.pfx", "password");
            pdfSign.Sign(2, "Allen", "success", "ChangSha", true, rect);
            pdfSign.Save(outFile);
            
            [Visual Basic]
            Dim pdfSign = new PdfFileSignature()
            pdfSign.BindPdf(inFile)
            Dim rect as System.Drawing.Rectangle = new System.Drawing.Rectangle(100, 100, 200, 200)
            pdfSign.SetCertificate("certificate.pfx", "password")
            pdfSign.Sign(2, "Allen", "success", "ChangSha", true, rect)
            pdfSign.SignatureAppearance = TestPath + "butterfly.jpg"
            pdfSign.Save(outFile)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Sign(System.Int32,System.String,System.String,System.String,System.Boolean,System.Drawing.Rectangle,Aspose.Pdf.Forms.Signature)">
      <summary>
            Sign the document with the given type signature.
            </summary>
      <param name="page">The page number on which signature is made.</param>
      <param name="SigReason">The reason of signature.</param>
      <param name="SigContact">The contact of signature.</param>
      <param name="SigLocation">The location of signature.</param>
      <param name="visible">The visiblity of signature.</param>
      <param name="annotRect">The rect of signature.</param>
      <param name="sig">The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached. </param>
      <example>
        <code>
            [C#]
            string inFile = TestPath + "example1.pdf";
            string outFile = TestPath + "signature.pdf";
            PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile);
            System.Drawing.Rectangle rect = new System.Drawing.Rectangle(100, 100, 200, 100);
            pdfSign.SignatureAppearance = TestPath + "butterfly.jpg";
            pdfSign.Sign(2, "Allen", "success", "ChangSha", true, rect, new PKCS1("certificate.pfx", "password"));
            pdfSign.Save();
            
            [Visual Basic]
            Dim inFile As String = TestPath &amp; "example1.pdf"
            Dim outFile As String = TestPath &amp; "signature.pdf"
            Dim sig As PKCS1 = new PKCS1("certificate.pfx", "password")
            Dim pdfSign = new PdfFileSignature(inFile, outFile)
            Dim rect as System.Drawing.Rectangle = new System.Drawing.Rectangle(100, 100, 200, 100)
            pdfSign.SignatureAppearance = TestPath &amp; "butterfly.jpg"
            pdfSign.Sign(2, "Allen", "success", "ChangSha", true, rect, sig)
            pdfSign.Save()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Sign(System.Int32,System.Boolean,System.Drawing.Rectangle,Aspose.Pdf.Forms.Signature)">
      <summary>
            Sign the document with the given type signature.
            </summary>
      <param name="page">The page number on which signature is made.</param>
      <param name="visible">The visiblity of signature.</param>
      <param name="annotRect">The rect of signature.</param>
      <param name="sig">
            The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached.
            Such data as signature reason, contact and location must be already present in this object (see corresponding properties).
            </param>
      <example>
        <code>
            [C#]
            string inFile = TestPath + "example1.pdf";
            string outFile = TestPath + "signature.pdf";
            PKCS1 sig = new PKCS1("certificate.pfx", "password");
            sig.Reason = "Some reason";
            sig.Contact = "Smith";
            sig.Location = "New York";
            PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile);
            System.Drawing.Rectangle rect = new System.Drawing.Rectangle(100, 100, 200, 100);
            pdfSign.SignatureAppearance = TestPath + "butterfly.jpg";
            pdfSign.Sign(2, true, rect, sig);
            pdfSign.Save();
            
            [Visual Basic]
            Dim inFile As String = TestPath &amp; "example1.pdf"
            Dim outFile As String = TestPath &amp; "signature.pdf"
            Dim sig As PKCS1 = new PKCS1("certificate.pfx", "password")
            sig.Reason = "Some reason"
            sig.Contact = "Smith"
            sig.Location = "New York"
            Dim pdfSign = new PdfFileSignature(inFile, outFile)
            Dim rect as System.Drawing.Rectangle = new System.Drawing.Rectangle(100, 100, 200, 100)
            pdfSign.SignatureAppearance = TestPath &amp; "butterfly.jpg"
            pdfSign.Sign(2, true, rect, sig)
            pdfSign.Save()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Sign(System.String,System.String,System.String,System.String,Aspose.Pdf.Forms.Signature)">
      <summary>
            Sign the document with the given type signature which is placed in already presented signature field.
            Before signing signature field must be empty, i.e. field must not contain signature dictionary.
            Thus pdf document already has signature field, you should not supply the place to stamp the signature,
            corresponding page and rectangle are taken from signature field which is found by signature name (see SigName parameter).
            </summary>
      <param name="SigName">The name of the signature field.</param>
      <param name="SigReason">The reason of signature.</param>
      <param name="SigContact">The contact of signature.</param>
      <param name="SigLocation">The location of signature.</param>
      <param name="sig">The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached.</param>
      <example>
        <code>
            [C#]
            string inFile = TestPath + "example1.pdf";
            string outFile = TestPath + "signature.pdf";
            PKCS1 sig = new PKCS1("certificate.pfx", "password");
            PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile);
            pdfSign.SignatureAppearance = TestPath + "butterfly.jpg";
            pdfSign.Sign("Signature1", "Allen", "success", "ChangSha", sig);
            pdfSign.Save();
            
            [Visual Basic]
            Dim inFile As String = TestPath &amp; "example1.pdf"
            Dim outFile As String = TestPath &amp; "signature.pdf"
            Dim sig As PKCS1 = new PKCS1("certificate.pfx", "password")
            Dim pdfSign = new PdfFileSignature(inFile, outFile)
            pdfSign.SignatureAppearance = TestPath &amp; "butterfly.jpg"
            pdfSign.Sign("Signature1", "Allen", "success", "ChangSha", sig)
            pdfSign.Save()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Sign(System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.Drawing.Rectangle,Aspose.Pdf.Forms.Signature)">
      <summary>
            Sign the document with the given type signature which is placed in already presented signature field.
            Before signing pdf document should already has signature field, corresponding page and rectangle are taken from 
            signature field which is found by signature name (see SigName parameter).
            </summary>
      <param name="page">The page number on which signature is made.</param>
      <param name="SigName">The name of the signature field.</param>
      <param name="SigReason">The reason of signature.</param>
      <param name="SigContact">The contact of signature.</param>
      <param name="SigLocation">The location of signature.</param>
      <param name="visible">The visiblity of signature.</param>
      <param name="annotRect">The rect of signature.</param>
      <param name="sig">The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached.</param>
      <example>
        <code>
            [C#]
            string inFile = TestPath + "blankWithSignature.pdf";
            string outFile = TestPath + "signature.pdf";
            PKCS7 sig = new PKCS7("certificate.pfx", "password");
            PdfFileSignature pdfSign = new PdfFileSignature(inFile);
            System.Drawing.Rectangle rect = new System.Drawing.Rectangle(100, 100, 100, 100);
            pdfSign.SignatureAppearance = TestPath + "butterfly.jpg"
            pdfSign.Sign(1, "Signature1", "ReasonToTest", "ContactMe", "SomeLocation", true, rect, sig);                
            pdfSign.Save(outFile);                
            
            [Visual Basic]
            Dim inFile As String = TestPath &amp; "blankWithSignature.pdf"
            Dim outFile As String = TestPath &amp; "signature.pdf"
            Dim sig As PKCS7 = new PKCS7("certificate.pfx", "password")
            Dim pdfSign = new PdfFileSignature(inFile, outFile)
            pdfSign.SignatureAppearance = TestPath &amp; "butterfly.jpg"
            pdfSign.Sign("Signature1",  "ReasonToTest", "ContactMe", "SomeLocation", true, rect, sig)
            pdfSign.Save(outFile)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Sign(System.String,Aspose.Pdf.Forms.Signature)">
      <summary>
            Sign the document with the given type signature which is placed in already presented signature field.
            Before signing signature field must be empty, i.e. field must not contain signature dictionary.
            Thus pdf document already has signature field, you should not supply the place to stamp the signature,
            corresponding page and rectangle are taken from signature field which is found by signature name (see SigName parameter).
            Such data as signature reason, contact and location must be provided by corresponding properties of the Signature object sig.
            </summary>
      <param name="SigName">The name of the signature field.</param>
      <param name="sig">The type of the signature, could be PKCS1 (Pkcs1Signature object), PKCS7 and PKCS7 detached (Pkcs7Signature object) </param>
      <example>
        <code>
            [C#]
            string inFile = TestPath + "example1.pdf";
            string outFile = TestPath + "signature.pdf";
            PKCS1 sig = new PKCS1("certificate.pfx", "password");
            sig.Reason = "Some reason";
            sig.Contact = "Smith";
            sig.Location = "New York";
            PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile);
            pdfSign.SignatureAppearance = TestPath + "butterfly.jpg";
            pdfSign.Sign("Signature1", sig);
            pdfSign.Save();
            
            [Visual Basic]
            Dim inFile As String = TestPath &amp; "example1.pdf"
            Dim outFile As String = TestPath &amp; "signature.pdf"
            Dim sig As PKCS1 = new PKCS1("certificate.pfx", "password")
            sig.Reason = "Some reason"
            sig.Contact = "Smith"
            sig.Location = "New York"
            Dim pdfSign = new PdfFileSignature(inFile, outFile)
            pdfSign.SignatureAppearance = TestPath &amp; "butterfly.jpg"
            pdfSign.Sign("Signature1", sig)
            pdfSign.Save()
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileSignature.IsCertified">
      <summary>
            Gets the flag determining whether a document is certified or not.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetAccessPermissions">
      <summary>
            Returns the access permissions value of certified document by the MDP signature type.
            </summary>
      <returns>If the document is being certified, than returns access permissions value; otherwise, <exception cref="T:System.ApplicationException" /> is thrown.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Certify(System.Int32,System.String,System.String,System.String,System.Boolean,System.Drawing.Rectangle,Aspose.Pdf.Forms.DocMDPSignature)">
      <summary>
            Certify the document with the MDP signature.
            Such data as signature reason, contact and location must be provided by corresponding properties of the Signature object sig.
            </summary>
      <param name="page">The page on which signature is made.</param>
      <param name="SigReason">The reason of signature.</param>
      <param name="SigContact">The contact of signature.</param>
      <param name="SigLocation">The location of signature.</param>
      <param name="visible">The visiblity of signature.</param>
      <param name="annotRect">The rect of signature.</param>
      <param name="docMdpSignature">The document MDP type of the signature.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetSignNames">
      <summary>
             Gets the names of all not empty signatures.
             </summary>
      <returns>Return an IList.</returns>
      <example>
        <code>
             [C#]
             string inFile=TestPath + "example1.pdf";
             PdfFileSignature pdfSign=new PdfFileSignature();
             pdfSign.BindPdf(inFile); 
             IList names=pdfSign.GetSignNames();
            for(int i=0;i&lt;names.Count;i++)
            {
              Console.WriteLine("signature name:"+(string)names[i]);
              Console.WriteLine("coverswholedocument:"+pdfSign.IsCoversWholeDocument((string)names[i]));
              Console.WriteLine("revision:"+pdfSign.GetRevision((string)names[i]));	
              Console.WriteLine("verifysigned:"+pdfSign.VerifySigned((string)names[i]));
              Console.WriteLine("reason:"+pdfSign.GetReason((string)names[i]));
              Console.WriteLine("location:"+pdfSign.GetLocation((string)names[i]));
              Console.WriteLine("datatime:"+pdfSign.GetDateTime((string)names[i]));		
             }
             Console.WriteLine("totalvision:"+pdfSign.GetTotalRevision());
             [Visual Basic]
             Dim pdfSign as PdfFileSignature =new  PdfFileSignature
             pdfSign.BindPdf(inFile)
             Dim names as IList
             names=pdfSign.GetSignNames()
             For i=0 To names.Count
            
            		Console.WriteLine("signature name:" + (string)names[i])
            		Console.WriteLine("coverswholedocument:" + pdfSign.IsCoversWholeDocument((string)names[i]))
            		Console.WriteLine("revision:" + pdfSign.GetRevision((string)names[i]))	
            		Console.WriteLine("verifysigned:" + pdfSign.VerifySigned((string)names[i]))
            		Console.WriteLine("reason:" + pdfSign.GetReason((string)names[i]))
            		Console.WriteLine("location:" + pdfSign.GetLocation((string)names[i]))
            		Console.WriteLine("datatime:" + pdfSign.GetDateTime((string)names[i]))	
             Next i
             Console.WriteLine("totalvision:"+pdfSign.GetTotalRevision())
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetBlankSignNames">
      <summary>
            Gets the names of all empty signature fields.
            </summary>
      <returns>Return an IList.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.IsContainSignature">
      <summary>
            Checks if the pdf  has a digital signature or not.
            </summary>
      <returns>Return a  result of bool type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.ContainsSignature">
      <summary>
            Checks if the pdf  has a digital signature or not.
            </summary>
      <returns>Return a  result of bool type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.ContainsUsageRights">
      <summary>
            Checks if the pdf has a usage rights or not.
            </summary>
      <returns>Returns a result of bool type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.IsCoversWholeDocument(System.String)">
      <summary>
            Checks if the signature covers the whole document.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Return a  result of bool type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.CoversWholeDocument(System.String)">
      <summary>
            Checks if the signature covers the whole document.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Return a  result of bool type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetRevision(System.String)">
      <summary>
            Gets the revision of a signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Return the number of signature revision.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetTotalRevision">
      <summary>
            Gets the toltal revision.
            </summary>
      <returns>Return the total number of signature revision.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.RemoveUsageRights">
      <summary>
            Removes the usage rights entry.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.RemoveSignature(System.String)">
      <summary>
            Remove the signature according to the name of the signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <example>
        <code>
            [C#]
            string inFile = TestPath + "example1.pdf";
            PdfFileSignature pdfSign = new PdfFileSignature();
            pdfSign.BindPdf(inFile); 
            IList names = pdfSign.GetSignNames();
            for(int i = 0; i &lt; names.Count; i++)
            {
               pdfSign.RemoveSignature((string)names[i]);
            }
            pdfSign.Save(TestPath + "signed_removed.pdf");
            [Visual Basic]
            Dim pdfSign as PdfFileSignature = new PdfFileSignature
            pdfSign.BindPdf(inFile)
            Dim names as IList
            names = pdfSign.GetSignNames()
            For i = 0 To names.Count
             pdfSign.RemoveSignature((string)names[i])
            Next i
            pdfSign.Save(TestPath + "signed_removed.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.RemoveSignature(System.String,System.Boolean)">
      <summary>
            Removes the signature according to the name of the signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <param name="removeField">If set to true, than removes both of signature and field from document; otherwise, signature only.</param>
      <example>
        <code>
            [C#]
            string inFile = TestPath + "example1.pdf";
            PdfFileSignature pdfSign = new PdfFileSignature();
            pdfSign.BindPdf(inFile); 
            IList names = pdfSign.GetSignNames();
            for(int i = 0; i &lt; names.Count; i++)
            {
               pdfSign.RemoveSignature((string)names[i], false);
            }
            pdfSign.Save(TestPath + "signed_removed.pdf");
            [Visual Basic]
            Dim pdfSign as PdfFileSignature = new PdfFileSignature
            pdfSign.BindPdf(inFile)
            Dim names as IList
            names = pdfSign.GetSignNames()
            For i = 0 To names.Count
             pdfSign.RemoveSignature((string)names[i], false)
            Next i
            pdfSign.Save(TestPath + "signed_removed.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.VerifySigned(System.String)">
      <summary>
            Checks the validity of a signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Return a result of bool type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetSignerName(System.String)">
      <summary>
            Gets the name of person or organization who signing the pdf document.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Returns the result of the signer's name.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetDateTime(System.String)">
      <summary>
            Gets the signature's datetime.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Return the result of DateTime type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetReason(System.String)">
      <summary>
            Gets the reason of a signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Returns a result of string type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetLocation(System.String)">
      <summary>
            Gets the location of a signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Returns a result of string type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.GetContactInfo(System.String)">
      <summary>
            Gets the contact information of a signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Returns a result of string type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.VerifySignature(System.String)">
      <summary>
            Checks the validity of a signature.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>Return a result of bool type.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.ExtractImage(System.String)">
      <summary>
            Extracts signature's image.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>If image was successfully found than returns stream object; otherwise, null.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.ExtractCertificate(System.String)">
      <summary>
            Extracts signature's single X.509 certificate as a stream.
            </summary>
      <param name="signName">The name of signature.</param>
      <returns>If certificate was found returns X.509 single certificate; otherwise, null.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Save">
      <summary> 
            Save signed pdf file. Output filename must be provided before with the help of coresponding PdfFileSignature constructor.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileSignature" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.#ctor(Aspose.Pdf.Document,System.String)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileSignature" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="outputFile">
            The output file.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.SetCertificate(System.String,System.String)">
      <summary>
            Set certificate file and password for signing routine.
            </summary>
      <param name="pfx">
            PKCS #12 certificate file.
            </param>
      <param name="pass">
            Password to get access for the certificate private key.
            </param>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileSignature.SignatureAppearanceStream">
      <summary>
            Sets or gets a graphic appearance for the signature. Property value represents image stream.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileSignature.Close">
      <summary>
            Closes the facade.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfFileStamp">
      <summary>
            Class for adding stamps (watermark or background) to PDF files.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileStamp.PosBottomMiddle">
      <summary>
            Bottom middle position.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileStamp.PosBottomRight">
      <summary>
            Bottom right position.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileStamp.PosUpperRight">
      <summary>
            Right upper position.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileStamp.PosSidesRight">
      <summary>
            Right position.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileStamp.PosUpperMiddle">
      <summary>
            Upper middle position.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileStamp.PosBottomLeft">
      <summary>
            Bottom left position.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileStamp.PosSidesLeft">
      <summary>
            Left position.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfFileStamp.PosUpperLeft">
      <summary>
            Upper let position.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.OptimizeSize">
      <summary>
            Gets or sets optimization flag. Equal resource streams in resultant file are merged into one PDF object if this flag set. 
            This allows to decrease resultant file size but may cause slower execution and larger memory requirements.
            Default value: false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.KeepSecurity">
      <summary>
            Keeps security if true. (This feature will be implemented in next versions).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.InputFile">
      <summary>
            Gets or sets name and path of input file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.InputStream">
      <summary>
            Gets or sets input stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.OutputFile">
      <summary>
            Gets or sets name and path of output file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.OutputStream">
      <summary>
            Gets or sets output stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.PageNumberRotation">
      <summary>
            Gets or sets rotation of page number. Rotation  is in degrees. Default is 0.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.ConvertTo">
      <summary>
            Sets PDF file format. Result file will be saved in specified file format. 
            If this property is not specified then file will be save in default PDF format without conversion.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.PageHeight">
      <summary>
            Gets height of first page in souorce file.
            </summary>
      <example>
        <code code="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             Console.WriteLine("Height = " + fileStamp.PageHeight);
             fileStamp.Close();
             </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.PageWidth">
      <summary>
            Gets width of first page in input file.
            </summary>
      <example>
        <code lang="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             Console.WriteLine("Width = " + fileStamp.PageWidth);
             fileStamp.Close();
             </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.StartingNumber">
      <summary>
            Gets or sets starting number for first page in input file. Next pages will be numbered starting from this value. 
            For example if  StartingNumber is set to 100, document pages will have numbers 100, 101, 102... 
            </summary>
      <example>
        <code lang="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             fileStamp.StartingNumber = 100;
             fileStamp.AddPageNumber("Page #");
             fileStamp.Close();
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.#ctor(System.String,System.String)">
      <summary>
            Constructor for PdfFileStamp.
            </summary>
      <param name="inputFile">Input file name and path.</param>
      <param name="outputFile">Output file name and path.</param>
      <example>
        <code lang="C#">
            PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
            Constructor for PdfFileStamp.
            </summary>
      <param name="inputStream">Input stream.</param>
      <param name="outputStream">Output stream.</param>
      <example>
        <code lang="C#">
            Stream input = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
            Stream output = new FileStream("output.pdf", FileMode.Creat, FileAccess.Write);
            PdfFileStamp stamp = new PdfFileStamp(input, output);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.#ctor(System.String,System.String,System.Boolean)">
      <summary>
            Constructor for PdfFileStamp.
            </summary>
      <param name="inputFile">Input file name and path.</param>
      <param name="outputFile">Output file name and path.</param>
      <param name="keepSecurity">Keep security if true.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.#ctor(System.IO.Stream,System.IO.Stream,System.Boolean)">
      <summary>
            Constructor of PdfFileStamp.
            </summary>
      <param name="inputStream">Input stream.</param>
      <param name="outputStream">Output stream.</param>
      <param name="keepSecurity">Keep security if true.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.Close">
      <summary>
            Closes opened files and saves changes. 
            Warning. If input or output streams are specified they are not closed by Close() method. 
            </summary>
      <example>
        <code lang="C#">
            PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf");
            //do some work... 
            stamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.Save(System.String)">
      <summary>
            Saves result into specified file.
            </summary>
      <param name="destFile">Path to file where document will be saved.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.Save(System.IO.Stream)">
      <summary>
            Saves document into specified stream.
            </summary>
      <param name="destStream">Stream where document will be saved.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddStamp(Aspose.Pdf.Facades.Stamp)">
      <summary>
            Adds stamp to the file.
            </summary>
      <example>
        <code code="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             Stamp stamp = new Aspose.Pdf.Facades.Stamp();
             stamp.SetOrigin(140, 400);
             stamp.SetImageSize(50, 50);
             stamp.Opacity = 0.8f;
             stamp.IsBackground = true;
             stamp.BindImage("image.jpg");
             fileStamp.AddStamp(stamp);
             fileStamp.Close();
             </code>
      </example>
      <param name="stamp">Stamp object which.</param>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.NumberingStyle">
      <summary>
            Gets or sets pabge numbering style. Possible values: NumeralsArabic, NumeralsRomanUppercase, NumeralsRomanLowercase, LettersAppercase, LettersLowercase
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddPageNumber(System.String)">
      <summary>
            Add page number to file. Page number text may contain # sign which will be replaced with number of the page. 
            Page number is placed in the bottom of the page centered horizontally.
            </summary>
      <param name="formatString">Text of page number</param>
      <example>
        <code lang="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             fileStamp.AddPageNumber("Page #");
             fileStamp.Close();
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddPageNumber(Aspose.Pdf.Facades.FormattedText)">
      <summary>
            Adds page number to the page. Page number may contain # sign which will be replaced with page number.
            Page number is placed in the bottom of the page centered horizontally.
            </summary>
      <example>
        <code lang="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             fileStamp.AddPageNumber(new FormattedText("Page #"));
             fileStamp.Close();
             </code>
      </example>
      <param name="formattedText">Format string for page number representes as FormattedText.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddPageNumber(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds page number to the pages of document.
            </summary>
      <param name="formatString">Format string for page number.</param>
      <param name="position">Position where page number will be placed on the page.  0-bottom middle, 1-bottom right, 2-upper right, 
            3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left.
            You can use the following constants: 
            PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, 
            PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft 
            </param>
      <param name="leftMargin">Margin on the left edge of the page. </param>
      <param name="rightMargin">Margin on the right edge of the page.</param>
      <param name="topMargin">Margin on the top edge of the page.</param>
      <param name="bottomMargin">Margin on the bottom edge of the page.</param>
      <example>
        <code code="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             fileStamp.AddPageNumber("Page #", PdfFileStamp.PosBottomLeft, 100, 100, 200, 200);
             fileStamp.Close();
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddPageNumber(System.String,System.Single,System.Single)">
      <summary>
            Adds page number at the specified position on the page. 
            </summary>
      <param name="formatString">Format string. Format string can contain # sign which will be replaced with page number.</param>
      <param name="x">X coordinate of page number.</param>
      <param name="y">Y coordinate of page number.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
            fileStamp.AddPageNumber(new FormattedText("Page  #"), 123, 357);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddPageNumber(Aspose.Pdf.Facades.FormattedText,System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Adds page number to the pages of document.
            </summary>
      <param name="formattedText">FormattedText object which represents page number format and properties iof the text.</param>
      <param name="position">Position where page number will be placed on the page.  0-bottom middle, 1-bottom right, 2-upper right, 
            3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left.
            You can use the following constants: 
            PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, 
            PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft 
            </param>
      <param name="leftMargin">Margin on the left edge of the page. </param>
      <param name="rightMargin">Margin on the right edge of the page.</param>
      <param name="topMargin">Margin on the top edge of the page.</param>
      <param name="bottomMargin">Margin on the bottom edge of the page.</param>
      <example>
        <code lang="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             fileStamp.AddPageNumber(new FormattedText("Page #"), PdfFileStamp.PosBottomLeft, 100, 100, 200, 200);
             fileStamp.Close();
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddPageNumber(Aspose.Pdf.Facades.FormattedText,System.Single,System.Single)">
      <summary>
            Adds page number at the specified position on the page. 
            </summary>
      <param name="formattedText">Formatted text which represents page number format and properties of the text.
            Format string can contain # sign which will be replaced with page number.</param>
      <param name="x">X coordinate of page number.</param>
      <param name="y">Y coordinate of page number.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
            fileStamp.AddPageNumber(new FormattedText("Page  #"), 123, 357);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddHeader(Aspose.Pdf.Facades.FormattedText,System.Single)">
      <summary>
            Adds header to the page.
            </summary>
      <param name="formattedText">Text for header and properties of the text.</param>
      <param name="topMargin">Margin on the top of page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
            fileStamp.AddHeader(new FormattedText("Head of the page"), 50);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddHeader(Aspose.Pdf.Facades.FormattedText,System.Single,System.Single,System.Single)">
      <summary>
            Adds header to the pages of file. 
            </summary>
      <param name="formattedText">Formatted text object which contains page text and its properties.</param>
      <param name="topMargin">Margin on the top of the page.</param>
      <param name="leftMargin">Margin on the left of the page.</param>
      <param name="rightMargin">Margin on the right of the page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf");
            stamp.AddHeader(new FormattedText("Head of the page"), 10, 50, 50);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddHeader(System.String,System.Single)">
      <summary>
            Adds image as header to the pages of the file. 
            </summary>
      <param name="imageFile">Path to the image file.</param>
      <param name="topMargin">Margin at top of the page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
            Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
            fileStamp.AddHeader("image.jpg", 50);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddHeader(System.String,System.Single,System.Single,System.Single)">
      <summary>
            Adds image as header on the pages.
            </summary>
      <param name="imageFile">Path to the image file.</param>
      <param name="topMargin">Margin at top of the page.</param>
      <param name="leftMargin">Margin at left side of the page.</param>
      <param name="rightMargin">Margin at right side of the page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
            Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
            fileStamp.AddHeader("image.jpg", 50, 100, 100);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddHeader(System.IO.Stream,System.Single)">
      <summary>
            Adds image as header on the pages.
            </summary>
      <param name="imageStream">Stream of the image.</param>
      <param name="topMargin">Margin at top of the page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
            Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
            fileStamp.AddHeader(new FileStream("image.jpg", FileMode.Open, FileAccess.Read), 50);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddHeader(System.IO.Stream,System.Single,System.Single,System.Single)">
      <summary>
            Adds image at the top of the page. 
            </summary>
      <param name="inputStream">Stream which contains image data.</param>
      <param name="topMargin">Margin at top of the page.</param>
      <param name="leftMargin">Margin at left side of the page.</param>
      <param name="rightMargin">Margin at right side of the page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
            Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
            fileStamp.AddHeader(new FileStream("image.jpg", FileMode.Open, FileAccess.Read), 50, 100, 100);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddFooter(Aspose.Pdf.Facades.FormattedText,System.Single)">
      <summary>
            Adds footer to the pages of the document.
            </summary>
      <param name="formattedText">FormattedText object which contains text of the footer and text properties.</param>
      <param name="bottomMargin">Margin at the top of page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf");
            stamp.AddFooter(new FormattedText("Foot of the page"), 10);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddFooter(Aspose.Pdf.Facades.FormattedText,System.Single,System.Single,System.Single)">
      <summary>
            Adds footer to the pages of the document.
            </summary>
      <param name="formattedText">FormattedText object which contains footer text and text properties.</param>
      <param name="bottomMargin">Margin at the bottom of the page.</param>
      <param name="leftMargin">Margin at the left side of the page.</param>
      <param name="rightMargin">Margin at the right side of the page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf");
            stamp.AddFooter(new FormattedText("Foot of the page"), 10, 50, 50);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddFooter(System.String,System.Single)">
      <summary>
            Adds image as footer to the pages of the document.
            </summary>
      <param name="imageFile">Image file name and path.</param>
      <param name="bottomMargin">Margin at the bottom of the page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
            Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
            fileStamp.AddFooter("image.jpg", 50);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddFooter(System.String,System.Single,System.Single,System.Single)">
      <summary>
            Adds image as footer of the pages.
            </summary>
      <param name="imageFile">Iamge file name and path.</param>
      <param name="bottomMargin">Margin at the bottom of the page.</param>
      <param name="leftMargin">Margin at the left side of the page.</param>
      <param name="rightMargin">Margin at the right side of the page.</param>
            /// <example><code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
            Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
            fileStamp.AddFooter("image.jpg", 50, 100, 100);
            fileStamp.Close();
            </code></example></member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddFooter(System.IO.Stream,System.Single)">
      <summary>
            Adds image as footer of the page.
            </summary>
      <param name="imageStream">Stream contains image data.</param>
      <param name="bottomMargin">Margin at the bottom of the page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
            Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
            fileStamp.AddFooter(new FileStream("image.jpg", FileMode.Open, FileAccess.Read), 50);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddFooter(System.IO.Stream,System.Single,System.Single,System.Single)">
      <summary>
            Adds image as footer of the page.
            </summary>
      <param name="imageStream">Stream contains image data.</param>
      <param name="bottomMargin">Margin at the bottom of the page.</param>
      <param name="leftMargin">Margin at the left side of the page.</param>
      <param name="rightMargin">Margin at the right side of the page.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
            Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
            fileStamp.AddFooter(new FileStream("image.jpg", FileMode.Open, FileAccess.Read), 50, 50, 50);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddPageNumber(System.String,System.Int32)">
      <summary>
            Adds page number to the pages.
            </summary>
      <param name="formatString">Format of the page number. This text may contain # which will be replaced with page number.</param>
      <param name="position">Position where page number will be placed on the page.  0-bottom middle, 1-bottom right, 2-upper right, 
            3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left.
            You can use the following constants: 
            PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, 
            PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft 
            </param>
      <example>
        <code lang="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             fileStamp.AddPageNumber("Page #", PdfFileStamp.PosUpperRight);
             fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.AddPageNumber(Aspose.Pdf.Facades.FormattedText,System.Int32)">
      <summary>
            Adds page number to the pages.
            </summary>
      <param name="formattedText">FormattedText object which contains format of the page number and text properties. 
            This text may contain # which will be replaced with page number.</param>
      <param name="position">Position where page number will be placed on the page.  0-bottom middle, 1-bottom right, 2-upper right, 
            3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left.
            You can use the following constants: 
            PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3, 
            PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft 
            </param>
      <example>
        <code lang="C#">
             PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
             fileStamp.AddPageNumber("Page #", PdfFileStamp.PosUpperRight);
             fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.#ctor">
      <summary>
            Constructor of the PdfFileStamp.
            Input file and output file may be specified via corresponding properties.
            <example><code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp();
            fileStamp.InputFile = "input.pdf";
            fileStamp.OutputFile = "output.pdf";
            </code></example></summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileStamp" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.#ctor(Aspose.Pdf.Document,System.String)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileStamp" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="outputFile">
            Output file name and path.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfFileStamp.#ctor(Aspose.Pdf.Document,System.IO.Stream)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileStamp" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
      <param name="outputStream">
            Output stream.
            </param>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfFileStamp.StampId">
      <summary>
            Stamp ID of next added stamp (incluiding page headers/hooters/page numbers).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfJavaScriptStripper">
      <summary>
            Class for removing all Java Script code.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfJavaScriptStripper.Strip(System.String,System.String)">
      <summary>
            Remove Java Script from document. 
            </summary>
      <param name="inputFile">File containig the document.</param>
      <param name="outputFile">File where document will be stored.</param>
      <returns>true if JavaScript was stripped successfully.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfJavaScriptStripper.Strip(System.IO.Stream,System.IO.Stream)">
      <summary>
            Remove Java Script from the document.
            </summary>
      <param name="inStream">Stream containing document.</param>
      <param name="outStream">Stream where the document will be stored.</param>
      <returns>true if JavaScript was stripped successfully.</returns>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfPageEditor">
      <summary> 
            Represents a class to edit the PDF file's page, including rotating page, zooming page, moving position and changing page size. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.#ctor">
      <summary>
            Constructor for PdfPageEditor class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.#ctor(Aspose.Pdf.Document)">
      <summary>
            Constructor for PdfPageEditor class.
            </summary>
      <param name="document">Document object which should be processed.</param>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.SPLITVOUT">
      <summary>  Out Vertical Split</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.SPLITHOUT">
      <summary>  Out Horizontal Split</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.SPLITVIN">
      <summary>  In Vertical Split</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.SPLITHIN">
      <summary>  IN Horizontal Split</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.BLINDV">
      <summary>  Vertical Blinds</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.BLINDH">
      <summary>  Vertical Blinds</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.INBOX">
      <summary>  Inward Box</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.OUTBOX">
      <summary>  Outward Box</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.LRWIPE">
      <summary>  Left-Right Wipe</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.RLWIPE">
      <summary>  Right-Left Wipe</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.BTWIPE">
      <summary>  Bottom-Top Wipe</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.TBWIPE">
      <summary>  Top-Bottom Wipe</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.DISSOLVE">
      <summary>The old page dissolves </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.LRGLITTER">
      <summary>  Left-Right Glitter</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.TBGLITTER">
      <summary>  Top-Bottom Glitter</summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfPageEditor.DGLITTER">
      <summary>  Diagonal Glitter</summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.TransitionDuration">
      <summary>
            Gets or sets duration of the transition effect.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.TransitionType">
      <summary>
            Gets or sets transition style to use when moving to this page from another during a presentation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.DisplayDuration">
      <summary>
            Gets or sets display duration for pages.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.ProcessPages">
      <summary>
            Gets or sets the page numbers to be edited. By default, each page would be edited.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.Rotation">
      <summary>
            Gets or sets the rotation of the pages, the rotation must be 0, 90, 180 or 270.
            Default value is 0.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.PageRotations">
      <summary>
            A hashtable contains the page number and rotation degree,
            the key represents the page number, the value of key represents the rotation in degrees.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.Zoom">
      <summary>
            Get or sets zoom coefficient. Value 1.0 corresponds to 100%.
            Default value is 1.0.
            <example>
            The following example demonstrates how to change zoom of the document pages.
            <code lang="C#">
            PdfPageEditor editor = new PdfPageEditor();
            editor.BindPdf("sample.pdf");
            editor.Zoom = 0.5f;
            </code></example></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.PageSize">
      <summary>
            Gets or sets the output file's page size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.Alignment">
      <summary>
            Gets or sets the horizontal alignment of the original PDF content on the result page, default is AlignmentType.Left.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.HorizontalAlignment">
      <summary>
            Gets or sets the horizontal alignment of the original PDF content on the result page, default is AlignmentType.Left.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.VerticalAlignment">
      <summary>
            Gets or Sets the vertical alignment of the original PDF content on the result page, default is VerticalAlignmentType.Bottom.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfPageEditor.VerticalAlignmentType">
      <summary>
            Gets or Sets the vertical alignment of the original PDF content on the result page, default is VerticalAlignmentType.Bottom.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.MovePosition(System.Single,System.Single)">
      <summary>
            Moves the origin from (0, 0) to the point that appointted. 
            The origin is left-bottom and the unit is point(1 inch = 72 points). 
            </summary>
      <param name="moveX">X-coordinate.</param>
      <param name="moveY">Y-coordinate.</param>
      <example>
        <code lang="C#">
            PdfPageEditor editor = new PdfPageEditor();
            editor.BindPdf("input.pdf");
            editor.MovePosition(-100, 60);
            editor.Save("moved.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.GetPages">
      <summary>
            Returns total number of pages.
            </summary>
      <returns>Number of pages.</returns>
      <example>
            The following example demonstrates using of GetPages() method:
            <code lang="C#">
            PdfPageEditor editor = new PdfPageEditor();
            editor.BindPdf("sample.pdf");
            Console.WriteLine("Document has: " + editor.GetPages());
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.GetPageSize(System.Int32)">
      <summary>
            Returns the page size of the specified page.
            </summary>
      <param name="page">Page index. Document pages are numbered from 1.</param>
      <returns>Result is instance of PageSize. Use Width and Height properties of the returned object to get page width and height.</returns>
      <example>
            The following example demonstrates using of GetPageSize method: 
            <code lang="C#">
            PdfPageEditor editor = new PdfPageEditor();
            editor.BindPdf("sample.pdf");
            PageSize size = editor.GetPageSize(1);
            Console.WriteLine("Size of 1st page : " + size.Width + " x " + size.Height);
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.GetPageRotation(System.Int32)">
      <summary>
            Returns the rotation of specified page. 
            </summary>
      <param name="page">Page index. Document pages are numbered from 1.</param>
      <returns>Page rotation in degrees.</returns>
      <example>
            The following example demonstrates how to get page rotation:
            <code lang="C#">
            PdfPageEditor editor = new PdfPageEditor();
            editor.BindPdf("sample.pdf");
            int rotation = editor.GetPageSize(1);
            Console.WriteLine("Rotation of 1st page : " + rotation + " degrees");        
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.GetPageBoxSize(System.Int32,System.String)">
      <summary>
            Returns size of specified box in document.
            </summary>
      <param name="page">Page index. Document pages are numbered from 1.</param>
      <param name="pageBoxName">Box type name. Valid values are: "art", "bleed", "crop", "media", "trim".</param>
      <returns>Rectangle which contains requested box.</returns>
      <example>
            The following example demonstrates how to get media box of the 1st page:
            <code lang="C#">
            PdfPageEditor editor = new PdfPageEditor();
            editor.BindPdf("sample.pdf");
            System.Drawing.Rectangle rect = editor.GetBoxSize(1, "media");
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.Save(System.String)">
      <summary>
            Saves changed document into file. 
            </summary>
      <param name="outputFile">Path to file where document will be saved.</param>
      <example>
            The following sample demonstrates how to save changed PDF document
            <code lang="C#">
            PdfPageEditor editor = new PdfPageEditor();
            editor.BindPdf("sample.pdf");
            editor.Zoom = 0.5f;
            editor.Save("newdocument.pdf");
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.Save(System.IO.Stream)">
      <summary>
            Saves changed document into stream. 
            </summary>
      <param name="outputStream">Stream where changed PDF document will be saved.</param>
      <example>
            The following sample demonstrates how to save changed PDF document into stream.
            <code lang="C#">
            PdfPageEditor editor = new PdfPageEditor();
            editor.BindPdf("sample.pdf");
            editor.Zoom = 0.5f;
            editor.Save("newdocument.pdf");
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfPageEditor.ApplyChanges">
      <summary>
            Apply changes made to the document pages.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfProducer">
      <summary>
            Represents a class to produce PDF from other formats.
            <example>This sample shows how to produce Pdf file from CGM file.
            <code>
            string inputFile = "myImage.cgm";
            string outputFile = "myPdf.pdf";
            try
            {
                PdfProducer.Produce(inputFile, ImportFormat.Cgm, outputFile);
                // Success produced pdf file.
            }
            catch (InvalidCgmFileFormatException e)
            {
                //  Do something...
            }
            </code></example></summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PdfProducer.options">
      <summary>
             ImportOptions holds level of abstraction on individual import options.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfProducer.#ctor(Aspose.Pdf.ImportOptions)">
      <summary>
            Constructor.
            </summary>
      <param name="options">Import option.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfProducer.Produce(System.IO.Stream,Aspose.Pdf.ImportFormat,System.IO.Stream)">
      <summary>
            Produce the PDF stream using specified import format.
            <example>This sample shows how to produce Pdf stream from CGM stream.
            <code>
            string inputFile = "myImage.cgm";
            string outputFile = "myPdf.pdf";
            using (FileStream inputStream = File.OpenRead(inputFile))
            using (FileStream outputStream = File.Create(outputFile))
            {
                PdfProducer.Produce(inputStream, ImportFormat.Cgm, outputStream);
            }
            </code></example></summary>
      <param name="inputStream">Input stream.</param>
      <param name="format">Import format.</param>
      <param name="outputStream">Output PDF stream.</param>
      <exception cref="T:Aspose.Pdf.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception>
      <exception cref="T:System.ArgumentNullException">Input or output stream is null</exception>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfProducer.Produce(System.String,Aspose.Pdf.ImportFormat,System.IO.Stream)">
      <summary>
            Produce the PDF stream using specified import format.
            <example>This sample shows how to produce Pdf stream from CGM file.
            <code>
            string inputFile = "myImage.cgm";
            string outputFile = "myPdf.pdf";
            using (FileStream outputStream = File.Create(outputFile))
            {
                PdfProducer.Produce(inputFile, ImportFormat.Cgm, outputStream);
            }
            </code></example></summary>
      <param name="inputFileName">Input file name.</param>
      <param name="format">Import format.</param>
      <param name="outputStream">Output PDF stream.</param>
      <exception cref="T:Aspose.Pdf.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception>
      <exception cref="T:System.ArgumentNullException">Output stream is null</exception>
      <exception cref="T:System.ArgumentException">Input file name is an empty string</exception>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfProducer.Produce(System.IO.Stream,Aspose.Pdf.ImportFormat,System.String)">
      <summary>
            Produce the PDF file using specified import format.
            <example>This sample shows how to produce Pdf file from CGM stream.
            <code>
            string inputFile = "myImage.cgm";
            string outputFile = "myPdf.pdf";
            using (FileStream inputStream = File.OpenRead(inputFile))
            using (FileStream outputStream = File.Create(outputFile))
            {
                PdfProducer.Produce(inputStream, ImportFormat.Cgm, outputStream);
            }
            </code></example></summary>
      <param name="inputStream">Input stream.</param>
      <param name="format">Import format.</param>
      <param name="outputFileName">Output PDF file</param>
      <exception cref="T:Aspose.Pdf.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception>
      <exception cref="T:System.ArgumentNullException">Input stream is null</exception>
      <exception cref="T:System.ArgumentException">Output file name is an empty string</exception>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfProducer.Produce(System.String,Aspose.Pdf.ImportFormat,System.String)">
      <summary>
            Produce the PDF file using specified import format.
            <example>This sample shows how to produce Pdf file from CGM file.
            <code>
            string inputFile = "myImage.cgm";
            string outputFile = "myPdf.pdf";
            PdfProducer.Produce(inputFile, ImportFormat.Cgm, outputFile);
            </code></example></summary>
      <param name="inputFileName">Input file name.</param>
      <param name="format">Import format.</param>
      <param name="outputFileName">Output PDF file</param>
      <exception cref="T:Aspose.Pdf.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception>
      <exception cref="T:System.ArgumentException">Input or output file name is an empty string</exception>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfProducer.Produce(System.String,Aspose.Pdf.ImportOptions,System.IO.Stream)">
      <summary>
            Produce the PDF stream using specified import option.
            <example>This sample shows how to produce Pdf stream from CGM file.
            <code>
            string inputFile = "myImage.cgm";
            string outputFile = "myPdf.pdf";
            ImportOptions importOptions = new CgmImportOptions();
            using (FileStream outputStream = File.Create(outputFile))
            {
                PdfProducer.Produce(inputFile, importOptions, outputStream);
            }
            </code></example></summary>
      <param name="inputFileName">Input file name.</param>
      <param name="options">Import option.</param>
      <param name="outputStream">Output PDF stream.</param>
      <exception cref="T:Aspose.Pdf.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception>
      <exception cref="T:System.ArgumentNullException">Output stream is null</exception>
      <exception cref="T:System.ArgumentException">Input file name is an empty string</exception>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfProducer.Produce(System.IO.Stream,Aspose.Pdf.ImportOptions,System.String)">
      <summary>
            Produce the PDF file using specified import option.
            <example>This sample shows how to produce Pdf file from CGM stream.
            <code>
            string inputFile = "myImage.cgm";
            string outputFile = "myPdf.pdf";
            ImportOptions importOptions = new CgmImportOptions();
            using (FileStream inputStream = File.OpenRead(inputFile))
            {
                PdfProducer.Produce(inputStream, importOptions, outputFile);
            }
            </code></example></summary>
      <param name="inputStream">Input stream.</param>
      <param name="options">Import option.</param>
      <param name="outputFileName">Output PDF file.</param>
      <exception cref="T:Aspose.Pdf.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception>
      <exception cref="T:System.ArgumentNullException">Input stream is null</exception>
      <exception cref="T:System.ArgumentException">Output file name is an empty string</exception>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfProducer.Produce(System.String,Aspose.Pdf.ImportOptions,System.String)">
      <summary>
            Produce the PDF file using specified import option.
            <example>This sample shows how to produce Pdf file from CGM file.
            <code>
            string inputFile = "myImage.cgm";
            string outputFile = "myPdf.pdf";
            ImportOptions importOptions = new CgmImportOptions();
            PdfProducer.Produce(inputStream, importOptions, outputStream);
            </code></example></summary>
      <param name="inputFileName">Input file name.</param>
      <param name="options">Import option.</param>
      <param name="outputFileName">Output PDF stream.</param>
      <exception cref="T:Aspose.Pdf.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception>
      <exception cref="T:System.ArgumentException">Input or output file name is an empty string</exception>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfProducer.Produce(System.IO.Stream,Aspose.Pdf.ImportOptions,System.IO.Stream)">
      <summary>
            Produce the PDF file using specified import option.
            <example>This sample shows how to produce Pdf stream from CGM stream.
            <code>
            string inputFile = "myImage.cgm";
            string outputFile = "myPdf.pdf";
            ImportOptions importOptions = new CgmImportOptions();
            using (FileStream inputStream = File.OpenRead(inputFile))
            using (FileStream outputStream = File.Create(outputFile))
            {
                PdfProducer.Produce(inputStream, importOptions, outputStream);
            }
            </code></example></summary>
      <param name="inputStream">Input stream.</param>
      <param name="options">Import option.</param>
      <param name="outputStream">Output PDF stream.</param>
      <exception cref="T:Aspose.Pdf.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception>
      <exception cref="T:System.ArgumentNullException">Input or output stream is null.</exception>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfViewer">
      <summary>
            Represents a class to view or print a pdf.
            </summary>
    </member>
    <member name="E:Aspose.Pdf.Facades.PdfViewer.PdfQueryPageSettings">
      <summary>
            Adds/removes subscription on the last page printing event.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.ShowHiddenAreas">
      <summary>
            Gets or sets flag that controls visibility of hidden areas on the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.PrintStatus">
      <summary>
            Gets the result of printing job. If success than null; otherwise, exception object.
            </summary>
    </member>
    <member name="E:Aspose.Pdf.Facades.PdfViewer.EndPrint">
      <summary>
            Adds/removes subscription on the last page printing event.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.UseIntermidiateImage">
      <summary>
            Gets/sets the using of conversion of pdf page into intermidiate png file during printing in file mode. Use it when the size of output file is important.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.#ctor">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfViewer" /> object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfViewer" /> object.
            </summary>
      <param name="document">Document object.</param>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.CoordinateType">
      <summary>
            Gets or sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.PrintAsImage">
      <summary>
            Sets or gets a mode for PdfViewer to print as image.
            </summary>
      <remarks>
            If true prints always as image (generates image that is printed)
            If false prints directly to device if all features are supported. In case document contains non-supported features the system may automatically decide to print as image.
            
            Default falue is false.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.PageCount">
      <summary>
            Gets page count of the current Pdf file.
            </summary>
      <returns>return page count.</returns>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.Password">
      <summary>
            Gets or sets input document password.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.PrintPageDialog">
      <summary>
            Gets or sets a bool value that indicates whether produce the page number dialog when printing.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.PrintAsGrayscale">
      <summary>
            Gets or sets a bool value that indicates whether the page is being printed as grayscale. By default is false.
            </summary>
      <remarks>
            Default falue is false.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.PrinterJobName">
      <summary>
            Gets or sets name of document in printer queue when document is printed. Default value is file name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.FormPresentationMode">
      <summary>
            Gets or sets form presentation mode.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.RenderingOptions">
      <summary>
            Gets or sets rendering options.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.VerticalAlignment">
      <summary>
            Gets or sets a value that indicates vertical alignment
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.HorizontalAlignment">
      <summary>
            Gets or sets a value that indicates horizontal alignment
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.AutoResize">
      <summary>
            Gets or sets a bool value that indicates whether the file be printed with optimized size.
            <value>
            If false print page without page scaling.
            If true print page with scaling to fit to printable area.
            </value></summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.AutoRotate">
      <summary>
            Gets or sets a bool value that indicates whether the file be printed with auto rotation
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.AutoRotateMode">
      <summary>
            Gets or sets a AutoRotateMode value that indicates direction of rotation
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.Resolution">
      <summary>
            Gets or sets resolution during viewing and printing. The higher resolution, the slower speed. The default value is 150.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintLargePdf(System.String)">
      <summary>
             Opens and prints a large Pdf file. If your Pdf file has hundreds of pages or more or its size is 
             more than 3 MB, this method is recommended to get better performance.  
             </summary>
      <remarks>This method has integrated the opening and the printing of the file and you need not 
             calling the OpenPdfFile() explicitly. </remarks>
      <param name="filePath">The path of Pdf file.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.AutoResize = true;     //print the file with adjusted size
            viewer.AutoRotate = true;     //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintLargePdf(@"d:\test.pdf");
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer();
            viewer.AutoResize = true      'print the file with adjusted size
            viewer.AutoRotate = true      'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintLargePdf(@"d:\test.pdf")
            viewer.ClosePdfFile();
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintLargePdf(System.IO.Stream)">
      <summary>
             Opens and prints a large Pdf stream. If your Pdf file has hundreds of pages or more or its size is 
             more than 3 MB, this method is recommended to get better performance.  
             </summary>
      <remarks>This method has integrated the opening and the printing of the file and you need not 
             calling the OpenPdfFile() explicitly. </remarks>
      <param name="inputStream">The pdf stream to be opened  and printed..</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.AutoResize = true;        //print the file with adjusted size
            viewer.AutoRotate = true;        //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\test.pdf")));
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer();
            viewer.AutoResize = true         'print the file with adjusted size
            viewer.AutoRotate = true         'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\test.pdf")))
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintLargePdf(System.String,System.Drawing.Printing.PrinterSettings)">
      <summary>
             Opens and prints a large Pdf file with specified printer settings. If your Pdf file has hundreds 
             of pages or more or its size is more than 3 MB, this method is recommended to get better performance. 
             </summary>
      <remarks>This method has integrated the opening and the printing of the file and you need not 
             calling the OpenPdfFile() explicitly. </remarks>
      <param name="filePath">The path of Pdf file.</param>
      <param name="printerSettings">The printer settings.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.AutoResize = true;       //print the file with adjusted size
            viewer.AutoRotate = true;       //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
            PrintDocument prtdoc = new PrintDocument();
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
            viewer.PrintLargePdf(@"d:\test.pdf",ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer();
            viewer.AutoResize = true        'print the file with adjusted size
            viewer.AutoRotate = true        'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
            Dim prtdoc As PrintDocument = new PrintDocument()
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName
            viewer.PrintLargePdf(@"d:\test.pdf",ps)
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintLargePdf(System.IO.Stream,System.Drawing.Printing.PrinterSettings)">
      <summary>
             Opens and prints a large Pdf stream with specified printer settings. If your Pdf file has hundreds 
             of pages or more or its size is more than 3 MB, this method is recommended to get better performance.  
             </summary>
      <remarks>This method has integrated the opening and the printing of the file and you need not 
             calling the OpenPdfFile() explicitly. </remarks>
      <param name="inputStream">The pdf stream to be opened  and printed..</param>
      <param name="printerSettings">The printer settings.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.AutoResize = true;       //print the file with adjusted size
            viewer.AutoRotate = true;       //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
            PrintDocument prtdoc = new PrintDocument();
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
            viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\middleware.pdf")),ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer();
            viewer.AutoResize = true        'print the file with adjusted size
            viewer.AutoRotate = true        'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
            Dim prtdoc As PrintDocument = new PrintDocument()
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName
            viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\middleware.pdf")),ps)
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintLargePdf(System.String,System.Drawing.Printing.PageSettings,System.Drawing.Printing.PrinterSettings)">
      <summary>
             Opens and prints a large Pdf file with specified page settings and printer settings. If your Pdf 
             file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to 
             get better performance.
             </summary>
      <remarks>This method has integrated the opening and the printing of the file and you need not 
             calling the OpenPdfFile() explicitly. </remarks>
      <param name="filePath">The path of Pdf file.</param>
      <param name="pageSettings">The page settings.</param>
      <param name="printerSettings">The printer settings.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.AutoResize = true;       //print the file with adjusted size
            viewer.AutoRotate = true;       //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
            PrintDocument prtdoc = new PrintDocument();
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
            PageSettings pgs = new PageSettings();
            pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169);
            pgs.Margins = new Margins(0, 0, 0, 0);
            viewer.PrintLargePdf(@"d:\test.pdf",pgs,ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer();
            viewer.AutoResize = true       'print the file with adjusted size
            viewer.AutoRotate = true       'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
            Dim prtdoc As PrintDocument = new PrintDocument()
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName
            Dim pgs As PageSettings=new PageSettings()
            pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169)
            pgs.Margins = new Margins(0, 0, 0, 0)
            viewer.PrintLargePdf(@"d:\test.pdf",pgs,ps)
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintLargePdf(System.IO.Stream,System.Drawing.Printing.PageSettings,System.Drawing.Printing.PrinterSettings)">
      <summary>
             Opens and prints a large Pdf stream with specified page settings and printer settings. If your Pdf 
             file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to 
             get better performance. 
             </summary>
      <remarks>This method has integrated the opening and the printing of the file and you need not 
             calling the OpenPdfFile() explicitly. </remarks>
      <param name="inputStream">The pdf stream to be opened and printed.</param>
      <param name="pageSettings">The page settings.</param>
      <param name="printerSettings">The printer settings.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.AutoResize = true;       //print the file with adjusted size
            viewer.AutoRotate = true;       //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
            PrintDocument prtdoc = new PrintDocument();
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
            PageSettings pgs = new PageSettings();
            pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169);
            pgs.Margins = new Margins(0, 0, 0, 0);
            viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\middleware.pdf")),pgs,ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer();
            viewer.AutoResize = true       'print the file with adjusted size
            viewer.AutoRotate = true       'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
            Dim prtdoc As PrintDocument = new PrintDocument()
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName
            Dim pgs As PageSettings=new PageSettings()
            pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169)
            pgs.Margins = new Margins(0, 0, 0, 0)
            viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\middleware.pdf")),pgs,ps)
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.DecodeAllPages">
      <summary>
            Get pages of current pdf file.
            </summary>
      <returns>return the array of Pdf page images.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.DecodePage(System.Int32)">
      <summary>
            Decodes a page of one Pdf file.
            </summary>
      <param name="pageNumber">The page number of one Pdf file which must be between 1 and PageCount.</param>
      <returns>return the Pdf page image.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintDocumentWithSetup">
      <summary>
             Prints the Pdf document with a setup dialog. Choose a printer using the dialog.
             </summary>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.OpenPdfFile(@"d:\test.pdf");
            viewer.AutoResize = true;         //print the file with adjusted size
            viewer.AutoRotate = true;         //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintDocumentWithSetup();
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer()
            viewer.OpenPdfFile(@"d:\test.pdf")   
            viewer.AutoResize = true          'print the file with adjusted size
            viewer.AutoRotate = true          'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintDocumentWithSetup()
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintDocumentWithSettings(System.Drawing.Printing.PageSettings,System.Drawing.Printing.PrinterSettings)">
      <summary>
             Prints the Pdf document with settings. If the document size is not complatible to page size, pdf.kit will extend it to fit page size.
             </summary>
      <param name="pageSettings">The page setting of the printing document.</param>
      <param name="printerSettings">The printer setting of the printing document.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.OpenPdfFile(@"d:\test.pdf");
            viewer.AutoResize = true;         //print the file with adjusted size
            viewer.AutoRotate = true;         //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
            PrintDocument prtdoc = new PrintDocument();
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
            PageSettings pgs = new PageSettings();
            pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169);
            pgs.Margins = new Margins(0, 0, 0, 0);
            viewer.PrintDocumentWithSettings(pgs, ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer()
            viewer.OpenPdfFile(@"d:\test.pdf")
            viewer.AutoResize = true;           'print the file with adjusted size
            viewer.AutoRotate = true;           'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
            Dim prtdoc As PrintDocument = new PrintDocument()
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName
            Dim pgs As PageSettings=new PageSettings()
            pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169)
            pgs.Margins = new Margins(0, 0, 0, 0)
            viewer.PrintDocumentWithSettings(pgs, ps)
            viewer.ClosePdfFile()
             </code>
        <remarks>
             printerSettings object is used to print the document.
             pageSettings.PrinterSettings object is ignored.
             </remarks>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintDocumentWithSettings(System.Drawing.Printing.PrinterSettings)">
      <summary>
             Prints the Pdf document with printer settings. The output page size will fit the the document first page size.
             </summary>
      <param name="printerSettings">The printer setting of the printing document.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.OpenPdfFile(@"d:\test.pdf");
            viewer.AutoResize = true;         //print the file with adjusted size
            viewer.AutoRotate = true;         //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
            PrintDocument prtdoc = new PrintDocument();
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
            viewer.PrintDocumentWithSettings(ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer()
            viewer.OpenPdfFile(@"d:\test.pdf")
            viewer.AutoResize = true;        'print the file with adjusted size
            viewer.AutoRotate = true;        'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
            Dim prtdoc As PrintDocument = new PrintDocument()
            ps.PrinterName = prtdoc.PrinterSettings.PrinterName
            viewer.PrintDocumentWithSettings(ps);
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.PrintDocument">
      <summary>
             Prints the Pdf document using default printer.
             </summary>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.OpenPdfFile(@"d:\test.pdf");
            viewer.AutoResize = true;         //print the file with adjusted size
            viewer.AutoRotate = true;         //print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintDocument(ps);
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer()
            viewer.OpenPdfFile(@"d:\test.pdf")
            viewer.AutoResize = true;         'print the file with adjusted size
            viewer.AutoRotate = true;         'print the file with adjusted rotation
            viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
            viewer.PrintDocument(ps);
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.GetDefaultPageSettings">
      <summary>
            Gets the default page settings.
            </summary>
      <returns>Page settings object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.GetDefaultPrinterSettings">
      <summary>
            Gets the default printer settings.
            </summary>
      <returns>Printer settings object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.OpenPdfFile(System.String)">
      <summary>
             Opens a Pdf file, but does not actually decode the pages of the Pdf file.
             </summary>
      <param name="filePath">The path of Pdf file.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.OpenPdfFile(@"d:\test.pdf");
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer()
            viewer.OpenPdfFile(@"d:\test.pdf")
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.OpenPdfFile(System.IO.Stream)">
      <summary>
             Opens a Pdf file stream. But does not actually decode the pages of the Pdf file. 
             </summary>
      <param name="inputStream">The pdf stream to be opened.</param>
      <example>
        <code>
             [C#]
            PdfViewer viewer = new PdfViewer();
            viewer.OpenPdfFile(new MemoryStream(File.ReadAllBytes(@"d:\test.pdf")));
            viewer.ClosePdfFile();
            
            [VisualBasic]
            Dim viewer As PdfViewer = new PdfViewer()
            viewer.OpenPdfFile(new MemoryStream(File.ReadAllBytes(@"d:\test.pdf")))
            viewer.ClosePdfFile()
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.ClosePdfFile">
      <summary>
            Closes the current Pdf file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfViewer.ScaleFactor">
      <summary>
            Gets or sets a floating point value that indicates scale factor. The default value is 1.0.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.BindPdf(System.String)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcFile">The PDF file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.BindPdf(System.IO.Stream)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcStream">The stream of PDF file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.BindPdf(Aspose.Pdf.Document)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcDoc">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.Save(System.String)">
      <summary>
            Saves the result PDF document to file.
            </summary>
      <param name="destFile">The path of output PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.Save(System.IO.Stream)">
      <summary>
            Saves the result PDF document to stream.
            </summary>
      <param name="destStream">The stream of output PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.Close">
      <summary>
            Closes the facade.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfViewer.Dispose">
      <summary>
            Disposes the facade resources.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PdfXmpMetadata">
      <summary>
            Class for manipulation with XMP metadata.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.#ctor">
      <summary>
            Constructor for PdfXmpMetadata.
            </summary>
      <example>
        <code lang="C#">
            PdfXmlMetadata xmp = new PdfXmpMetadata();
            xmp.BindPdf("input.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.Facades.PdfXmpMetadata" /> object on base of the <paramref name="document" />.
            </summary>
      <param name="document">
            Pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.RegisterNamespaceURI(System.String,System.String)">
      <summary>
            Registers the namespace URI.
            </summary>
      <param name="prefix">The prefix.</param>
      <param name="namespaceURI">The namespace URI.</param>
      <example>
        <code lang="C#">
            PdfXmpMetadata xmp = new PdfXmpMetadata("input.pdf");
            xmp.RegisterNamespaceURI("xmp", "http://ns.adobe.com/xap/1.0/");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.GetNamespaceURIByPrefix(System.String)">
      <summary>
            Gets namespace URI by prefix.
            </summary>
      <param name="prefix">The prefix.</param>
      <returns>Namespace URI.</returns>
      <example>
        <code lang="C#">
            PdfXmpMetadata xmp = new PdfXmpMetadata("input.pdf");
            Console.WriteLine(xmp.GetNamespaceURIByPrefix("xmp"));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.GetPrefixByNamespaceURI(System.String)">
      <summary>
            Gets the prefix by namespace URI.
            </summary>
      <param name="namespaceURI">Namespace URI.</param>
      <returns>The prefix value.</returns>
      <example>
        <code lang="C#">
            PdfXmpMetadata xmp = new PdfXmpMetadata("input.pdf");
            Console.WriteLine(xmp.GetPrefixByNamespaceURI("http://ns.adobe.com/xap/1.0/"));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.Add(Aspose.Pdf.Facades.DefaultMetadataProperties,System.Object)">
      <summary>
            Adds value to XMP metadata.
            </summary>
      <param name="key">The key name.</param>
      <param name="value">Value which will be added.</param>
      <example>
        <code lang="C#">
            PdfXmpMetadata xmp = new PdfXmpMetadata();
            xmp.BindPdf("input.pdf");
            xmp.Add(DefaultMetadataProperties.Nickname, "name1");
            xmp.Save(TestSettings.GetOutputFile("XMP_AddedValue.pdf"));
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.Add(Aspose.Pdf.XmpPdfAExtensionObject,System.String,System.String,System.String)">
      <summary>
            Adds extension field into metadata.
            </summary>
      <param name="xmpPdfAExtensionObject">The pdf extension object to add.</param>
      <param name="namespacePrefix">The prefix of schema.</param>
      <param name="namespaceUri">The namespace uri of schema.</param>
      <param name="schemaDescription">The optional description of schema.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.Clear">
      <summary>
            Removes all elements from the object.
            </summary>
      <example>
        <code lang="C#">
            PdfXmpMetadata xmp = new PdfXmpMetadata();
            xmp.BindPdf("input.pdf");
            xmp.Clear();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.Remove(Aspose.Pdf.Facades.DefaultMetadataProperties)">
      <summary>
            Removes element with specified key.
            </summary>
      <param name="key">Key of the element which will be deleted.</param>
      <example>
        <code lang="C#">
            PdfXmpMetadata xmp = new PdfXmpMetadata();
            xmp.BindPdf("input.pdf");
            xmp.Remove(DefaultMetadataProperties.Nickname);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.Remove(Aspose.Pdf.XmpPdfAExtensionObject)">
      <summary>
            Removes pdf extension field.
            </summary>
      <param name="key">The key of value to remove.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.Add(System.Object,System.Object)">
      <summary>
            Adds new element to the dictionary object.
            </summary>
      <param name="key">Key of new element.</param>
      <param name="value">Value of the element.</param>
      <example>
        <code lang="C#">
            PdfXmpMetadata xmp = new PdfXmpMetadata();
            xmp.BindPdf("input.pdf");
            xmp.Add("xmp:Nickname", "Nickname1");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.Contains(System.Object)">
      <summary>
            Checks if dictionary contains the specified key.
            </summary>
      <param name="key">Key which will be checked.</param>
      <returns>True - if the dictionary contains the specified key; otherwise, false.</returns>
      <example>
        <code lang="C#">
            PdfXmpMetadata xmp = new PdfXmpMetadata();
            xmp.BindPdf("input.pdf");
            xmp.Add("xmp:Nickname", "Nickname1");
            if (!xmp.Contains("xmp:Nickname"))
              Console.WriteLine("Key does not exists");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.GetEnumerator">
      <summary>
            Gets enumerator object of the dictionary.
            </summary>
      <returns>The enumerator object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.Keys">
      <summary>
            Gets keys from the dictionary.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.Remove(System.Object)">
      <summary>
            Removes key from the dictionary.
            </summary>
      <param name="key">Key which will be removed.</param>
      <example>
        <code lang="C#">
            PdfXmpMetadata xmp = new PdfXmpMetadata();
            xmp.BindPdf("input.pdf");
            xmp.Remove("xmp:Nickname");
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.ExtensionFields">
      <summary>
            Gets the dictionary of extension fields.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.Values">
      <summary>
            Gets the collection of values in dictionary.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.Item(System.Object)">
      <summary>
            Gets or sets value by key.
            </summary>
      <param name="key">The key name to get/set.</param>
      <returns>Object by key</returns>
      <example>
        <code lang="C#">
            PdfXmpMetadata pxm = new PdfXmpMetadata();
            pxm.BindPdf("PdfFile.pdf");
            Console.WriteLine(pxm["xmp:Nickname"]);
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.IsFixedSize">
      <summary>
            Returns true is collection has fixed size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.IsReadOnly">
      <summary>
            Returns true if collection is read-only.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.CopyTo(System.Array,System.Int32)">
      <summary>
            Copy metadata into array.
            </summary>
      <param name="array">The destination array.</param>
      <param name="index">The starting index.</param>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.Count">
      <summary>
            Gets count if items in the collection.
            </summary>
      <example>
        <code lang="C#">
            PdfXmpMetadata pxm = new PdfXmpMetadata();
            pxm.BindPdf("PdfFile.pdf");
            Console.WriteLine("Count = " + pxm.Count);
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.IsSynchronized">
      <summary>
            Returns true if collection is synchronized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.SyncRoot">
      <summary>
            Gets synchroniztion object of the collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.PdfXmpMetadata.Item(Aspose.Pdf.Facades.DefaultMetadataProperties)">
      <summary>
            Gets value of XMP metadata by key.
            </summary>
      <param name="key">Key of the value.</param>
      <returns>Value from XMP metadata.</returns>
      <example>
        <code lang="C#">
            PdfXmpMetadata pxm = new PdfXmpMetadata();
            pxm.BindPdf("PdfFile.pdf");
            Console.WriteLine(pxm[DefaultMetadataProperties.CreatorTool]);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.GetXmpMetadata">
      <summary>
            Get the XmpMetadata of the input pdf in a xml format.
            </summary>
      <returns>The bytes of the XmpMetadata.</returns>
      <example>
        <code lang="C#">
            PdfXmpMetadata pxm = new PdfXmpMetadata();
            pxm.BindPdf("PdfFile.pdf");
            byte[] data = pxm.GetXmpMetadata();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.PdfXmpMetadata.GetXmpMetadata(System.String)">
      <summary>
            Get a part of the XmpMetadata of the input pdf according to a meta name.
            </summary>
      <param name="name">Metadata name.</param>
      <returns>Bytes of metadata.</returns>
      <example>
        <code lang="C#">
            PdfXmpMetadata pxm = new PdfXmpMetadata();
            pxm.BindPdf("PdfFile.pdf");
            byte[] data = pxm.GetXmpMetadata("dc:creator");
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Facades.PositioningMode">
      <summary>
            Defines positioning mode.
            Possible values include Legacy (backward compatibility) and 
            Current (updated text position calculation method)
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PositioningMode.Legacy">
      <summary>
            Legacy text positioning
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PositioningMode.ModernLineSpacing">
      <summary>
            Updated line spacing, vertical position calculation is done by the old rules 
            (i.e. text is positioned relative to bottom-left corner of the specified rectangle)
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PositioningMode.Current">
      <summary>
            Updated line spacing and vertical position calculation is done based on left-top corner rather than left-bottom.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.PropertyFlag">
      <summary>
            Enumeration of possible field flags.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PropertyFlag.ReadOnly">
      <summary>
            Field is read-only.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PropertyFlag.Required">
      <summary>
            Field is required.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PropertyFlag.NoExport">
      <summary>
            Field is not exportable.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.PropertyFlag.InvalidFlag">
      <summary>
            Invalid field flag.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.Stamp">
      <summary>
            Class represeting stamp. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Stamp.StampId">
      <summary>
            Gets or sets identifier of stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Stamp.Quality">
      <summary>
            Gets or sets quality of image stamp in percent. Valiued values 0..100%. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Stamp.Opacity">
      <summary>
            Gets or sets opacity of the stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Stamp.PageNumber">
      <summary>
            Gets or sets page number. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Stamp.Pages">
      <summary>
            Gets or sets array with numbers of pages which will be affected by stamp. 
            If Pages = null all pages of the document are affected.
            </summary>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
            Stamp stamp = new Aspose.Pdf.Facades.Stamp();
            stamp.BindLogo(new FormattedText(text));
            //put stamp only on 1st, 4th and 6th page.
            stamp.Pages = new int[] { 1, 4, 6 };
            fileStamp.AddStamp(stamp);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.Stamp.Rotation">
      <summary>
            Gets or sets rotation of the stamp in degrees.
            </summary>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
            Stamp stamp = new Stamp();
            stamp.BindLogo(new FormattedText("STAMP"));
            stamp.Rotation = 90;
            fileStamp.AddStamp(stamp);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Facades.Stamp.IsBackground">
      <summary>
            Gets or sets background status. If true stamp will be placed as background of the spamped page.
            By default is set to false.
            </summary>
            /// <example><code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
            Stamp stamp = new Stamp();
            stamp.BindLogo(new FormattedText("STAMP"));
            stamp.IsBackground = true;
            fileStamp.AddStamp(stamp);
            fileStamp.Close();
            </code></example></member>
    <member name="P:Aspose.Pdf.Facades.Stamp.BlendingSpace">
      <summary>
            Gets or sets a BlendingColorSpace value that defines a color space 
            that is used to perform transparency and blending operations on the page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.Stamp.BindPdf(System.String,System.Int32)">
      <summary>
            Sets PDF file and number of page which will be used as stamp.
            </summary>
      <param name="pdfFile">Path to PDF file.</param>
      <param name="pageNumber">Number of page in PDF file</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
            Stamp stamp = new Stamp();
            //First page will be used as stamp.
            stamp.BindPdf("stamp.pdf", 1);
            stamp.IsBackground = true;
            fileStamp.AddStamp(stamp);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Stamp.BindPdf(System.IO.Stream,System.Int32)">
      <summary>
             Sets PDF file and number of page which will be used as stamp.
            </summary>
      <param name="pdfStream">Stream which contains PDF document.</param>
      <param name="pageNumber">Page index of the document whihc will be used as stamp.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
            Stamp stamp = new Stamp();
            //First page will be used as stamp.
            Stream stream = new FileStream("stamp.pdf", FileMode.Open, FileAccess.Read);
            stamp.BindPdf(stream, 1);
            fileStamp.AddStamp(stamp);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Stamp.BindImage(System.String)">
      <summary>
            Sets image as a stamp.
            </summary>
      <param name="imageFile">Image file name and path.</param>
      <example>
        <code lang="C#">
            PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
            Stamp stamp = new Stamp();
            stamp.BindImage("image.jpg");
            fileStamp.AddStamp(stamp);
            fileStamp.Close();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Facades.Stamp.BindLogo(Aspose.Pdf.Facades.FormattedText)">
      <summary>
            Sets text as stamp.
            </summary>
      <param name="formattedText">FormattedText object which specifies text and text properties.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Stamp.BindTextState(Aspose.Pdf.Text.TextState)">
      <summary>
            Sets text state of stamp text.
            </summary>
      <param name="textState">TextState object which specifies text properties.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Stamp.SetOrigin(System.Single,System.Single)">
      <summary>
            Sets position on page where stamp will be placed.
            </summary>
      <param name="originX">X coordinate of the stamp.</param>
      <param name="originY">Y coordinate of the stamp.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Stamp.SetImageSize(System.Single,System.Single)">
      <summary>
            Sets size of image stamp. Image will be scaled according to the specified values.
            </summary>
      <param name="width">Image width.</param>
      <param name="height">Image height.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Stamp.BindImage(System.IO.Stream)">
      <summary>
            Sets image which will be used as stamp.
            </summary>
      <param name="image">Stream which contains image data.</param>
    </member>
    <member name="T:Aspose.Pdf.Facades.StampInfo">
      <summary>
            Class representing stamp information.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.StampInfo.StampId">
      <summary>
            Gets identifier of the stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.StampInfo.IndexOnPage">
      <summary>
            Gets stamp index on the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.StampInfo.StampType">
      <summary>
            Gets stamp type (image / form).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.StampInfo.Rectangle">
      <summary>
            Gets rectangle where stamp is placed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.StampInfo.Image">
      <summary>
            Gets image of stamp. May be null if stamp does not contain images (for example for text stamp).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.StampInfo.Form">
      <summary>
            Gets XForm of the stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.StampInfo.Text">
      <summary>
            Gets text in the stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.StampInfo.Visible">
      <summary>
            Gets visibility of stamp. If false then stamp is hidden (with HideStampById). Hidden stamp may be restored by ShowStampById.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.StampType">
      <summary>
            Describes stamp types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.StampType.Form">
      <summary>
            Stamp if Form.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.StampType.Image">
      <summary>
            Stamp is image.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.SubmitFormFlag">
      <summary>
            Enumeration of possible submit form flags.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.SubmitFormFlag.Fdf">
      <summary>
            Data will be returned in FDF format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.SubmitFormFlag.Html">
      <summary>
            Data will be returned in HTML format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.SubmitFormFlag.Xfdf">
      <summary>
            Data will be returned in XFDF format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.SubmitFormFlag.FdfWithComments">
      <summary>
            Data will be returned in FDF format with comments.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.SubmitFormFlag.XfdfWithComments">
      <summary>
            Data will be returned in XFDF format with comments.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.SubmitFormFlag.Pdf">
      <summary>
            Whole PDF file will be submitted.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.TextProperties">
      <summary>
            Represents text properties such as: text size, color, style etc.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.TextProperties.Color">
      <summary>
            Gets or sets text color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.TextProperties.IsColorSpecified">
      <summary>
            Gets or sets a value that indicates whether the <see cref="P:Aspose.Pdf.Facades.TextProperties.Color" /> property is specified.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.TextProperties.TextSize">
      <summary>
            Gets or sets text size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.TextProperties.IsTextSizeSpecified">
      <summary>
            Gets or sets a value that indicates whether the <see cref="P:Aspose.Pdf.Facades.TextProperties.TextSize" /> property is specified.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.TextProperties.#ctor(System.Double)">
      <summary>
            Creates <see cref="T:Aspose.Pdf.Facades.TextProperties" /> object for the specified text size
            </summary>
      <param name="textSize">Text size value.</param>
    </member>
    <member name="T:Aspose.Pdf.Facades.VerticalAlignmentType">
      <summary>
            Class representing possible vertical alignment values.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.VerticalAlignmentType.#ctor(System.String)">
      <summary>
            Initializes vertical alignment by its name.
            </summary>
      <param name="name">Vertical alignment type name.</param>
    </member>
    <member name="F:Aspose.Pdf.Facades.VerticalAlignmentType.Top">
      <summary>
            Top alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.VerticalAlignmentType.Center">
      <summary>
            Center alignment type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.VerticalAlignmentType.Bottom">
      <summary>
            Bottom alignment type.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.VerticalAlignmentType.ToString">
      <summary>
            Returns string representation.
            </summary>
      <returns>Name value.</returns>
    </member>
    <member name="T:Aspose.Pdf.Facades.ViewerPreference">
      <summary>
            Describes viewer prefereces (page mode, non full screen page mode, page layout).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageModeUseOC">
      <summary>
            Optional content group panel visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.DisplayDocTitle">
      <summary>
            A flag specifying whether the window’s title bar should display the document title
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.NonFullScreenPageModeUseOC">
      <summary>
            Optional content group panel visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageLayoutSinglePage">
      <summary>
            Display one page at a time.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageLayoutOneColumn">
      <summary>
            Display the pages in one column.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageLayoutTwoColumnLeft">
      <summary>
            Display the pages in two columns, with odd-numbered pages on the right
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageLayoutTwoColumnRight">
      <summary>
            Display the pages in two columns, with odd-numbered pages on the right.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageModeUseNone">
      <summary>
            Neither document outline nor thumbnail images visible
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageModeUseOutlines">
      <summary>
            Document outline visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageModeUseThumbs">
      <summary>
            Thumbnail images visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageModeFullScreen">
      <summary>
            Full-screen mode, with no menu bar, window controls, or any other window visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.PageModeUseAttachment">
      <summary>
            Page mode with attacments.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.HideToolbar">
      <summary>
            A flag specifying whether to hide the conforming reader’s tool bars when the document is active.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.HideMenubar">
      <summary>
            A flag specifying whether to hide the conforming reader’s menu bar when the document is active.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.HideWindowUI">
      <summary>
            A flag specifying whether to hide user interface elements in the document’s window (such as scroll bars and navigation controls), leaving only the document’s contents displayed.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.FitWindow">
      <summary>
            A flag specifying whether to resize the document’s window to fit the size of the first displayed page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.CenterWindow">
      <summary>
            A flag specifying whether to position the document’s window in the center of the screen.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.NonFullScreenPageModeUseNone">
      <summary>
            Neither document outline nor thumbnail images visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.NonFullScreenPageModeUseOutlines">
      <summary>
            Document outline visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.NonFullScreenPageModeUseThumbs">
      <summary>
            Thumbnail images visible
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.DirectionL2R">
      <summary>
            Text reading order left to right.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.DirectionR2L">
      <summary>
            Text reading order right to left.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.Simplex">
      <summary>
            Print single-sided.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.DuplexFlipShortEdge">
      <summary>
            Duplex and flip on the short edge of the sheet.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ViewerPreference.DuplexFlipLongEdge">
      <summary>
            Duplex and flip on the short edge of the sheet.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.WordWrapMode">
      <summary>
            Defines word wrapping strategies
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.WordWrapMode.Default">
      <summary>
            Default algorithm (allows breaking words in the middle)
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.WordWrapMode.ByWords">
      <summary>
            Word wrapping only wraps complete words.
            If the complete word cannot be wrapped, attempts
            to wrap word in the middle
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.ReplaceTextStrategy">
      <summary>
            This class contains parameters which define PdfContentEditor behavior when ReplaceText operation is performed. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.ReplaceTextStrategy.Scope">
      <summary>
            Scope where replace text operation is applied 
            REPLACE_FIRST by default
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ReplaceTextStrategy.Scope.ReplaceFirst">
      <summary>
            Replace only first occurence of the text on each of affected pages
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ReplaceTextStrategy.Scope.ReplaceAll">
      <summary>
            Replace all text occurences on all affected pages
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.ReplaceTextStrategy.NoCharacterAction">
      <summary>
            Action to perform if font does not contain required character 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ReplaceTextStrategy.NoCharacterAction.ThrowException">
      <summary>
            Throw exception
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ReplaceTextStrategy.NoCharacterAction.UseStandardFont">
      <summary>
            Repalce font to standard font which contains required character
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.ReplaceTextStrategy.NoCharacterAction.ReplaceAnyway">
      <summary>
            Replace text anyway without font substitution
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.ReplaceTextStrategy.IsRegularExpressionUsed">
      <summary>
            If false, string to find is a simple text. If true, string to find is regular expression.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.ReplaceTextStrategy.NoCharacterBehavior">
      <summary>
            Action which is performed when no approppriate font found for changed text
            (Throw exception / Substitute other font / Replace anyway).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.ReplaceTextStrategy.ReplaceScope">
      <summary>
            Scope of the replacement operation (replace first occurence or replace all occurences).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.AutoRotateMode">
      <summary>
            Direction of the rotation when document is printed.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.AutoRotateMode.None">
      <summary>
            No rotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.AutoRotateMode.ClockWise">
      <summary>
            Rotation direction is clockwise.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Facades.AutoRotateMode.AntiClockWise">
      <summary>
            Rotation directon is counterclockwise.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.NamespaceDoc">
      <summary>
            The <b>Aspose.Pdf.Facades</b> namespace provides classes originaly came from Aspose.Pdf.Kit. These classes are used for manipulating documents
            perfoming operations like concatenating, stamping, signing, annotating etc. but on the high level without access to a document's inner structure.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.Facade">
      <summary>
            Base facade class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Facades.Facade.Document">
      <summary>
            Gets the document facade is working on.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.Facade.#ctor">
      <summary>
            The constructor.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.Facade.#ctor(Aspose.Pdf.Document)">
      <summary>
            The constructor.
            </summary>
      <param name="srcDoc">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Facade.BindPdf(System.String)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcFile">The PDF file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Facade.BindPdf(System.IO.Stream)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcStream">The stream of PDF file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Facade.BindPdf(Aspose.Pdf.Document)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcDoc">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Facade.BindPdf(System.String,System.String)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcFile">The PDF file.</param>
      <param name="password">The password of the PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Facade.BindPdf(System.IO.Stream,System.String)">
      <summary>
            Initializes the facade.
            </summary>
      <param name="srcStream">The stream of PDF file.</param>
      <param name="password">The password of the PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.Facade.Close">
      <summary>
            Disposes Aspose.Pdf.Document bound with a facade.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.Facade.Dispose">
      <summary>
            Disposes the facade.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.Facade.AssertDocument">
      <summary>
            Asserts if the facade is initialized.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.SaveableFacade">
      <summary>
            Base class for all saveable facades.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.SaveableFacade.#ctor">
      <summary>
            The constructor.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.SaveableFacade.#ctor(Aspose.Pdf.Document)">
      <summary>
            The constructor.
            </summary>
      <param name="srcDoc">The Aspose.Pdf.Document object.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.SaveableFacade.Save(System.String)">
      <summary>
            Saves the PDF document to the specified file.
            </summary>
      <param name="destFile">The destination file.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.SaveableFacade.Save(System.IO.Stream)">
      <summary>
            Saves the PDF document to the specified stream.
            </summary>
      <param name="destStream">The destination stream.</param>
    </member>
    <member name="T:Aspose.Pdf.Facades.IFacade">
      <summary>
            General facade interface that defines common facades methods.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.IFacade.BindPdf(System.String)">
      <summary>
            Binds PDF document for editing.
            </summary>
      <param name="srcFile">The path of input PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.IFacade.BindPdf(System.IO.Stream)">
      <summary>
            Binds PDF document for editing.
            </summary>
      <param name="srcStream">The stream of input PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.IFacade.BindPdf(Aspose.Pdf.Document)">
      <summary>
            Binds PDF document for editing.
            </summary>
      <param name="srcDoc">Input PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.IFacade.Close">
      <summary>
            Releases any resources associates with the current facade.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Facades.ISaveableFacade">
      <summary>
            Facade interface that defines methods common for all saveable facades.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Facades.ISaveableFacade.Save(System.String)">
      <summary>
            Saves the result PDF document to file.
            </summary>
      <param name="destFile">The path of output PDF document.</param>
    </member>
    <member name="M:Aspose.Pdf.Facades.ISaveableFacade.Save(System.IO.Stream)">
      <summary>
            Saves the result PDF document to stream.
            </summary>
      <param name="destStream">The stream of output PDF document.</param>
    </member>
    <member name="T:Aspose.Pdf.FileEncoding">
      <summary>
            Encoding of the attached file. Possible values: Zip - file is compressed with ZIP, None - file is non compressed.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.FileEncoding.None">
      <summary>
             File is not compressed.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.FileEncoding.Zip">
      <summary>
            File is compressed with ZIP algorithhm. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ColumnInfo">
      <summary>
            This class represents a columns info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ColumnInfo.ColumnWidths">
      <summary>
            Gets or sets a string that contains the width of columns. 
            The value of each column should be separated by blank.The default unit is point,
            but cm, inch and percentage of available width are also supported.
            For example,"120 2.5cm 1.5inch"
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ColumnInfo.ColumnSpacing">
      <summary>
            Gets or sets a string that contains the spacing between columns. 
            The value of each spacing should be separated by blank. The default unit is point,
            but cm and inch are also supported.For example,"120 2.5cm 1.5inch".
            </summary>
      <remarks>
            If this property is not set, default value 0 will be used for each spacing.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.ColumnInfo.ColumnCount">
      <summary>
            Gets or sets a int value that indicates the number of columns.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Drawing.GradientAxialShading">
      <summary>
            Represents gradient axial shading class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Drawing.GradientAxialShading.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.GradientAxialShading" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Drawing.GradientAxialShading.#ctor(Aspose.Pdf.Color,Aspose.Pdf.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.GradientAxialShading" /> class.
            </summary>
      <param name="startColor">The start point.</param>
      <param name="endColor">The end point.</param>
    </member>
    <member name="P:Aspose.Pdf.Drawing.GradientAxialShading.Start">
      <summary>
            Gets or sets start point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.GradientAxialShading.End">
      <summary>
            Gets or sets end point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.GradientAxialShading.StartColor">
      <summary>
            Gets or sets start color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.GradientAxialShading.EndColor">
      <summary>
            Gets or sets end color.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Drawing.PatternColorSpace">
      <summary>
            Represents base pattern class.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Drawing.Ellipse">
      <summary>
            Represents ellipse.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Drawing.Ellipse.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.Ellipse" /> class.
            </summary>
      <param name="left">The left position of the ellipse.</param>
      <param name="bottom">The bottom position of the ellipse.</param>
      <param name="width">The width of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Ellipse.Left">
      <summary>
            Gets or sets a float value that indicates the left position of the ellipse.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Ellipse.Bottom">
      <summary>
            Gets or sets a float value that indicates the bottom position of the ellipse.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Ellipse.Width">
      <summary>
            Gets or sets a float value that indicates the width of the ellipse.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Ellipse.Height">
      <summary>
            Gets or sets a float value that indicates the height of the ellipse.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Drawing.Path">
      <summary>
            Represents arc.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Drawing.Path.#ctor(Aspose.Pdf.Drawing.Shape[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.Path" /> class.
            </summary>
      <param name="shapes">The shape array contains path segments set.</param>
    </member>
    <member name="M:Aspose.Pdf.Drawing.Path.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.Path" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Path.Shapes">
      <summary>
            Gets or sets shapes collection.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Drawing.NamespaceDoc">
      <summary>
            The <b>Aspose.Pdf.Drawing</b> namespace provides classes describing graphic primitives like arc, line, circle etc. 
            Corresponding objects can be used for creating new documents.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Drawing.Arc">
      <summary>
            Represents arc.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Drawing.Arc.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.Arc" /> class.
            </summary>
      <param name="posX">The x-coordinate of the center point of the arc.</param>
      <param name="posY">The y-coordinate of the center point of the arc.</param>
      <param name="radius">The radius value of the arc.</param>
      <param name="alpha">The beginning angle value of the arc.</param>
      <param name="beta">The end angle value of the arc.</param>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Arc.PosX">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the center of the arc.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Arc.PosY">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the center of the arc.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Arc.Radius">
      <summary>
            Gets or sets a float value that indicates the radius of the arc.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Arc.Alpha">
      <summary>
            Gets or sets a float value that indicates the beginning angle degree of the arc.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Arc.Beta">
      <summary>
            Gets or sets a float value that indicates the ending angle degree of the arc.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Drawing.Circle">
      <summary>
            Represents circle.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Drawing.Circle.#ctor(System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.Circle" /> class.
            </summary>
      <param name="posX">The x-coordinate of the center of the circle.</param>
      <param name="posY">The y-coordinate of the center of the circle.</param>
      <param name="radius">The radius of the circle.</param>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Circle.PosX">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the center of the circle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Circle.PosY">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the center of the circle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Circle.Radius">
      <summary>
            Gets or sets a float value that indicates the radius of the circle.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Drawing.Curve">
      <summary>
            Represents bezier curve.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Drawing.Curve.#ctor(System.Single[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.Curve" /> class.
            </summary>
      <param name="positionArray">The position array of the control points of the curve.There should be four 
            control points,so the length of the array should be eight.</param>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Curve.PositionArray">
      <summary>
            Gets or sets a float position array.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Drawing.Graph">
      <summary>
            Represents graph - graphics generator paragraph.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Drawing.Graph.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.Graph" /> class.
            </summary>
      <param name="width">The width of the graph.</param>
      <param name="height">The height of the graph.</param>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Graph.GraphInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Drawing.Graph.GraphInfo" /> object that indicates the graph info,such as color,
            line width,etc.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Graph.Border">
      <summary>
            Gets or sets the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Graph.IsChangePosition">
      <summary>
            Gets or sets change curret position after process paragraph.(default true)
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Graph.Left">
      <summary>
            Gets or sets the table left coordinate.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Graph.Top">
      <summary>
            Gets or sets the table top coordinate.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Graph.Shapes">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Drawing.Graph.Shapes" /> collection that indicates all shapes in the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Graph.Title">
      <summary>
            Gets or sets a string value that indicates the title of the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Graph.Width">
      <summary>
            Gets or sets a float value that indicates the graph width.
            The unit is point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Graph.Height">
      <summary>
            Gets or sets a float value that indicates the graph height.
            The unit is point.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Drawing.Graph.Clone">
      <summary>
            Clone the graph.
            </summary>
      <returns>The cloned object</returns>
    </member>
    <member name="T:Aspose.Pdf.Drawing.Line">
      <summary>
            Represents line.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Drawing.Line.#ctor(System.Single[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.Line" /> class.
            </summary>
      <param name="positionArray">The line position array.</param>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Line.PositionArray">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Drawing.Line.PositionArray" /> object that indicates the position array.The array is 
            composed by coordinates of each control point of the line. 
            directly.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Drawing.Rectangle">
      <summary>
            Represents rectangle.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Drawing.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.Rectangle" /> class.
            </summary>
      <param name="left">The left position of the rectangle.</param>
      <param name="bottom">The bottom position of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Rectangle.RoundedCornerRadius">
      <summary>
            Gets or sets a float value that indicates the radius of rectangle corners.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Rectangle.Left">
      <summary>
            Gets or sets a float value that indicates the left position of the rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Rectangle.Bottom">
      <summary>
            Gets or sets a float value that indicates the bottom position of the rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Rectangle.Width">
      <summary>
            Gets or sets a float value that indicates the width of the rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Rectangle.Height">
      <summary>
            Gets or sets a float value that indicates the height of the rectangle.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Drawing.Shape">
      <summary>
            Represents shape - the base graphics object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Shape.GraphInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Drawing.Shape.GraphInfo" /> object that indicates the graph info,such as color,
            line width,etc.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Drawing.Shape.Text">
      <summary>
            Gets or sets a text for shape
            </summary>
    </member>
    <member name="T:Aspose.Pdf.FileHyperlink">
      <summary>
            Represents file hyperlink object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.FileHyperlink.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.FileHyperlink" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.FileHyperlink.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.FileHyperlink" /> class.
            </summary>
      <param name="path">Path to file.</param>
    </member>
    <member name="P:Aspose.Pdf.FileHyperlink.Path">
      <summary>
            Gets or sets the path to file.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.FormattedFragment">
      <summary>
            Represents abstract formatted fragment.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.LatexFragment">
      <summary>
            Represents LaTeX fragment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LatexFragment.LatexLoadOptionsOfInstance">
      <summary>
            Gets or sets LatexLoadOptions that will be used for loading (and rendering) of LaTeX into this instance of class.
            Please use it when it's necessary use specific setting for import of LaTeX for this or that instance
             (f.e when this or that instance should use specific BasePath for imported LaTeX or should use specific loader of external resources)
            If parameter is default (null), then standard LaTeX loading options will be used.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.LatexFragment.#ctor(System.String)">
      <summary>
            Initializes a new instance of the HtmlFragment class.
            </summary>
      <param name="text">The fragment text</param>
    </member>
    <member name="M:Aspose.Pdf.LatexFragment.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the HtmlFragment class.
            </summary>
      <param name="text">The fragment text</param>
      <param name="removeIndents">Determines whether not to make indents while typesetting LaTeX fragment</param>
    </member>
    <member name="T:Aspose.Pdf.LocalHyperlink">
      <summary>
            Represents local hyperlink object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.LocalHyperlink.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.LocalHyperlink" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.LocalHyperlink.#ctor(Aspose.Pdf.BaseParagraph)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.LocalHyperlink" /> class.
            </summary>
      <param name="target">Target paragraph.</param>
    </member>
    <member name="P:Aspose.Pdf.LocalHyperlink.Target">
      <summary>
            Gets or sets the target paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LocalHyperlink.TargetPageNumber">
      <summary>
            Gets or sets the target page number.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Note">
      <summary>
            This class represents generator paragraph note.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Note.Paragraphs">
      <summary>
            Gets or sets a collection that indicates all paragraphs in the FootNote.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Note.Text">
      <summary>
            Gets or sets a note text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Note.TextState">
      <summary>
            Gets or sets a note text state.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Note.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Note" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Note.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Note" /> class.
            </summary>
      <param name="content">The note content.</param>
    </member>
    <member name="T:Aspose.Pdf.ImageFileType">
      <summary>
            Enumerates the image file types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImageFileType.Unknown">
      <summary>
            Unknown type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImageFileType.Svg">
      <summary>
            svg image file type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImageFileType.Dicom">
      <summary>
            Dicom image file type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImageFileType.Base64">
      <summary>
            Base64 image file type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HtmlMediaType">
      <summary>
            Specifies possible media types used during rendering.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.INamedDestinationCollection">
      <summary>
            Collection of Named Destinations.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.INamedDestinationCollection.Item(System.String)">
      <summary>
            Gets or sets destination by its name.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.Pdf.INamedDestinationCollection.Count">
      <summary>
            Returns count of the destinations.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.INamedDestinationCollection.Remove(System.String)">
      <summary>
            Removes destination by its name.
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:Aspose.Pdf.INamedDestinationCollection.Add(System.String,Aspose.Pdf.Annotations.IAppointment)">
      <summary>
            Adds new named destination.
            </summary>
      <param name="name">
      </param>
      <param name="appointment">
      </param>
    </member>
    <member name="P:Aspose.Pdf.INamedDestinationCollection.Names">
      <summary>
            Gets array of names of the destiantions.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.NamedDestinationCollection">
      <summary>
            Class represents the collection of all destinations (a name tree mapping name strings to destinations (see 12.3.2.3, "Named Destinations") and (see 7.7.4, "Name Dictionary")) in the pdf document. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.NamedDestinationCollection.Item(System.String)">
      <summary>
            Gets or sets appointment by its name. 
            </summary>
      <param name="name">Name of the appointment.</param>
      <returns>Appoitnemt</returns>
    </member>
    <member name="P:Aspose.Pdf.NamedDestinationCollection.Count">
      <summary>
            Count of named destinations.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.NamedDestinationCollection.Remove(System.String)">
      <summary>
            Delete named destination.
            </summary>
      <param name="name">Name of the destination to delete.</param>
    </member>
    <member name="M:Aspose.Pdf.NamedDestinationCollection.Add(System.String,Aspose.Pdf.Annotations.IAppointment)">
      <summary>
            Add new named destination.
            </summary>
      <param name="name">Destination name.</param>
      <param name="appointment">Appointment to add.</param>
    </member>
    <member name="P:Aspose.Pdf.NamedDestinationCollection.Names">
      <summary>
            List of names of the destinations.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.HideAction">
      <summary>
            Represents a hide action that hides or shows one or more annotations on the screen by setting or clearing their Hidden flags.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.HideAction.IsHidden">
      <summary>
            Gets or sets status of the annotation(s) to hide/display.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.HideAction.#ctor(Aspose.Pdf.Annotations.Annotation)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.HideAction" /> class for the specified annotation.
            </summary>
      <param name="annotation">An annotation to be hidden.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.HideAction.#ctor(Aspose.Pdf.Annotations.Annotation,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.HideAction" /> class for the specified annotation and invisibility flag.
            </summary>
      <param name="annotation">An annotation to be hidden or shown.</param>
      <param name="isHidden">A flag indicating whether to hide the annotation (true) or show it (false).</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.HideAction.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.HideAction" /> class for the specified field name.
            </summary>
      <param name="fieldName">A text string giving the fully qualified field name of an interactive form field.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.HideAction.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.HideAction" /> class for the specified field name and invisibility flag.
            </summary>
      <param name="fieldName">A text string giving the fully qualified field name of an interactive form field.</param>
      <param name="isHidden">A flag indicating whether to hide the field (true) or show it (false).</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.HideAction.#ctor(Aspose.Pdf.Annotations.Annotation[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.HideAction" /> class for the specified annotations.
            </summary>
      <param name="annotations">An array of annotations to be hidden.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.HideAction.#ctor(Aspose.Pdf.Annotations.Annotation[],System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.HideAction" /> class for the specified annotations and for invisibility flag.
            </summary>
      <param name="annotations">An array of annotations to be hidden or shown.</param>
      <param name="isHidden">A flag indicating whether to hide the annotations (true) or show it (false).</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.HideAction.#ctor(System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.HideAction" /> class for the specified field names.
            </summary>
      <param name="names">An array of strings giving the fully qualified field names of an interactive form fields.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.HideAction.#ctor(System.String[],System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.HideAction" /> class for the specified field names and for invisibility flag.
            </summary>
      <param name="names">An array of strings giving the fully qualified field names of an interactive form fields.</param>
      <param name="isHidden">A flag indicating whether to hide the fields (true) or show it (false).</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PdfActionCollection">
      <summary>
            Class describes list of actions. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PdfActionCollection.Count">
      <summary>
            Gets count of actions.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PdfActionCollection.Item(System.Int32)">
      <summary>
            Gets action by its index.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PdfActionCollection.Delete(System.Int32)">
      <summary>
            Remove action by index.
            </summary>
      <param name="index">Index of action to remove.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PdfActionCollection.Add(Aspose.Pdf.Annotations.PdfAction)">
      <summary>
            Add action to action list.
            </summary>
      <param name="action">Action to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PdfActionCollection.GetEnumerator">
      <summary>
            Gets enumerator.
            </summary>
      <returns>PDfAction enumerator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.FixedPrint">
      <summary>
            Represent Fixed print data of Watermark Annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PDF3DAnnotation">
      <summary>
            Class PDF3DAnnotation. This class cannot be inherited.
            </summary>
      <seealso cref="T:Aspose.Pdf.Annotations.Annotation" />
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DAnnotation.Pdf3DArtwork">
      <summary>
            Gets the 3D Artwork.
            </summary>
      <value>The PDF3 d artwork.</value>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DAnnotation.LightingScheme">
      <summary>
            Gets the lighting scheme.
            </summary>
      <value>The lighting scheme.</value>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DAnnotation.Content">
      <summary>
            Gets or sets the content.
            </summary>
      <value>The content.</value>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DAnnotation.RenderMode">
      <summary>
            Gets the render mode.
            </summary>
      <value>The render mode.</value>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DAnnotation.SetDefaultViewIndex(System.Int32)">
      <summary>
            Sets the index of the default view.
            </summary>
      <param name="index">The default view index.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DAnnotation.ViewArray">
      <summary>
            Gets the view array.
            </summary>
      <value>The view array.</value>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,Aspose.Pdf.Annotations.PDF3DArtwork)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DAnnotation" /> class.
            </summary>
      <param name="page">The page.</param>
      <param name="rect">The rectangle.</param>
      <param name="pdf3DArtwork">The 3D Artwork.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,Aspose.Pdf.Annotations.PDF3DArtwork,Aspose.Pdf.Annotations.PDF3DActivation)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DAnnotation" /> class.
            </summary>
      <param name="page">The page.</param>
      <param name="rect">The rectangle.</param>
      <param name="pdf3DArtwork">The 3D Artwork.</param>
      <param name="activation">The activation mode.</param>
      <exception cref="T:System.Exception">3D Stream is already added to current 3D Artwork</exception>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
      <value>The type of the annotation.</value>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor for annotation processing.
            </summary>
      <param name="visitor">AnnotationSelector object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DAnnotation.SetImagePreview(System.String)">
      <summary>
            Sets the image preview.
            </summary>
      <param name="filename">The image preview filename.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DAnnotation.SetImagePreview(System.IO.Stream)">
      <summary>
            Sets the image preview.
            </summary>
      <param name="image">The image stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DAnnotation.ClearImagePreview">
      <summary>
            Clears the image preview.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DAnnotation.GetImagePreview">
      <summary>
            Gets the image preview.
            </summary>
      <returns>Image preview as stream.</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PDF3DActivation">
      <summary>
            Enum PDF3DActivation: set of 3D annotation activation mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DActivation.activeWhenOpen">
      <summary>
            The active when open
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DActivation.activeWhenVisible">
      <summary>
            The active when visible
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DActivation.activatedUserOrScriptAction">
      <summary>
            The activated by user or script action
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PDF3DArtwork">
      <summary>
            Class PDF3DArtwork.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DArtwork.LightingScheme">
      <summary>
            Gets or sets the lighting scheme.
            </summary>
      <value>The lighting scheme.</value>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DArtwork.RenderMode">
      <summary>
            Gets or sets the render mode.
            </summary>
      <value>The render mode.</value>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DArtwork.ViewArray">
      <summary>
            Gets the view array.
            </summary>
      <value>The view array.</value>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DArtwork.#ctor(Aspose.Pdf.Document,Aspose.Pdf.Annotations.PDF3DContent,Aspose.Pdf.Annotations.PDF3DLightingScheme,Aspose.Pdf.Annotations.PDF3DRenderMode)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DArtwork" /> class.
            </summary>
      <param name="doc">The document.</param>
      <param name="content">The content.</param>
      <param name="lightingScheme">The lighting scheme.</param>
      <param name="renderMode">The render mode.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DArtwork.#ctor(Aspose.Pdf.Document,Aspose.Pdf.Annotations.PDF3DContent)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DArtwork" /> class.
            </summary>
      <param name="doc">The document.</param>
      <param name="content">The content.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DArtwork.GetViewsList">
      <summary>
            Get the views as list.
            </summary>
      <returns>ReadOnlyCollection&lt;PDF3DView&gt;.</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DArtwork.GetViewsArray">
      <summary>
            Gets the views array.
            </summary>
      <returns>Array of views.</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PDF3DContent">
      <summary>
            Class PDF3DContent.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DContent.Extension">
      <summary>
            Gets the extension .
            </summary>
      <value>The extension.</value>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DContent.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DContent" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DContent.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DContent" /> class.
            </summary>
      <param name="filename">The filename.</param>
      <exception cref="T:System.ArgumentException">Unknown 3D Artwork type</exception>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DContent.Load(System.String)">
      <summary>
            Loads 3D content with the specified filename.
            </summary>
      <param name="filename">The filename.</param>
      <exception cref="T:System.ArgumentException">Unknown 3D content type</exception>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DContent.LoadAsPRC(System.String)">
      <summary>
            Loads 3D content with the specified filename as PRC format.
            </summary>
      <param name="filename">The filename.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DContent.LoadAsU3D(System.String)">
      <summary>
            Loads 3D content with the specified filename as U3D format.
            </summary>
      <param name="filename">The filename.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DContent.LoadAsPRC(System.IO.Stream)">
      <summary>
            Loads 3D content from stream as PRC format.
            </summary>
      <param name="stream">The 3D content stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DContent.LoadAsU3D(System.IO.Stream)">
      <summary>
            Loads 3D content from stream as U3D format.
            </summary>
      <param name="stream">The 3D content stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DContent.LoadAsPRC(System.Byte[])">
      <summary>
            Loads 3D content from byte array as PRC format.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DContent.LoadAsU3D(System.Byte[])">
      <summary>
            Loads 3D content from byte array as U3D format.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DContent.SaveToFile(System.String)">
      <summary>
            Saves 3D content to file.
            </summary>
      <param name="filename">The file name.</param>
      <exception cref="T:System.ArgumentException">3DArtwork content format is PRC or U3D.</exception>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DContent.GetAsStream">
      <summary>
            Gets 3D content as stream.
            </summary>
      <returns>Stream.</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DContent.GetAsByteArray">
      <summary>
            Gets 3D content as byte array.
            </summary>
      <returns>System.Byte[].</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PDF3DCrossSectionArray">
      <summary>
            Class PDF3DCrossSectionArray.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DCrossSectionArray.Count">
      <summary>
            Gets the cross section count.
            </summary>
      <value>The cross section count.</value>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DCrossSectionArray.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DCrossSectionArray" /> class.
            </summary>
      <param name="doc">The document.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DCrossSectionArray.Add(Aspose.Pdf.Annotations.PDF3DCrossSection)">
      <summary>
            Adds the specified cross section to views array .
            </summary>
      <param name="crossSection">The cross section.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DCrossSectionArray.RemoveAt(System.Int32)">
      <summary>
            Removes cross section from array at specified index.
            </summary>
      <param name="index">The index of removed cross section in array.</param>
      <exception cref="T:System.IndexOutOfRangeException">Invalid index: index should be in the range [1..n] where n equals to the cross sections count.</exception>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DCrossSectionArray.RemoveAll">
      <summary>
            Removes all cross section from array.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DCrossSectionArray.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Aspose.Pdf.Annotations.PDF3DCrossSection" /> at the specified index.
            </summary>
      <param name="index">The index.</param>
      <returns>Cross section.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
            Invalid index: index should be in the range [1..n] where n equals to the cross sections count.
            </exception>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PDF3DCuttingPlaneOrientation">
      <summary>
            Class PDF3DCuttingPlaneOrientation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DCuttingPlaneOrientation.AngleX">
      <summary>
            Gets or sets the angle to X axis.
            </summary>
      <value>The angle to X axis.</value>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DCuttingPlaneOrientation.AngleY">
      <summary>
            Gets or sets the angle to Y axis.
            </summary>
      <value>The angle Y axis.</value>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DCuttingPlaneOrientation.AngleZ">
      <summary>
            Gets or sets the angle to Z axis.
            </summary>
      <value>The angle to Z axis.</value>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DCuttingPlaneOrientation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DCuttingPlaneOrientation" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DCuttingPlaneOrientation.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PDF3DLightingScheme">
      <summary>
            Class PDF3DLightingScheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DLightingScheme.Artwork">
      <summary>
            The "Artwork" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DLightingScheme.None">
      <summary>
            The "None" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DLightingScheme.White">
      <summary>
            The "White" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DLightingScheme.Day">
      <summary>
            The "Day" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DLightingScheme.Night">
      <summary>
            The "Night" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DLightingScheme.Hard">
      <summary>
            The "Hard" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DLightingScheme.Primary">
      <summary>
            The "Primary" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DLightingScheme.Blue">
      <summary>
            The "Blue" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DLightingScheme.Red">
      <summary>
            The "Red" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DLightingScheme.Cube">
      <summary>
            The "Cube" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DLightingScheme.CAD">
      <summary>
            The "Cad" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DLightingScheme.Headlamp">
      <summary>
            The "Headlamp" lighting scheme.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DLightingScheme.Type">
      <summary>
            Gets the lighting scheme type.
            </summary>
      <value>The lighting scheme type.</value>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DLightingScheme.#ctor(Aspose.Pdf.Annotations.LightingSchemeType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DLightingScheme" /> class.
            </summary>
      <param name="type">The lighting scheme type.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DLightingScheme.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DLightingScheme" /> class.
            </summary>
      <param name="typeName">Name of the lighting scheme type.</param>
      <exception cref="T:System.ArgumentException">Unknown lighting scheme type argument</exception>
    </member>
    <member name="T:Aspose.Pdf.Annotations.LightingSchemeType">
      <summary>
            Enum LightingSchemeType: set of lighting scheme types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LightingSchemeType.Artwork">
      <summary>
            The "Artwork" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LightingSchemeType.None">
      <summary>
            The "None" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LightingSchemeType.White">
      <summary>
            The "White" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LightingSchemeType.Day">
      <summary>
            The "Day" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LightingSchemeType.Night">
      <summary>
            The "Night" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LightingSchemeType.Hard">
      <summary>
            The "Hard" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LightingSchemeType.Primary">
      <summary>
            The "Primary" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LightingSchemeType.Blue">
      <summary>
            The "Blue" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LightingSchemeType.Red">
      <summary>
            The "Red" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LightingSchemeType.Cube">
      <summary>
            The "Cube" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LightingSchemeType.CAD">
      <summary>
            The "Cad" lighting scheme.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LightingSchemeType.Headlamp">
      <summary>
            The "Headlamp" lighting scheme.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PDF3DRenderMode">
      <summary>
            Class PDF3DRenderMode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DRenderMode.Solid">
      <summary>
            The "Solid" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DRenderMode.SolidWireframe">
      <summary>
            The "SolidWireFrame" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DRenderMode.Transparent">
      <summary>
            The "Transparent" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DRenderMode.TransparentWareFrame">
      <summary>
            The "TransparentWareFrame" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DRenderMode.BoundingBox">
      <summary>
            The "BoundingBox" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DRenderMode.TransparentBoundingBox">
      <summary>
            The "TransparentBoundingBox" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DRenderMode.TransparentBoundingBoxOutline">
      <summary>
            The "TransparentBoundingBoxOutline" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DRenderMode.Wireframe">
      <summary>
            The "WireFrame" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DRenderMode.ShadedWireframe">
      <summary>
            The "ShadedWireFrame" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DRenderMode.Vertices">
      <summary>
            The "Vertices" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DRenderMode.ShadedVertices">
      <summary>
            The "ShadedVertices" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DRenderMode.Illustration">
      <summary>
            The "Illustration" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DRenderMode.SolidOutline">
      <summary>
            The "SolidOutline" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PDF3DRenderMode.ShadedIllustration">
      <summary>
            The "ShadedIllustration" render mode.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DRenderMode.#ctor(Aspose.Pdf.Annotations.RenderModeType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DRenderMode" /> class.
            </summary>
      <param name="subtype">The render mode type.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DRenderMode.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DRenderMode" /> class.
            </summary>
      <param name="typeName">Name of the type.</param>
      <exception cref="T:System.ArgumentException">Unknown a render mode type argument</exception>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DRenderMode.GetAuxiliaryColour">
      <summary>
            Gets the auxiliary colour.
            </summary>
      <returns>Color.</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DRenderMode.SetAuxiliaryColour(Aspose.Pdf.Color)">
      <summary>
            Sets the auxiliary colour.
            </summary>
      <param name="color">The color.</param>
      <returns>PDF3DRenderMode.</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DRenderMode.GetFaceColor">
      <summary>
            Gets the color of the face.
            </summary>
      <returns>Object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DRenderMode.SetFaceColor(Aspose.Pdf.Color)">
      <summary>
            Sets the color of the face.
            </summary>
      <param name="color">The color.</param>
      <returns>PDF3DRenderMode.</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DRenderMode.GetOpacity">
      <summary>
            Gets the opacity.
            </summary>
      <returns>System.Double.</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DRenderMode.SetOpacity(System.Double)">
      <summary>
            Sets the opacity.
            </summary>
      <param name="opacity">The opacity.</param>
      <returns>PDF3DRenderMode.</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DRenderMode.SetCreaseValue(System.Double)">
      <summary>
            Sets the crease value.
            </summary>
      <param name="creaseValue">The crease value.</param>
      <returns>PDF3DRenderMode.</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DRenderMode.GetCreaseValue">
      <summary>
            Gets the crease value.
            </summary>
      <returns>System.Double.</returns>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DRenderMode.Type">
      <summary>
            Gets the type.
            </summary>
      <value>The type.</value>
    </member>
    <member name="T:Aspose.Pdf.Annotations.RenderModeType">
      <summary>
            Enum RenderModeType: set of render mode types
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RenderModeType.Solid">
      <summary>
            The "Solid" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RenderModeType.SolidWireframe">
      <summary>
            The "SolidWireFrame" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RenderModeType.Transparent">
      <summary>
            The "Transparent" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RenderModeType.TransparentWareFrame">
      <summary>
            The "TransparentWareFrame" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RenderModeType.BoundingBox">
      <summary>
            The "BoundingBox" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RenderModeType.TransparentBoundingBox">
      <summary>
            The "TransparentBoundingBox" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RenderModeType.TransparentBoundingBoxOutline">
      <summary>
            The "TransparentBoundingBoxOutline" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RenderModeType.Wireframe">
      <summary>
            The "WireFrame" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RenderModeType.ShadedWireframe">
      <summary>
            The "ShadedWireFrame" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RenderModeType.Vertices">
      <summary>
            The "Vertices" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RenderModeType.ShadedVertices">
      <summary>
            The "ShadedVertices" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RenderModeType.Illustration">
      <summary>
            The "Illustration" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RenderModeType.SolidOutline">
      <summary>
            The "SolidOutline" render mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RenderModeType.ShadedIllustration">
      <summary>
            The "ShadedIllustration" render mode.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PDF3DStream">
      <summary>
            Class PDF3DStream.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DStream.#ctor(Aspose.Pdf.Document,Aspose.Pdf.Annotations.PDF3DArtwork)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DStream" /> class.
            </summary>
      <param name="doc">The document.</param>
      <param name="pdf3DArtwork">The 3D Artwork.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DStream.Content">
      <summary>
            Gets or sets the content.
            </summary>
      <value>The content.</value>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PDF3DView">
      <summary>
            Class PDF3DView.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DView.LightingScheme">
      <summary>
            Gets or sets the lighting scheme of view.
            </summary>
      <value>The lighting scheme of view.</value>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DView.RenderMode">
      <summary>
            Gets or sets the render mode of view.
            </summary>
      <value>The render mode of view.</value>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DView.CrossSectionsArray">
      <summary>
            Gets the cross sections array of view.
            </summary>
      <value>The cross sections array of view.</value>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DView.ViewName">
      <summary>
            Gets or sets the name of the view.
            </summary>
      <value>The name of the view.</value>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DView.CameraPosition">
      <summary>
            Gets or sets the camera position of view.
            </summary>
      <value>The camera position of view.</value>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DView.CameraOrbit">
      <summary>
            Gets or sets the camera orbit of view.
            </summary>
      <value>The camera orbit of view.</value>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DView.BackGroundColor">
      <summary>
            Gets or sets the color of the back ground of view.
            </summary>
      <value>The color of the back ground of view.</value>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DView.#ctor(Aspose.Pdf.Document,Aspose.Pdf.Matrix3D,System.Double,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DView" /> class.
            </summary>
      <param name="doc">The document.</param>
      <param name="cameraPosition">The camera position.</param>
      <param name="cameraOrbit">The camera orbit.</param>
      <param name="viewName">Name of the view.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DView.#ctor(Aspose.Pdf.Document,Aspose.Pdf.Annotations.PDF3DView,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DView" /> class.
            </summary>
      <param name="doc">The document.</param>
      <param name="view">The view.</param>
      <param name="viewName">Name of the view.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PDF3DViewArray">
      <summary>
            Class PDF3DViewArray.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DViewArray.Count">
      <summary>
            Gets the views count.
            </summary>
      <value>The views count.</value>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DViewArray.Add(Aspose.Pdf.Annotations.PDF3DView)">
      <summary>
            Adds the specified view.
            </summary>
      <param name="view">The view.</param>
      <exception cref="T:System.ArgumentException">Only one entry of 3D view is allowed</exception>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DViewArray.RemoveAt(System.Int32)">
      <summary>
            Removes view from views array at specified index.
            </summary>
      <param name="index">The view index.</param>
      <exception cref="T:System.IndexOutOfRangeException">Invalid index: index should be in the range [1..n] where n equals to the views count.</exception>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DViewArray.RemoveAll">
      <summary>
            Removes all views.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DViewArray.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Aspose.Pdf.Annotations.PDF3DView" /> to view array at the specified index.
            </summary>
      <param name="index">The index.</param>
      <returns>PDF3DView.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
            Invalid index: index should be in the range [1..n] where n equals to the views count.
            </exception>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PDF3DCrossSection">
      <summary>
            Class PDF3DCrossSection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DCrossSection.Center">
      <summary>
            Gets or sets the cross section rotation center.
            </summary>
      <value>The center.</value>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DCrossSection.CuttingPlaneOpacity">
      <summary>
            Gets or sets the cutting plane opacity.
            </summary>
      <value>The cutting plane opacity.</value>
      <exception cref="T:System.Exception">The number must be in the range [0 , 1]</exception>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DCrossSection.CuttingPlaneOrientation">
      <summary>
            Gets or sets the cutting plane orientation.
            </summary>
      <value>The cutting plane orientation.</value>
      <exception cref="T:System.Exception">
            Only one of the values shall be Null
            </exception>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DCrossSection.CuttingPlaneColor">
      <summary>
            Gets or sets the color of the cutting plane.
            </summary>
      <value>The color of the cutting plane.</value>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DCrossSection.CuttingPlanesIntersectionColor">
      <summary>
            Gets or sets the color of the cutting planes intersection.
            </summary>
      <value>The color of the cutting planes intersection.</value>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PDF3DCrossSection.Visibility">
      <summary>
            Gets or sets a value indicating visibility of the cutting planes intersection.
            </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PDF3DCrossSection.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DCrossSection" /> class.
            </summary>
      <param name="doc">The document.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.RedactionAnnotation">
      <summary>
            Represents Redact annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.RedactionAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.RedactionAnnotation.#ctor(Aspose.Pdf.Document)">
      <summary>
            Constructor for RedactionAnnotation. For using in Generator. 
            </summary>
      <param name="document">Document where new annotation will be created.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.RedactionAnnotation.QuadPoint">
      <summary>
            An array of 8xN numbers specifying the coordinates of content region that is intended to be removed. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.RedactionAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor for RedactAnnotation.
            </summary>
      <param name="page">Page where annotation will be placed.</param>
      <param name="rect">Annotation position on the page.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.RedactionAnnotation.FillColor">
      <summary>
            Gets or sets color to fill annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.RedactionAnnotation.BorderColor">
      <summary>
            Gets or sets color of border which is drawn when redaction is not active.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.RedactionAnnotation.OverlayText">
      <summary>
            Text to print on redact annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.RedactionAnnotation.Repeat">
      <summary>
            If true overlay text will be repated on the annotation. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.RedactionAnnotation.TextAlignment">
      <summary>
            Gets or sets. Alignment of Overlay Text.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.RedactionAnnotation.Flatten">
      <summary>
            Flattens annotation i.e. removes annotation and adds its
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.RedactionAnnotation.Redact">
      <summary>
            Flattens annotation and redacts page contents (i.e. removes text and image under redacted annotation)
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.RedactionAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.RichMediaAnnotation">
      <summary>
            Class describes RichMediaAnnotation which allows embed video/audio data into PDF document.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.RichMediaAnnotation.ContentType">
      <summary>
            Type of the multimedia. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RichMediaAnnotation.ContentType.Audio">
      <summary>
            Audio data.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RichMediaAnnotation.ContentType.Video">
      <summary>
            Video data.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RichMediaAnnotation.ContentType.Unknown">
      <summary>
            Unknown/unsupported type of data.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.RichMediaAnnotation.ActivationEvent">
      <summary>
            Event which activates annotation. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RichMediaAnnotation.ActivationEvent.Click">
      <summary>
            Activated by click on the annotation. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RichMediaAnnotation.ActivationEvent.PageOpen">
      <summary>
            Activated on page open.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.RichMediaAnnotation.ActivationEvent.PageVisible">
      <summary>
            Activated when page becames visible. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.RichMediaAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.RichMediaAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor for this annotation. 
            </summary>
      <param name="visitor">Visitor instance.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.RichMediaAnnotation.CustomPlayer">
      <summary>
            Sets or gets custom flash player to play video/audio data.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.RichMediaAnnotation.CustomFlashVariables">
      <summary>
            Sets or gets flash variables which passed to player. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.RichMediaAnnotation.AddCustomData(System.String,System.IO.Stream)">
      <summary>
            Add custom named data (for example required for flash script).
            </summary>
      <param name="name">Name of the data.</param>
      <param name="data">Data.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.RichMediaAnnotation.SetContent(System.String,System.IO.Stream)">
      <summary>
            Set content stream.
            </summary>
      <param name="fileName">Name of the stream.</param>
      <param name="audio">Data stream.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.RichMediaAnnotation.Content">
      <summary>
            Data of the Rich Media content. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.RichMediaAnnotation.Type">
      <summary>
            Gets or sets type of content. Possible values: Audio, Video. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.RichMediaAnnotation.ActivateOn">
      <summary>
            Event which activates application.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.RichMediaAnnotation.SetPoster(System.IO.Stream)">
      <summary>
            Set poster of the annotation. 
            </summary>
      <param name="imageStream">Stream containing poster image.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.RichMediaAnnotation.Update">
      <summary>
            Updates data with specified parameters.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.WatermarkAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Constuctore for Watermark annotation class.
            </summary>
      <param name="page">Page where annotation should be placed.</param>
      <param name="rect">Position of the annotation.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.WatermarkAnnotation.SetText(Aspose.Pdf.Facades.FormattedText)">
      <summary>
            Set text of the annotation.
            </summary>
      <param name="text">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.WatermarkAnnotation.SetTextAndState(System.String[],Aspose.Pdf.Text.TextState)">
      <summary>
            Set text of the annotation.
            </summary>
      <param name="text">
      </param>
      <param name="textState">
      </param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.WatermarkAnnotation.FixedPrint">
      <summary>
            Fuxed print object of Watermark annotation. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.WatermarkAnnotation.Opacity">
      <summary>
            Gets or sets opacity of the annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.CapStyle">
      <summary>
            Style of line ending of Ink annotation line. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.CapStyle.Rectangular">
      <summary>
            End is rectangular.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.CapStyle.Rounded">
      <summary>
            End is rounded.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.Measure">
      <summary>
            Class which describes Measure coordinate system. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.Measure.NumberFormatList">
      <summary>
            Represents list of number formats.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.Measure.NumberFormatList.#ctor(Aspose.Pdf.Annotations.Measure)">
      <summary>
            Constructor for NumberFormatList. 
            </summary>
      <param name="measure">Parent measure object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.Measure.NumberFormatList.Add(Aspose.Pdf.Annotations.Measure.NumberFormat)">
      <summary>
            Adds number format to list.
            </summary>
      <param name="value">Value to be added into list.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.Measure.NumberFormatList.Insert(System.Int32,Aspose.Pdf.Annotations.Measure.NumberFormat)">
      <summary>
            Inserts number format into list.
            </summary>
      <param name="index">Index where new element will be added.</param>
      <param name="value">Value to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.Measure.NumberFormatList.RemoveAt(System.Int32)">
      <summary>
            Removes number format from list.
            </summary>
      <param name="index">Index of item to be removed.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.NumberFormatList.Item(System.Int32)">
      <summary>
            Gets or sets number format in list by its index.
            </summary>
      <param name="index">Index of the item to be retreived.</param>
      <returns>Retreived measure item.</returns>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.NumberFormatList.Count">
      <summary>
            Count if items in the list. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.Measure.NumberFormat">
      <summary>
            Number format for measure. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.Measure.NumberFormat.#ctor(Aspose.Pdf.Annotations.Measure)">
      <summary>
            Constructor for NumberFormat class.
            </summary>
      <param name="measure">Measure object which contains this number format.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.NumberFormat.UnitLabel">
      <summary>
            A text string specifying a label for displaying the units.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.NumberFormat.ConvresionFactor">
      <summary>
            The conversion factor used to multiply a value in partial units of the previous number format array element to obtain a value in the units of this number format.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.Measure.NumberFormat.FractionStyle">
      <summary>
            Value which indicates in which manner fraction values are displayed.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.Measure.NumberFormat.FractionStyle.ShowAsDecimal">
      <summary>
            Show fractional values as decimal fraction.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.Measure.NumberFormat.FractionStyle.ShowAsFraction">
      <summary>
            Show fractional value as fraction.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.Measure.NumberFormat.FractionStyle.Round">
      <summary>
            Round fractional values to the nearest whole integer.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.Measure.NumberFormat.FractionStyle.Truncate">
      <summary>
            Truncate to achieve whole units.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.NumberFormat.FractionDisplayment">
      <summary>
            In what manner fractional values are displayed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.NumberFormat.Precision">
      <summary>
            If FractionDisplayment is ShowAsDecimal, this value is precision of fractional value; It shall me multiple of 10. Default is 100.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.NumberFormat.Denominator">
      <summary>
            If FractionDisplayment is ShowAsFraction, this value is denominator of the fraction. Default value is 16.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.NumberFormat.ForceDenominator">
      <summary>
            If FractionDisplayment is ShowAsFraction, this value determines meay or not the fraction be reduced. If value is true fraction may not be reduced.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.NumberFormat.ThousandsSeparator">
      <summary>
            Text that shall be used between orders of thousands in display of numerical values. An empty string indicates that no text shall be added. Default is comma.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.NumberFormat.FractionSeparator">
      <summary>
            Text that shall be used as the decimal position in displaying numerical values. An empty string indicates that the default shall be used. Default is period character.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.NumberFormat.BeforeText">
      <summary>
            Text that shall be concatenated to the left of the label.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.NumberFormat.AfterText">
      <summary>
            Text that shall be concatenated after the label
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.Measure.#ctor(Aspose.Pdf.Annotations.Annotation)">
      <summary>
            Creates Measure object for measure annotations. 
            </summary>
      <param name="annotation">Annotation for which measure will be bound.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.ScaleRatio">
      <summary>
            A text string expressing the scale ratio of the drawing.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.XFormat">
      <summary>
            A number format array for measurement of change along the xaxis and, if Y is not present, along the y axis as well
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.YFormat">
      <summary>
            A number format array for measurement of change along the y axis.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.DistanceFormat">
      <summary>
            A number format array for measurement of distance in any direction.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.AreaFormat">
      <summary>
            A number format array for measurement of area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.AngleFormat">
      <summary>
            A number format array for measurement of angles.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.SlopeFormat">
      <summary>
            A number format array for measurement of the slope of a line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.Origin">
      <summary>
            Point that shall specify the origin of the measurement coordinate system in default user space coordinates.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Measure.XYFactor">
      <summary>
            A factor that shall be used to convert the largest units along the y axis to the largest units along the x axis.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.SoundSampleData">
      <summary>
            Represents additional entries specific to a sound object (Section 9.2 PDF1-7)
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SoundSampleData.DefaultSamplingRate">
      <summary>
            Default value for SamplingRate. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SoundSampleData.DefaultOfSoundChannels">
      <summary>
            Default value for Channels parameter.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SoundSampleData.DefaultOfBitsPerChannel">
      <summary>
            Default value for BitsPerchannel parameter. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SoundSampleData.DefaultEncodingFormat">
      <summary>
            Default value for encoding format.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.SoundSampleData.SamplingRate">
      <summary>
            Gets or sets the sampling rate.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.SoundSampleData.NumberOfSoundChannels">
      <summary>
            Gets or sets the number of sound channels.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.SoundSampleData.BitsPerChannel">
      <summary>
            Gets or sets the number of bits per sample value per channel.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.SoundSampleData.EncodingFormat">
      <summary>
            Gets or sets the encoding format.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.SoundSampleData.#ctor(System.Int64)">
      <summary>
            Initializes new sound sample data.
            </summary>
      <param name="samplingRate">The sampling rate.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.SoundSampleData.#ctor(System.Int64,System.Int32)">
      <summary>
            Initializes new sound sample data.
            </summary>
      <param name="samplingRate">The sampling rate.</param>
      <param name="numberOfSoundChannels">The number of sound channels.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.SoundSampleData.#ctor(System.Int64,System.Int32,System.Int32)">
      <summary>
            Initializes new sound sample data.
            </summary>
      <param name="samplingRate">The sampling rate.</param>
      <param name="numberOfSoundChannels">The number of sound channels.</param>
      <param name="bitsPerChannel">The number of bits per sample value per channel.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.SoundSampleData.#ctor(System.Int64,System.Int32,System.Int32,Aspose.Pdf.Annotations.SoundSampleDataEncodingFormat)">
      <summary>
            Initializes new sound sample data.
            </summary>
      <param name="samplingRate">The sampling rate.</param>
      <param name="numberOfSoundChannels">The number of sound channels.</param>
      <param name="bitsPerChannel">The number of bits per sample value per channel.</param>
      <param name="soundSampleDataEncodingFormat">The encoding format for the sample data.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.SoundSampleDataEncodingFormat">
      <summary>
            The encoding format for the sound sample data.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SoundSampleDataEncodingFormat.Raw">
      <summary>
            Unspecified or unsigned values in the range 0 to 2B − 1.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SoundSampleDataEncodingFormat.Signed">
      <summary>
            Twos-complement values.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SoundSampleDataEncodingFormat.muLaw">
      <summary>
            μ-law–encoded samples.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SoundSampleDataEncodingFormat.ALaw">
      <summary>
            A-law–encoded samples.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.ActionCollection">
      <summary>
            Collection of actions
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.ActionCollection.Count">
      <summary>
            Count of actions on the collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.ActionCollection.IsSynchronized">
      <summary>
            Returns true if object is synchronized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.ActionCollection.SyncRoot">
      <summary>
            Gets synchronization object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.ActionCollection.Add(Aspose.Pdf.Annotations.PdfAction)">
      <summary>
            Adds new action into colleciton.
            </summary>
      <param name="action">Action which should be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.ActionCollection.Delete(System.Int32)">
      <summary>
            Removes action from collection by index.
            </summary>
      <param name="index">Index of action to remove.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.ActionCollection.Delete">
      <summary>
            Delete all actions.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.ActionCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies actions array into collection.
            </summary>
      <param name="array">Array of actions which must be copied into collection.</param>
      <param name="index">Index starting from which array will be copied.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.ActionCollection.GetEnumerator">
      <summary>
            Returns enumerator for collection.
            </summary>
      <returns>Collection enumerator.</returns>
    </member>
    <member name="P:Aspose.Pdf.Annotations.ActionCollection.Item(System.Int32)">
      <summary>
            Gets action by its index.
            </summary>
      <param name="index">Index of action.</param>
      <returns>Retreived action.</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.AnnotationActionCollection">
      <summary>
            Represents the collection of annotation actions.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AnnotationActionCollection.OnEnter">
      <summary>
            Gets or sets an action to be performed when the cursor enters the annotation’s active area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AnnotationActionCollection.OnExit">
      <summary>
            Gets or sets an action to be performed when the cursor exits the annotation’s active area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AnnotationActionCollection.OnPressMouseBtn">
      <summary>
            Gets or sets an action to be performed when the mouse button is pressed inside the annotation’s active area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AnnotationActionCollection.OnReleaseMouseBtn">
      <summary>
            Gets or sets an action to be performed when the mouse button is released inside the annotation’s active area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AnnotationActionCollection.OnReceiveFocus">
      <summary>
            Gets or sets an action to be performed when the annotation receives the input focus.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AnnotationActionCollection.OnOpenPage">
      <summary>
            Gets or sets an action to be performed when the page containing the annotation is opened.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AnnotationActionCollection.OnClosePage">
      <summary>
            Gets or sets an action to be performed when the page containing the annotation is closed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AnnotationActionCollection.OnShowPage">
      <summary>
            Gets or sets an action to be performed when the page containing the annotation becomes visible in the viewer application’s user interface.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AnnotationActionCollection.OnHidePage">
      <summary>
            Gets or sets an action to be performed when the page containing the annotation is no longer visible in the viewer application’s user interface.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AnnotationActionCollection.OnLostFocus">
      <summary>
            Gets or sets an action to be performed when the annotation loses the input focus.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AnnotationActionCollection.OnModifyCharacter">
      <summary>
            Gets or sets an action to be performed when user modifies character of the field. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AnnotationActionCollection.OnValidate">
      <summary>
            Gets or sets an action to be performed when user changes contents of the field. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AnnotationActionCollection.OnFormat">
      <summary>
            Gets or sets an action to be performed to format field value. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AnnotationActionCollection.OnCalculate">
      <summary>
            Gets or sets an action to calculate field value. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.AnnotationCollection">
      <summary>
            Class representing annotation collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AnnotationCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the Aspose.Pdf.Annotations.AnnotationCollection is synchronized (thread safe).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AnnotationCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to Aspose.Pdf.Annotations.AnnotationCollection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AnnotationCollection.Count">
      <summary>
            Gets count of annotations in collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationCollection.Add(Aspose.Pdf.Annotations.Annotation,System.Boolean)">
      <summary>
            Adds annotation to the collection. If page is rotated then annotation rectangle will be recalculated accordingly.
            </summary>
      <param name="annotation">Annotation which shall be added.</param>
      <param name="considerRotation">If true and if page is rotated then annotation position will be recaculated accroding to page rotation.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationCollection.Add(Aspose.Pdf.Annotations.Annotation)">
      <summary>
            Adds annotation to the collection.
            </summary>
      <param name="annotation">Annotation which shall be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationCollection.Delete(System.Int32)">
      <summary>
            Deletes annotation from the collection by index.
            </summary>
      <param name="index">Index of annotation which shall be deleted.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationCollection.Delete">
      <summary>
            Deletes all annotations from the collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies array of annotations into collection.
            </summary>
      <param name="array">Array to copy into collection.</param>
      <param name="index">Starting index where colleciton wil lbe copied.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationCollection.GetEnumerator">
      <summary>
            Returns collection enumerator.
            </summary>
      <returns>Enumerator object</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationCollection.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor to process annotation.
            </summary>
      <param name="visitor">Annotation selector object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationCollection.Delete(Aspose.Pdf.Annotations.Annotation)">
      <summary>
            Deletes specified annotation from the collection. 
            </summary>
      <param name="annotation">Annotation which shall be deleted.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AnnotationCollection.Item(System.Int32)">
      <summary>
            The index of the element to get.
            </summary>
      <param name="index">The index value started from one.</param>
      <returns>Annotation object</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.AnnotationFlags">
      <summary>
            A set of flags specifying various characteristics of the annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationFlags.Default">
      <summary>
            Default value.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationFlags.Invisible">
      <summary>
            If set, do not display the annotation if it does not belong to one of the standard annotation types
            and no annotation handler is available. If clear, display such an unknown annotation
            using an appearance stream specified by its appearance dictionary, if any.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationFlags.Hidden">
      <summary>
            If set, do not display or print the annotation or allow it to interact with the user,
            regardless of its annotation type or whether an annotation handler is available.
            In cases where screen space is limited, the ability to hide and show annotations selectively
            can be used in combination with appearance streams to display auxiliary pop-up information
            similar in function to online help systems.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationFlags.Print">
      <summary>
            If set, print the annotation when the page is printed. If clear, never print the annotation,
            regardless of whether it is displayed on the screen. This can be useful, for example, for annotations
            representing interactive pushbuttons, which would serve no meaningful purpose on the printed page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationFlags.NoZoom">
      <summary>
            If set, do not scale the annotation’s appearance to match the magnification of the page.
            The location of the annotation on the page (defined by the upper-left corner of its annotation rectangle)
            remains fixed, regardless of the page magnification.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationFlags.NoRotate">
      <summary>
            If set, do not rotate the annotation’s appearance to match the rotation of the page.
            The upper-left corner of the annotation rectangle remains in a fixed location on the page,
            regardless of the page rotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationFlags.NoView">
      <summary>
            If set, do not display the annotation on the screen or allow it to interact with the user.
            The annotation may be printed (depending on the setting of the Print flag)
            but should be considered hidden for purposes of on-screen display and user interaction.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationFlags.ReadOnly">
      <summary>
            If set, do not allow the annotation to interact with the user. The annotation may be displayed
            or printed (depending on the settings of the NoView and Print flags) but should not respond to mouse
            clicks or change its appearance in response to mouse motions. This flag is ignored for widget annotations;
            its function is subsumed by the ReadOnly flag of the associated form field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationFlags.Locked">
      <summary>
            If set, do not allow the annotation to be deleted or its properties (including position and size)
            to be modified by the user. However, this flag does not restrict changes to the annotation’s contents,
            such as the value of a form field.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationFlags.ToggleNoView">
      <summary>
            If set, invert the interpretation of the NoView flag for certain events.
            A typical use is to have an annotation that appears only when a mouse cursor is held over it.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationFlags.LockedContents">
      <summary>
            If set, do not allow the contents of the annotation to be modified by the user.
            This flag does not restrict deletion of the annotation or changes to other annotation properties,
            such as position and size.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.AnnotationStateModel">
      <summary>
            The state model corresponding to state of annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationStateModel.Undefined">
      <summary>
            Not defined state model.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationStateModel.Marked">
      <summary>
            The annotation has been marked (or unmarked) by the user.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationStateModel.Review">
      <summary>
            The annotation has been reviewed (accepted, rejected, cancelled, completed, none) by the user.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.AnnotationType">
      <summary>
            Enumeration of annotation types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Text">
      <summary>
            Text annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Circle">
      <summary>
            Circle annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Polygon">
      <summary>
            Polygon annotation type. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.PolyLine">
      <summary>
            Plyline annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Line">
      <summary>
            Line annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Square">
      <summary>
            Square annotatotion type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.FreeText">
      <summary>
            Free text annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Highlight">
      <summary>
            Highlight annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Underline">
      <summary>
            Underline annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Squiggly">
      <summary>
            Squiggle annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.StrikeOut">
      <summary>
            Strikeout annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Caret">
      <summary>
            Caret annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Ink">
      <summary>
            Ink annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Link">
      <summary>
            Link annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Popup">
      <summary>
            Popup annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.FileAttachment">
      <summary>
            File attachment annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Sound">
      <summary>
            Sound annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Movie">
      <summary>
            Movie annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Screen">
      <summary>
            Screen annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Widget">
      <summary>
            Widget annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Watermark">
      <summary>
            Watermark annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.TrapNet">
      <summary>
            Trap network annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.PrinterMark">
      <summary>
            Printer mark annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Redaction">
      <summary>
            Redaction annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Stamp">
      <summary>
            Rubber stamp annotation type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.RichMedia">
      <summary>
            Rich media annotation type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationType.Unknown">
      <summary>
            Unknown annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.AppearanceDictionary">
      <summary>
            Annotation appearance dictionary specifying how the annotation shall be presented visually on the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AppearanceDictionary.IsReadOnly">
      <summary>
            Gets a value indicating whether dictionary is read-only.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AppearanceDictionary.IsFixedSize">
      <summary>
            Gets a value indicating whether dictionary has a fixed size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AppearanceDictionary.Keys">
      <summary>
            Gets keys of the dictionary. If appearance dictionary has subditionaries, then <see cref="P:Aspose.Pdf.Annotations.AppearanceDictionary.Keys" /> contains (N|R|D).state values,
            where N - normal appearance, R - rollover appearance, D - down appearance and state - the name of the state
            (e.g. On, Off for checkboxes).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AppearanceDictionary.Values">
      <summary>
            Gets the list of the dictionary values. 
            Result collection contains the list of XForm objects.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AppearanceDictionary.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the dictionary is synchronized (thread safe).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AppearanceDictionary.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the dictionary.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AppearanceDictionary.Count">
      <summary>
            Gets the number of elements contained in the dictionary. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AppearanceDictionary.Contains(System.Object)">
      <summary>
            Determines whether dictionary contains an element with the specified key.
            </summary>
      <param name="key">Key to test does it belongs to dictionary.</param>
      <returns>true if the key found in the dictionary and false otherwise.</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AppearanceDictionary.Remove(System.Object)">
      <summary>
            Removes the element with the specified key.
            </summary>
      <param name="key">Key which should be deleted.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AppearanceDictionary.Clear">
      <summary>
            Removes all elements from the dictionary.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AppearanceDictionary.Add(System.Object,System.Object)">
      <summary>
            Adds an element with the provided key and value.
            </summary>
      <param name="key">
            Element key.
            </param>
      <param name="value">
            Element value.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AppearanceDictionary.GetEnumerator">
      <summary>
            Returns an IDictionaryEnumerator object for the dictionary.
            </summary>
      <returns>Enumerator of the dictionary.</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AppearanceDictionary.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the dictionary to an Array, starting at a particular Array index.
            </summary>
      <param name="array">Array where items must be copied.</param>
      <param name="index">Index where items must be copied.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AppearanceDictionary.Item(System.String)">
      <summary>
            Represents convenient form for getting appearance streams.
            </summary>
      <param name="key">
            Represents path to appearance stream. 
            If appearance dictionary has subdictionaries, then path must contain 2 parts (<see cref="P:Aspose.Pdf.Annotations.AppearanceDictionary.Keys" />), 
            else path has only one part.
            </param>
      <returns>
            XForm object (appearance stream) which corresponds to the given key.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Annotations.AppearanceDictionary.Item(System.Object)">
      <summary>
             Represents convenient form for getting appearance streams.
             </summary>
      <param name="key">
             Represents path to appearance stream. 
             If appearance dictionary has subdictionaries, then path must contain 2 parts (<see cref="P:Aspose.Pdf.Annotations.AppearanceDictionary.Keys" />), 
             else path has only one part.
             </param>
      <returns>
             XForm object (appearance stream) which corresponds to the given key.
             </returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AppearanceDictionary.Add(System.String,Aspose.Pdf.XForm)">
      <summary>
            Add X form for specifed key.
            </summary>
      <param name="key">
            Element key.
            </param>
      <param name="value">
            XForm object value.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AppearanceDictionary.ContainsKey(System.String)">
      <summary>
            Determines does this dictionary contasins specified key.
            </summary>
      <param name="key">Key to search in the dictionary.</param>
      <returns>true if key is found.</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AppearanceDictionary.Remove(System.String)">
      <summary>
            Removes key from the dictionary.
            </summary>
      <param name="key">Key to be removed from the dictionary.</param>
      <returns>true if key was successfully removed.</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AppearanceDictionary.TryGetValue(System.String,Aspose.Pdf.XForm@)">
      <summary>
            Tries to find key in the dictionary and retreives value if found.
            </summary>
      <param name="key">Key to search in the dictionary.</param>
      <param name="value">Retreived value.</param>
      <returns>true if key was found.</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.CaretAnnotation">
      <summary>
            Class representing Caret annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.CaretAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.CaretAnnotation.Frame">
      <summary>
            Gets or sets caret rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.CaretAnnotation.Symbol">
      <summary>
            Gets or sets symbol associated with caret.
            </summary>
      <see cref="T:Aspose.Pdf.Annotations.CaretSymbol" />
    </member>
    <member name="M:Aspose.Pdf.Annotations.CaretAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.CaretAnnotation.#ctor(Aspose.Pdf.Document)">
      <summary>
            Constructor for usign in Generator.
            </summary>
      <param name="document">Document where annotation will be created.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.CaretAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Caret annotation on the specified page.
            </summary>
      <param name="page">Document's page where annotation should be created.</param>
      <param name="rect">Required rectangle that sets annotation's border.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.Characteristics">
      <summary>
            Represents annotation characteristics
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Characteristics.Background">
      <summary>
            Gets or sets color of the background
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Characteristics.Border">
      <summary>
            Gets or sets color of the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Characteristics.Rotate">
      <summary>
            Gets or sets rotation of the annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.CircleAnnotation">
      <summary>
            Class representing Circle annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.CircleAnnotation.#ctor(Aspose.Pdf.Document)">
      <summary>
            Constructor for Circle annotation. 
            </summary>
      <param name="document">Document where annotation will be created.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.CircleAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.CircleAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Circle annotation on the specified page.
            </summary>
      <param name="page">Document's page where annotation should be created.</param>
      <param name="rect">Required rectangle that sets annotation's border.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.CircleAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.CommonFigureAnnotation">
      <summary>
            Abstract class representing common figure annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.CommonFigureAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor.
            </summary>
      <param name="page">The page with which the annotation will be associated.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.CommonFigureAnnotation.#ctor(Aspose.Pdf.Document)">
      <summary>
             Constructor for using in Generator.
             </summary>
      <param name="document">Document where annotation will be placed.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.CommonFigureAnnotation.WriteXfdfAttributes(System.Xml.XmlWriter)">
      <summary>
            When overridden in a derived class, exports annotation attributes into XFDF.
            </summary>
      <param name="writer">Writer of destination file.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.CommonFigureAnnotation.ReadXfdfAttributes(System.Xml.XmlReader)">
      <summary>
            When overridden in a derived class, import annotation attributes from XFDF.
            </summary>
      <param name="reader">Reader of XFDF file.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.CommonFigureAnnotation.InteriorColor">
      <summary>
            Interior color with which to fill the annotation’s rectangle or ellipse.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.CommonFigureAnnotation.Frame">
      <summary>
            The rectangle describing the numerical differences between two rectangles:
            the Rect entry of the annotation and the actual boundaries of the underlying square or circle.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.FileAttachmentAnnotation">
      <summary>
            Class describes file attachment annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FileAttachmentAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FileAttachmentAnnotation.File">
      <summary>
            The specification of the file associated with this annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FileAttachmentAnnotation.Icon">
      <summary>
            Gets or sets icon that shall be used in displaying annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FileAttachmentAnnotation.Opacity">
      <summary>
            Gets or sets icon's opacity from 0 to 1: 0 - completely transparant, 1 - completely opaque.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FileAttachmentAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FileAttachmentAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,Aspose.Pdf.FileSpecification)">
      <summary>
            Creates new FileAttachment annotation on the specified page.
            </summary>
      <param name="page">Document's page where annotation should be created.</param>
      <param name="rect">Required rectangle that sets annotation's border.</param>
      <param name="fileSpec">Describes the file that shoud be bound with the annotation.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.FreeTextAnnotation">
      <summary>
            Represents a free text annotation that displays text directly on the page. Unlike an ordinary text annotation, a free text annotation has no open or closed state; instead of being displayed in a pop-up window, the text is always visible.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FreeTextAnnotation.StartingStyle">
      <summary>
            Gets or sets line ending style for line starting point.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FreeTextAnnotation.#ctor(Aspose.Pdf.Document,Aspose.Pdf.Annotations.DefaultAppearance)">
      <summary>
            Constructor to use with Generator.
            </summary>
      <param name="document">Document where annotation will be created.</param>
      <param name="appearance">Default Appearance</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FreeTextAnnotation.EndingStyle">
      <summary>
            Gets or sets line ending style for line ending point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FreeTextAnnotation.Justification">
      <summary>
            Gets or set a code specifying the form of quadding (justification) to be used in displaying the annotation’s text.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FreeTextAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FreeTextAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,Aspose.Pdf.Annotations.DefaultAppearance)">
      <summary>
            Creates new FreeText annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
      <param name="appearance">The default appearance to be used in formatting the text.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FreeTextAnnotation.DefaultAppearance">
      <summary>
            Gets or sets the default appearance string to be used in formatting the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FreeTextAnnotation.DefaultAppearanceObject">
      <summary>
            Object which represents default appearance of FreeText annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FreeTextAnnotation.Intent">
      <summary>
            Gets or sets the intent of the free text annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FreeTextAnnotation.DefaultStyle">
      <summary>
            Gets or sets a default style string.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FreeTextAnnotation.TextStyle">
      <summary>
            Gets or sets style of the text in appearance. when text style is changed, text appearance is updated.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FreeTextAnnotation.Rotate">
      <summary>
            Angle of annotation rotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FreeTextAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.FreeTextIntent">
      <summary>
            Enumerates the intents of the free text annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.FreeTextIntent.Undefined">
      <summary>
            Not defined state.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.FreeTextIntent.FreeTextCallout">
      <summary>
            Means that the annotation is intended to function as a callout.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.FreeTextIntent.FreeTextTypeWriter">
      <summary>
            Means that the annotation is intended to function as a click-to-type or typewriter object.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.HighlightAnnotation">
      <summary>
            Represents a highlight annotation that highlights a range of text in the document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.HighlightAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.HighlightAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Highlight annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.HighlightAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.InkAnnotation">
      <summary>
            Represents a freehand "scribble" composed of one or more disjoint paths.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.InkAnnotation.CapStyle">
      <summary>
            Style of ink annotation line endings.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.InkAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <!-- Badly formed XML comment ignored for member "M:Aspose.Pdf.Annotations.InkAnnotation.#ctor(Aspose.Pdf.Document,System.Collections.Generic.IList{Aspose.Pdf.Point[]})" -->
    <member name="M:Aspose.Pdf.Annotations.InkAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,System.Collections.IList)">
      <summary>
            Creates new Ink annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
      <param name="inkList">An array of Point[] arrays, each representing a stroked path.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.InkAnnotation.InkList">
      <summary>
            Gets or sets list of gestures that are independent lines which are represented by Point[] arrays.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.InkAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.LineAnnotation">
      <summary>
            Class representing line annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LineAnnotation.Starting">
      <summary>
            Gets or sets starting point of line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LineAnnotation.StartingStyle">
      <summary>
            Gets or sets line ending style for line starting point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LineAnnotation.Ending">
      <summary>
            Gets or sets line ending point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LineAnnotation.EndingStyle">
      <summary>
            Gets or sets ending style for end point of line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LineAnnotation.InteriorColor">
      <summary>
            Gets or sets interior color of the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LineAnnotation.LeaderLine">
      <summary>
            Gets or sets leader line length.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LineAnnotation.LeaderLineExtension">
      <summary>
            Gets or sets length of leader line extension.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LineAnnotation.ShowCaption">
      <summary>
            Gets or sets boolean flag which determinies is contents must be shown as caption.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LineAnnotation.LeaderLineOffset">
      <summary>
            Gets or sets leader line offset.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LineAnnotation.CaptionOffset">
      <summary>
            Gets or sets caption text offset from its normal position.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LineAnnotation.CaptionPosition">
      <summary>
            Gets or sets annotation caption position.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LineAnnotation.Measure">
      <summary>
            Measure units specifed for this annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.LineAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor to annotation processing.
            </summary>
      <param name="visitor">Visitor object</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.LineAnnotation.#ctor(Aspose.Pdf.Document,Aspose.Pdf.Point,Aspose.Pdf.Point)">
      <summary>
            Constructor for using with Generator.
            </summary>
      <param name="document">Document where annotation will be created.</param>
      <param name="start">Starting point. </param>
      <param name="end">Ending point. </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.LineAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,Aspose.Pdf.Point,Aspose.Pdf.Point)">
      <summary>
            Creates new Line annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
      <param name="start">A point, specifying the starting coordinate of the line.</param>
      <param name="end">A point, specifying the ending coordinate of the line.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LineAnnotation.Intent">
      <summary>
            Gets or sets the intent of the line annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LineAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.LineIntent">
      <summary>
            Enumerates the intents of the line annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LineIntent.Undefined">
      <summary>
            Undefined state.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LineIntent.LineArrow">
      <summary>
            Means that the annotation is intended to function as an arrow.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LineIntent.LineDimension">
      <summary>
            Means that the annotation is intended to function as a dimension line.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.LinkAnnotation">
      <summary>
            Represents either a hypertext link to a destination elsewhere in the document or an action to be performed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LinkAnnotation.Action">
      <summary>
            An action to be performed when the link annotation is activated.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LinkAnnotation.Destination">
      <summary>
            A destination to be displayed when the annotation is activated.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.LinkAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.LinkAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Link annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LinkAnnotation.Highlighting">
      <summary>
            The visual effect to be used when the mouse button is pressed or held down inside its active area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LinkAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.MarkupAnnotation">
      <summary>
            Abstract class representing markup annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.MarkupAnnotation.#ctor(Aspose.Pdf.Document)">
      <summary>
            Constructor for markup annotation. 
            </summary>
      <param name="document">Document where annotation will be created.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.MarkupAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor.
            </summary>
      <param name="page">The page with which the annotation will be associated.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.MarkupAnnotation.WriteXfdfAttributes(System.Xml.XmlWriter)">
      <summary>
            When overridden in a derived class, exports annotation attributes into XFDF.
            </summary>
      <param name="writer">Writer of destination file.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.MarkupAnnotation.WriteXfdfElements(System.Xml.XmlWriter)">
      <summary>
            When overridden in a derived class, exports annotation elements into XFDF.
            </summary>
      <param name="writer">Writer of destination file.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.MarkupAnnotation.ReadXfdfAttributes(System.Xml.XmlReader)">
      <summary>
            When overridden in a derived class, import annotation attributes from XFDF.
            </summary>
      <param name="reader">Reader of XFDF file.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.MarkupAnnotation.Title">
      <summary>
            Gets or sets a text that shall be displayed in title bar of annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.MarkupAnnotation.RichText">
      <summary>
            Gets or sets a rich text string to be displayed in the pop-up window when the annotation is opened.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.MarkupAnnotation.CreationDate">
      <summary>
            Gets date and time when annotation was created.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.MarkupAnnotation.Subject">
      <summary>
            Gets text representing desciption of the object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.MarkupAnnotation.Popup">
      <summary>
            Pop-up annotation for entering or editing the text associated with this annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.MarkupAnnotation.Opacity">
      <summary>
            Gets or sets the constant opacity value to be used in painting the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.MarkupAnnotation.InReplyTo">
      <summary>
            A reference to the annotation that this annotation is "in reply to".
            Both annotations must be on the same page of the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.MarkupAnnotation.ReplyType">
      <summary>
            A string specifying the relationship (the "reply type") between this annotation
            and one specified by InReplyTo.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.MovieAnnotation">
      <summary>
            Represents a movie annotation that contains animated graphics and sound to be presented on the computer screen and through the speakers. When the annotation is activated, the movie is played.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.MovieAnnotation.Title">
      <summary>
            Gets or sets the title of the movie annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.MovieAnnotation.File">
      <summary>
            Gets or sets a file specification identifying a self-describing movie file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.MovieAnnotation.Aspect">
      <summary>
            Gets or sets the width and height of the movie’s bounding box, in pixels, specified as [ width height ].
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.MovieAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.MovieAnnotation.#ctor(Aspose.Pdf.Document,System.String)">
      <summary>
            Constructor for using with Generator.
            </summary>
      <param name="document">Document where movie annotation will be created.</param>
      <param name="movieFile">Name of movie file. </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.MovieAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,System.String)">
      <summary>
            Creates new Sound annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
      <param name="movieFile">A movie file to be played when the annotation is activated.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.MovieAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PolyAnnotation">
      <summary>
            Abstract base class for poly- annotations.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PolyAnnotation.#ctor(Aspose.Pdf.Document,Aspose.Pdf.Point[])">
      <summary>
            Constructor.
            </summary>
      <param name="document">Document where annotation will be created.</param>
      <param name="vertices">An array of points representing the horizontal and vertical coordinates of each vertex.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PolyAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,Aspose.Pdf.Point[])">
      <summary>
            Constructor.
            </summary>
      <param name="page">The page with which the annotation will be associated.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
      <param name="vertices">An array of points representing the horizontal and vertical coordinates of each vertex.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PolyAnnotation.Measure">
      <summary>
            Measure units specifed for this annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PolyAnnotation.WriteXfdfAttributes(System.Xml.XmlWriter)">
      <summary>
            When overridden in a derived class, exports annotation attributes into XFDF.
            </summary>
      <param name="writer">Writer of destination file.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PolyAnnotation.WriteXfdfElements(System.Xml.XmlWriter)">
      <summary>
            When overridden in a derived class, exports annotation elements into XFDF.
            </summary>
      <param name="writer">Writer of destination file.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PolyAnnotation.ReadXfdfAttributes(System.Xml.XmlReader)">
      <summary>
            When overridden in a derived class, import annotation attributes from XFDF.
            </summary>
      <param name="reader">Reader of XFDF file.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PolyAnnotation.Vertices">
      <summary>
            Gets or sets an array of points representing the horizontal and vertical coordinates of each vertex.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PolyAnnotation.InteriorColor">
      <summary>
            Gets or sets the interior color with which to fill the annotation’s line endings.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PolyAnnotation.StartingStyle">
      <summary>
            Gets or sets the style of first line ending.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PolyAnnotation.EndingStyle">
      <summary>
            Gets or sets the style of second line ending.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PolyAnnotation.Intent">
      <summary>
            Gets or sets the intent of the polygon or polyline annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PolygonAnnotation">
      <summary>
            Class representing polygon annotation. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PolygonAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object for annotation processing. 
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PolygonAnnotation.#ctor(Aspose.Pdf.Document,Aspose.Pdf.Point[])">
      <summary>
            Constructor for using with Generator.
            </summary>
      <param name="document">Document where annotation will be added.</param>
      <param name="vertices">Array of points.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PolygonAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,Aspose.Pdf.Point[])">
      <summary>
            Creates new Polygon annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
      <param name="vertices">An array of polygon vertices points.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PolygonAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PolyIntent">
      <summary>
            Enumerates the intents of the polygon or polyline annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PolyIntent.Undefined">
      <summary>
            Undefined state.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PolyIntent.PolygonCloud">
      <summary>
            Means that the annotation is intended to function as a cloud object.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PolyIntent.PolyLineDimension">
      <summary>
            Indicates that the polyline annotation is intended to function as a dimension.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PolyIntent.PolygonDimension">
      <summary>
            Indicates that the polygon annotation is intended to function as a dimension.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PolylineAnnotation">
      <summary>
            Represents polyline annotation that is similar to polygon, except that the first and last vertex are not implicitly connected.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PolylineAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PolylineAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,Aspose.Pdf.Point[])">
      <summary>
            Creates new Polyline annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
      <param name="vertices">An array of polygon vertices points.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PolylineAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PopupAnnotation">
      <summary>
            Represents the pop-up annotation that displays text in a pop-up window for entry and editing.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PopupAnnotation.Open">
      <summary>
            Gets or sets a flag specifying whether the pop-up annotation should initially be displayed open.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PopupAnnotation.Parent">
      <summary>
            Gets or sets the parent annotation with which this pop-up annotation shall be associated.
            If this entry is present, the parent annotation’s Contents, M, C, and T entries shall override those of the pop-up annotation itself.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PopupAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PopupAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PopupAnnotation.#ctor(Aspose.Pdf.Document)">
      <summary>
            Constructor. for using in Generator.
            </summary>
      <param name="document">Document where new popup annotation will be created.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.PopupAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Popup annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.ReplyType">
      <summary>
            Enumerates the kinds of the relationships (the “reply type”) between the annotation and one specified by InReplyTo.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.ReplyType.Undefined">
      <summary>
            Undefined relationship.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.ReplyType.Reply">
      <summary>
            The annotation is considered a reply to the annotation specified by InReplyTo. Viewer applications should not display replies to an annotation individually but together in the form of threaded comments.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.ReplyType.Group">
      <summary>
            The annotation is grouped with the annotation specified by InReplyTo.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.SoundAnnotation">
      <summary>
            Represents a sound annotation that contains sound recorded from the computer’s microphone or imported from a file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.SoundAnnotation.Icon">
      <summary>
            Gets or sets an icon to be used in displaying the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.SoundAnnotation.SoundData">
      <summary>
            Gets a sound object defining the sound to be played when the annotation is activated.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.SoundAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.SoundAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.SoundAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,System.String)">
      <summary>
            Creates new Sound annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
      <param name="soundFile">A sound file defining the sound to be played when the annotation is activated.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.SoundAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,System.String,Aspose.Pdf.Annotations.SoundSampleData)">
      <summary>
            Creates new Sound annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
      <param name="soundFile">A sound file defining the sound to be played when the annotation is activated.</param>
      <param name="soundSampleData">A sound sample data contains extra of sound parameters such as sampling rate, bits per sample and so on.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.SoundData">
      <summary>
            Represents a sound data defining the sound to be played when the annotation is activated.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.SoundData.Rate">
      <summary>
            Gets or sets the sampling rate, in samples per second.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.SoundData.Channels">
      <summary>
            Gets or sets the number of sound channels.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.SoundData.Bits">
      <summary>
            Gets or sets the number of bits per sample value per channel.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.SoundData.Contents">
      <summary>
            Gets stream of the sound to be played when the annotation is activated.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.SoundData.Encoding">
      <summary>
            Gets or sets the encoding format for the sample data.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.SoundEncoding">
      <summary>
            The encoding format for the sample data.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SoundEncoding.Raw">
      <summary>
            Unspecified or unsigned values in the range 0 to 2^bits − 1.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SoundEncoding.Signed">
      <summary>
            Twos-complement values.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SoundEncoding.MuLaw">
      <summary>
            μ-law–encoded samples.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SoundEncoding.ALaw">
      <summary>
            A-law–encoded samples.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.SoundIcon">
      <summary>
            Enumerates the icons to be used in displaying the annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SoundIcon.Speaker">
      <summary>
            Speaker icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SoundIcon.Mic">
      <summary>
            Microphone icon.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.SquareAnnotation">
      <summary>
            Class representing square annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.SquareAnnotation.#ctor(Aspose.Pdf.Document)">
      <summary>
            Constructor for using with Generator.
            </summary>
      <param name="document">Documennt where annotation will be created.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.SquareAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor to process annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.SquareAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Square annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.SquareAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.SquigglyAnnotation">
      <summary>
            Represents the squiggly annotation that appears as a jagged underline in the text of a document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.SquigglyAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.SquigglyAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.SquigglyAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Squiggly annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.StampAnnotation">
      <summary>
             Represents rubber stamp annotation. 
             This type of annotation displays text or graphics intended to look as if they were stamped on the page with a rubber stamp.
             </summary>
      <example>
             Next code snippet demonstrates how to add 2 stamps into the first pdf document page.
             Input document comes from inFile and changes are saved into the outFile.
             The first stamp has icon NotForPublicRelease and the second comes with image from rubber.jpg.
             <code lang="C#">
             Document document = new Document(inFile);
             StampAnnotation stamp1 = new StampAnnotation(StampIcon.NotForPublicRelease);
            	stamp1.Rect = new Rectangle(100, 100, 120, 120)
            	document.Pages[1].Annotations.Add(stamp1);
             StampAnnotation stamp2 = new StampAnnotation(new FileStream("rubber.jpg", FileMode.Open));
            	stamp2.Rect = new Rectangle(200, 200, 220, 220)
            	document.Pages[1].Annotations.Add(stamp2);
             document.Save(outFile);
             </code></example>
    </member>
    <member name="P:Aspose.Pdf.Annotations.StampAnnotation.Icon">
      <summary>
            Gets or sets icon for rubber stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.StampAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.StampAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Acepts <see cref="T:Aspose.Pdf.Annotations.AnnotationSelector" /> visitor when browsing annotation collection.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.StampAnnotation.#ctor(Aspose.Pdf.Document)">
      <summary>
            Constructor
            </summary>
      <param name="document">Document where annotation will be created.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.StampAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Stamp annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.StampAnnotation.Image">
      <summary>
            Gets or sets image of the annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.StrikeOutAnnotation">
      <summary>
            Represents a strikeout annotation that appears as a strikeout in the text of the document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.StrikeOutAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.StrikeOutAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new StrikeOut annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.StrikeOutAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.TextAlignment">
      <summary>
            Alignment of text in annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.TextAlignment.Left">
      <summary>
            Text is aligned to left.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.TextAlignment.Center">
      <summary>
            Text is centered.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.TextAlignment.Right">
      <summary>
            Text is aligned to right.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.TextMarkupAnnotation">
      <summary>
            Abstract base class for text markup annotations.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.TextMarkupAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor.
            </summary>
      <param name="page">The page with which the annotation will be associated.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.TextMarkupAnnotation.WriteXfdfAttributes(System.Xml.XmlWriter)">
      <summary>
            When overridden in a derived class, exports annotation attributes into XFDF.
            </summary>
      <param name="writer">Writer of destination file.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.TextMarkupAnnotation.ReadXfdfAttributes(System.Xml.XmlReader)">
      <summary>
            When overridden in a derived class, import annotation attributes from XFDF.
            </summary>
      <param name="reader">Reader of XFDF file.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.TextMarkupAnnotation.QuadPoints">
      <summary>
            Gets or sets an array of points specifying the coordinates of n quadrilaterals. Each quadrilateral encompasses a word or group of contiguous words in the text underlying the annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.UnderlineAnnotation">
      <summary>
            Represents an underline annotation that appears as an underline in the text of the document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.UnderlineAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.UnderlineAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Underline annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.UnderlineAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.WidgetAnnotation">
      <summary>
            Class representing widget annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.WidgetAnnotation.OnActivated">
      <summary>
            An action which shall be performed when the annotation is activated.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.WidgetAnnotation.Actions">
      <summary>
            Gets the annotation actions.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.WidgetAnnotation.Highlighting">
      <summary>
            Annotation highlighting mode.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.WidgetAnnotation.Parent">
      <summary>
            Gets annotation parent.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.WidgetAnnotation.DefaultAppearance">
      <summary>
            Gets or sets default appearance of the field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.WidgetAnnotation.ReadOnly">
      <summary>
            Gets or sets read only status of the field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.WidgetAnnotation.Required">
      <summary>
            Gets or sets required status of the field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.WidgetAnnotation.Exportable">
      <summary>
            Gets or sets exportable flag of the field. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.WidgetAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor.
            </summary>
      <param name="visitor">Visitor to be accepted.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.WidgetAnnotation.#ctor(Aspose.Pdf.Document)">
      <summary>
            Create annotation (used for Generator)
            </summary>
      <param name="doc">Document where annotation will be created.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.WidgetAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.DefaultAppearance">
      <summary>
            Describes default appearance of field (font, text size and color).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.DefaultAppearance.FontSize">
      <summary>
            Gets font size in default apperance.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.DefaultAppearance.TextColor">
      <summary>
            Gets or sets the color of text in the default appearance.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.DefaultAppearance.FontName">
      <summary>
            Gets font name in the default appearance.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.DefaultAppearance.Font">
      <summary>
            Gets font specified as default for text.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.DefaultAppearance.#ctor">
      <summary>
            Constructor of DefaultAppearance.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.DefaultAppearance.Text">
      <summary>
            Gets the list of pdf operators which represent appearence. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.DefaultAppearance.#ctor(System.String,System.Double,System.Drawing.Color)">
      <summary>
            Constructor of DefaultAppearance.
            </summary>
      <param name="fontName">Font name.</param>
      <param name="fontSize">Font size.</param>
      <param name="textColor">Color of text.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.DefaultAppearance.#ctor(Aspose.Pdf.Text.Font,System.Double,System.Drawing.Color)">
      <summary>
            Constructor of Default Appearance. Previously created font may be specified as default font. 
            </summary>
      <param name="font">Font which will be used as default.</param>
      <param name="fontSize">Font size.</param>
      <param name="textColor">Color of text.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.DocumentActionCollection">
      <summary>
            Class describes actions performed on some actions with document
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.DocumentActionCollection.BeforeSaving">
      <summary>
            Gets or sets action performed before document saving.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.DocumentActionCollection.BeforeClosing">
      <summary>
            Gets or sets action that will be performed before documetn closing.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.DocumentActionCollection.AfterSaving">
      <summary>
            Gets or sets action that will be performed after document saving.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.DocumentActionCollection.BeforePrinting">
      <summary>
            Action that will be performed before document printing.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.DocumentActionCollection.AfterPrinting">
      <summary>
            Action that will be performed after document printing.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.DocumentActionCollection.#ctor(Aspose.Pdf.Document)">
      <summary>
            Constructor for DocumentActionCollection. Constructs DocumentActionCollection objects from Pdf.Kit.Engine Document object.
            </summary>
      <param name="document">Document for which action colleciton is created.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.FitBExplicitDestination">
      <summary>
            Represents explicit destination that displays the page with its contents magnified just enough to fit its bounding box entirely within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the bounding box within the window in the other dimension.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitBExplicitDestination.#ctor(Aspose.Pdf.Page)">
      <summary>
            Creates local explicit destination.
            </summary>
      <param name="page">The destination page object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitBExplicitDestination.#ctor(Aspose.Pdf.Document,System.Int32)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="document">The parent document that contains this object.</param>
      <param name="pageNumber">The destination page number of remote document.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitBExplicitDestination.#ctor(System.Int32)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="pageNumber">The destination page number of remote document.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitBExplicitDestination.ToString">
      <summary>
            Converts the object state into string value. Example: "1 FitB".
            </summary>
      <returns>String value representing object state.</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.FitBHExplicitDestination">
      <summary>
            Represents explicit destination that displays the page with the vertical coordinate top positioned at the top edge of the window and the contents of the page magnified just enough to fit the entire width of its bounding box within the window. A null value for top specifies that the current value of that parameter is to be retained unchanged.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FitBHExplicitDestination.Top">
      <summary>
            Gets the vertical coordinate top positioned at the top edge of the window.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitBHExplicitDestination.#ctor(Aspose.Pdf.Page,System.Double)">
      <summary>
            Creates local explicit destination.
            </summary>
      <param name="page">The destination page object.</param>
      <param name="top">The vertical coordinate top positioned at the top edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitBHExplicitDestination.#ctor(Aspose.Pdf.Document,System.Int32,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="document">The parent document that contains this object.</param>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="top">The vertical coordinate top positioned at the top edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitBHExplicitDestination.#ctor(System.Int32,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="top">The vertical coordinate top positioned at the top edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitBHExplicitDestination.ToString">
      <summary>
            Converts the object state into string value. Example: "1 FitBH 100".
            </summary>
      <returns>String value representing object state.</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.FitBVExplicitDestination">
      <summary>
            Represents explicit destination that displays the page with the horizontal coordinate left positioned at the left edge of the window and the contents of the page magnified just enough to fit the entire height of its bounding box within the window. A null value for left specifies that the current value of that parameter is to be retained unchanged.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FitBVExplicitDestination.Left">
      <summary>
            Gets the horizontal coordinate left positioned at the left edge of the window.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitBVExplicitDestination.#ctor(Aspose.Pdf.Page,System.Double)">
      <summary>
            Creates local explicit destination.
            </summary>
      <param name="page">The destination page object.</param>
      <param name="left">The horizontal coordinate left positioned at the left edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitBVExplicitDestination.#ctor(Aspose.Pdf.Document,System.Int32,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="document">The parent document that contains this object.</param>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="left">The horizontal coordinate left positioned at the left edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitBVExplicitDestination.#ctor(System.Int32,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="left">The horizontal coordinate left positioned at the left edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitBVExplicitDestination.ToString">
      <summary>
            Converts the object state into string value. Example: "1 FitBV 100".
            </summary>
      <returns>String value representing object state.</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.FitExplicitDestination">
      <summary>
            Represents explicit destination that displays the page with its contents magnified just enough to fit the entire page within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the page within the window in the other dimension.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitExplicitDestination.#ctor(Aspose.Pdf.Page)">
      <summary>
            Creates local explicit destination.
            </summary>
      <param name="page">The destination page object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitExplicitDestination.#ctor(Aspose.Pdf.Document,System.Int32)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="document">The Aspose.Pdf.Document object.</param>
      <param name="pageNumber">The destination page number.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitExplicitDestination.#ctor(System.Int32)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="pageNumber">The destination page number of remote document.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitExplicitDestination.ToString">
      <summary>
            Converts the object state into string value. Example: "1 Fit".
            </summary>
      <returns>String value representing object state.</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.FitHExplicitDestination">
      <summary>
            Represents explicit destination that displays the page with the vertical coordinate top positioned at the top edge of the window and the contents of the page magnified just enough to fit the entire width of the page within the window. A null value for top specifies that the current value of that parameter is to be retained unchanged.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FitHExplicitDestination.Top">
      <summary>
            Gets the vertical coordinate top positioned at the top edge of the window.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitHExplicitDestination.#ctor(Aspose.Pdf.Page,System.Double)">
      <summary>
            Creates local explicit destination.
            </summary>
      <param name="page">The destination page object.</param>
      <param name="top">The vertical coordinate top positioned at the top edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitHExplicitDestination.#ctor(Aspose.Pdf.Document,System.Int32,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="document">The parent document that contains this object.</param>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="top">The vertical coordinate top positioned at the top edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitHExplicitDestination.#ctor(System.Int32,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="top">The vertical coordinate top positioned at the top edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitHExplicitDestination.ToString">
      <summary>
            Converts the object state into string value. Example: "1 FitH 100".
            </summary>
      <returns>String value representing object state.</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.FitRExplicitDestination">
      <summary>
            Represents explicit destination that displays the page with its contents magnified just enough to fit the rectangle specified by the coordinates left, bottom, right, and topentirely within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the rectangle within the window in the other dimension. A null value for any of the parameters may result in unpredictable behavior.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FitRExplicitDestination.Left">
      <summary>
            Gets left horizontal coordinate of visible rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FitRExplicitDestination.Bottom">
      <summary>
            Gets bottom vertical coordinate of visible rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FitRExplicitDestination.Right">
      <summary>
            Gets right horizontal coordinate of visible rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FitRExplicitDestination.Top">
      <summary>
            Gets top vertical coordinate of visible rectangle.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitRExplicitDestination.#ctor(Aspose.Pdf.Page,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates local explicit destination.
            </summary>
      <param name="page">The destination page object.</param>
      <param name="left">Left horizontal coordinate of visible rectangle.</param>
      <param name="bottom">Bottom vertical coordinate of visible rectangle.</param>
      <param name="right">Right horizontal coordinate of visible rectangle.</param>
      <param name="top">Top vertical coordinate of visible rectangle.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitRExplicitDestination.#ctor(Aspose.Pdf.Document,System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="document">The parent document that contains this object.</param>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="left">Left horizontal coordinate of visible rectangle.</param>
      <param name="bottom">Bottom vertical coordinate of visible rectangle.</param>
      <param name="right">Right horizontal coordinate of visible rectangle.</param>
      <param name="top">Top vertical coordinate of visible rectangle.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitRExplicitDestination.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="left">Left horizontal coordinate of visible rectangle.</param>
      <param name="bottom">Bottom vertical coordinate of visible rectangle.</param>
      <param name="right">Right horizontal coordinate of visible rectangle.</param>
      <param name="top">Top vertical coordinate of visible rectangle.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitRExplicitDestination.ToString">
      <summary>
            Converts the object state into string value. Example: "1 FitR 100 200 300 400".
            </summary>
      <returns>String value representing object state.</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.FitVExplicitDestination">
      <summary>
            Represents explicit destination that displays the page with the horizontal coordinate left positioned at the left edge of the window and the contents of the page magnified just enough to fit the entire height of the page within the window. A null value for left specifies that the current value of that parameter is to be retained unchanged.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.FitVExplicitDestination.Left">
      <summary>
            Gets the horizontal coordinate left positioned at the left edge of the window.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitVExplicitDestination.#ctor(Aspose.Pdf.Page,System.Double)">
      <summary>
            Creates local explicit destination.
            </summary>
      <param name="page">The destination page object.</param>
      <param name="left">The horizontal coordinate left positioned at the left edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitVExplicitDestination.#ctor(Aspose.Pdf.Document,System.Int32,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="document">The parent document that contains this object.</param>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="left">The horizontal coordinate left positioned at the left edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitVExplicitDestination.#ctor(System.Int32,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="left">The horizontal coordinate left positioned at the left edge of the window.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.FitVExplicitDestination.ToString">
      <summary>
            Converts the object state into string value. Example: "1 FitV 100".
            </summary>
      <returns>String value representing object state.</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.XYZExplicitDestination">
      <summary>
            Represents explicit destination that displays the page with the coordinates (left, top) positioned at the upper-left corner of the window and the contents of the page magnified by the factor zoom. A null value for any of the parameters left, top, or zoom specifies that the current value of that parameter is to be retained unchanged. A zoom value of 0 has the same meaning as a null value.
            </summary>
      <example>
        <code lang="C#">
            Document doc = new Document("example.pdf");
            XYZExplicitDestination dest = (XYZExplicitDestination)doc.Outlines[1].Destination;
            string left = dest.Left;
            string top = dest.Top;
            string zoom = dest.Zoom;
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Annotations.XYZExplicitDestination.Left">
      <summary>
            Gets left horizontal coordinate of the upper-left corner of the window.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.XYZExplicitDestination.Top">
      <summary>
            Gets top vertical coordinate of the upper-left corner of the window.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.XYZExplicitDestination.Zoom">
      <summary>
            Gets zoom factor.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.XYZExplicitDestination.#ctor(Aspose.Pdf.Page,System.Double,System.Double,System.Double)">
      <summary>
            Creates local explicit destination.
            </summary>
      <param name="page">The destination page object.</param>
      <param name="left">Left horizontal coordinate of the upper-left corner of the window.</param>
      <param name="top">Top vertical coordinate of the upper-left corner of the window.</param>
      <param name="zoom">Zoom factor.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.XYZExplicitDestination.CreateDestination(Aspose.Pdf.Page,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Create destintion to specified location of the page considering page rotation if required.
            </summary>
      <param name="page">Destination page.</param>
      <param name="left">Left position on the page.</param>
      <param name="top">Top position on the page.</param>
      <param name="zoom">Zoom factor (0 for default).</param>
      <param name="considerRotation">If true position will be recalculated according to page rotation.</param>
      <returns>Destination object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.XYZExplicitDestination.CreateDestinationToUpperLeftCorner(Aspose.Pdf.Page,System.Double)">
      <summary>
            Create destionation to upper left corner of the specifed page.
            </summary>
      <param name="page">Destination page.</param>
      <param name="zoom">Zoom factor.</param>
      <returns>Destination object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.XYZExplicitDestination.CreateDestinationToUpperLeftCorner(Aspose.Pdf.Page)">
      <summary>
            Create destination to specified page.
            </summary>
      <param name="page">Destination page.</param>
      <returns>Destination object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.XYZExplicitDestination.#ctor(Aspose.Pdf.Document,System.Int32,System.Double,System.Double,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="document">The parent document that contains this object.</param>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="left">Left horizontal coordinate of the upper-left corner of the window.</param>
      <param name="top">Top vertical coordinate of the upper-left corner of the window.</param>
      <param name="zoom">Zoom factor.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.XYZExplicitDestination.#ctor(System.Int32,System.Double,System.Double,System.Double)">
      <summary>
            Creates remote explicit destination.
            </summary>
      <param name="pageNumber">The destination page number of remote document.</param>
      <param name="left">Left horizontal coordinate of the upper-left corner of the window.</param>
      <param name="top">Top vertical coordinate of the upper-left corner of the window.</param>
      <param name="zoom">Zoom factor.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.XYZExplicitDestination.ToString">
      <summary>
            Converts the object state into string value. Example: "1 XYZ 100 200 3".
            </summary>
      <returns>String value representing object state.</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.GoToAction">
      <summary>
            Represents a go-to action that changes the view to a specified destination (page, location, and magnification factor).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.GoToAction.Destination">
      <summary>
            Gets or sets the destination to jump to.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.GoToAction.#ctor(System.Int32)">
      <summary>
            Constructor for GoToAction class.
            </summary>
      <param name="page">The destination page number to jump to.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.GoToAction.#ctor(Aspose.Pdf.Page)">
      <summary>
            Constructor for GoToAction class.
            </summary>
      <param name="page">Aspose.Pdf.Page destination object to jump to.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.GoToAction.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Annotations.ExplicitDestinationType,System.Double[])">
      <summary>
            Constructor for GoToAction class. 
            </summary>
      <param name="page">Destination page.</param>
      <param name="type">Destination type.</param>
      <param name="values">Action parameters.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.GoToAction.#ctor(Aspose.Pdf.Annotations.ExplicitDestination)">
      <summary>
            Constructor.
            </summary>
      <param name="destination">Explicit destination.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.GoToAction.#ctor">
      <summary>
            Constructor.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.GoToAction.#ctor(Aspose.Pdf.Document,System.String)">
      <summary>
            Action which linked with Named Destination.
            </summary>
      <param name="doc">Document where action will be created.</param>
      <param name="name">Name of the destination.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.GoToRemoteAction">
      <summary>
            Represents a remote go-to action that is similar to an ordinary go-to action but jumps to a destination in another PDF file instead of the current file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.GoToRemoteAction.File">
      <summary>
            Gets or sets the specification of the file in which the destination is located.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.GoToRemoteAction.NewWindow">
      <summary>
            Gets or sets a flag specifying whether to open the destination document in a new window.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.GoToRemoteAction.#ctor(System.String,System.Int32)">
      <summary>
            Initializes GoToRemoteAction object.
            </summary>
      <param name="remotePdf">Destination PDF document.</param>
      <param name="remotePageNumber">Destination page number.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.GoToRemoteAction.#ctor(System.String,Aspose.Pdf.Annotations.ExplicitDestination)">
      <summary>
            Initializes GoToRemoteAction object.
            </summary>
      <param name="remotePdf">Destination PDF document. </param>
      <param name="destination">Destination in the  PDF document.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.GoToRemoteAction.Destination">
      <summary>
            Gets or sets the destination to jump to.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.GoToURIAction">
      <summary>
            Represents a URI action causes a URI to be resolved.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.GoToURIAction.URI">
      <summary>
            Gets or sets the uniform resource identifier to resolve.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.GoToURIAction.#ctor(System.String)">
      <summary>
            Constructor.
            </summary>
      <param name="uri">The uniform resource identifier to resolve.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.HighlightingMode">
      <summary>
            Enumerates the annotation’s highlighting mode, the visual effect to be used when the mouse button is pressed or held down inside its active area.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.HighlightingMode.None">
      <summary>
            No highlighting.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.HighlightingMode.Invert">
      <summary>
            Invert the contents of the annotation rectangle.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.HighlightingMode.Outline">
      <summary>
            Invert the annotation’s border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.HighlightingMode.Push">
      <summary>
            Display the annotation’s down appearance, if any. If no down appearance is defined, offset the contents of the annotation rectangle to appear as if it were being pushed below the surface of the page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.HighlightingMode.Toggle">
      <summary>
            Same as Push (which is preferred).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.JavascriptAction">
      <summary>
            Class representing javascript action.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.JavascriptAction.Script">
      <summary>
            Gets or sets javascript code.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.JavascriptAction.#ctor(System.String)">
      <summary>
            Constructor.
            </summary>
      <param name="javaScript">JavaScript code.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.LaunchAction">
      <summary>
            Represents a launch action that launches an application or opens or prints a document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LaunchAction.File">
      <summary>
            Gets or sets the application to be launched or the document to be opened or printed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.LaunchAction.NewWindow">
      <summary>
            Gets or sets a flag specifying whether to open the destination document in a new window (affect PDF documents only).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.LaunchAction.#ctor(System.String)">
      <summary>
            Creates a launch action.
            </summary>
      <param name="file">The file to be launched.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.LaunchAction.#ctor(Aspose.Pdf.Document,System.String)">
      <summary>
            Creates a launch action.
            </summary>
      <param name="document">Document where action will be created.</param>
      <param name="file">The file to be launched.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.NamespaceDoc">
      <summary>
            The <b>Aspose.Pdf.InteractiveFeatures</b> namespace provides classes for working with various types of actions, destinations and other features of document 
            which traditionally called as interactive providing means user can intercommunicate with it.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PdfAction">
      <summary>
            Represents Action in PDF document
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.PdfAction.Next">
      <summary>
            Next actions in sequence. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.SubmitFormAction">
      <summary>
            Class which describes submit-form action.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SubmitFormAction.Exclude">
      <summary>
            If clear, the Fields array specifies which fields to include in the submission. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SubmitFormAction.IncludeNoValueFields">
      <summary>
            If set, all fields designated by the Fields array and the Include/Exclude flag shall be submitted.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SubmitFormAction.ExportFormat">
      <summary>
            If set, field names and values shall be submitted in HTML Form format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SubmitFormAction.GetMethod">
      <summary>
            If set, field names and values shall be submitted using an HTTP GET request.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SubmitFormAction.SubmitCoordinates">
      <summary>
            If set, the coordinates of the mouse click that caused the submit-form action shall be transmitted as part of the form data.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SubmitFormAction.Xfdf">
      <summary>
            If set, field names and values shall be submitted as XFDF.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SubmitFormAction.IncludeAppendSaves">
      <summary>
            If set, the submitted FDF file shall include the contents of all incremental updates.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SubmitFormAction.IncludeAnnotations">
      <summary>
            If set, the submitted FDF file shall include includes all markup annotations in the underlying PDF document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SubmitFormAction.SubmitPdf">
      <summary>
            If set, the document shall be submitted as PDF, using the MIME content type application/pdf.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SubmitFormAction.CanonicalFormat">
      <summary>
            If set, any submitted field values representing dates shall be converted to the standard format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SubmitFormAction.ExclNonUserAnnots">
      <summary>
            If set, it shall include only those markup annotations whose T entry matches the name of the current user.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SubmitFormAction.ExclFKey">
      <summary>
            If set, the submitted FDF shall exclude the F entry.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.SubmitFormAction.EmbedForm">
      <summary>
            If set, the F entry of the submitted FDF shall be a file specification containing an 
            embedded file stream representing the PDF file from which the FDF is being submitted.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.SubmitFormAction.Flags">
      <summary>
            Gets or sets flagas of submit action
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.SubmitFormAction.Url">
      <summary>
            Destination URL.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.SubmitFormAction.#ctor">
      <summary>
            Initializes SubmitFormAction object.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.Annotation">
      <summary>
            Class representing annotation object.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.Annotation.message1">
      <summary>
            The message.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.UpdateAppearanceOnConvert">
      <summary>
            If true, annotation appearance will be updated before converting PF document into image. This allows convert fields correctly but probably demand more time.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.UseFontSubset">
      <summary>
            If this property set to true, fonts will be added to document as subsets. Default value is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.NormalAppearance">
      <summary>
            Gets normal appearance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.Annotation.WriteXfdfAttributes(System.Xml.XmlWriter)">
      <summary>
            When overridden in a derived class, exports annotation attributes into XFDF.
            </summary>
      <param name="writer">Writer of destination file.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.Annotation.WriteXfdfElements(System.Xml.XmlWriter)">
      <summary>
            When overridden in a derived class, exports annotation elements into XFDF.
            </summary>
      <param name="writer">Writer of destination file.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.Annotation.ReadXfdfAttributes(System.Xml.XmlReader)">
      <summary>
            When overridden in a derived class, import annotation attributes from XFDF.
            </summary>
      <param name="reader">Reader of XFDF file.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.Flags">
      <summary>
            Flags of the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.RotatedRect">
      <summary>
            Gets rotated rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.InnerRect">
      <summary>
            Returns internal rectnagle of annotation, i.e. rectangle recalculated according to RD entry of annotation
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.Annotation.Initialize(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Initialize the annotation.
            </summary>
      <param name="page">The Aspose.Pdf.Page object.</param>
      <param name="rect">The rectangle of the annotation.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.Annotation.Initialize(Aspose.Pdf.Document,Aspose.Pdf.Rectangle)">
      <summary>
            Create annotation data structure. 
            </summary>
      <param name="doc">Document where annotation is created.</param>
      <param name="rect">Annotation rectangle.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.Annotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor.
            </summary>
      <param name="page">The page with which the annotation will be associated.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.Annotation.#ctor(Aspose.Pdf.Document,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor for Annotation. 
            </summary>
      <param name="doc">Document where annotation is added.</param>
      <param name="rect">Annotation rectangle.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.Width">
      <summary>
            Gets or sets width of the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.Actions">
      <summary>
            Gets list of annotatation actions.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.Height">
      <summary>
            Gets or sets height of the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.Rect">
      <summary>
            Gets or sets annotation rectangle.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.Annotation.GetRectangle(System.Boolean)">
      <summary>
            Returns rectangle of annotation taking into consideration page rotation.
            </summary>
      <param name="considerRotation">If true, page rotation is takein into consideration.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.Contents">
      <summary>
            Gets or sets annotation text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.Name">
      <summary>
            Gets or sets annotation name on the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.Modified">
      <summary>
            Gets or sets date and time when annotation was recently modified.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.Color">
      <summary>
            Gets or sets annotation color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.Border">
      <summary>
            Gets or sets annotation border characteristics. <see cref="P:Aspose.Pdf.Annotations.Annotation.Border" /></summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.ActiveState">
      <summary>
            Gets or sets current annotation appearance state.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.Characteristics">
      <summary>
            Gets annotation characteristics.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.States">
      <summary>
            Gets appearance dictionary of annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.Alignment">
      <summary>
            Annotation alignment. This property is obsolete. Use HorizontalAligment instead.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.HorizontalAlignment">
      <summary>
            Gets or sets text alignmennt for annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.Annotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor for annotation processing.
            </summary>
      <param name="visitor">AnnotationSelector object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.Annotation.Flatten">
      <summary>
            Places annotation contents directly on the page,
            annotation object will be removed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.FullName">
      <summary>
            Gets full qualified name of the annotation. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.Appearance">
      <summary>
            Gets appearance dictionary of the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Annotation.PageIndex">
      <summary>
            Gets index of page which contains annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.TextStyle">
      <summary>
            Class represents style of text in annotation 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.TextStyle.FontName">
      <summary>
            Name of the font.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.TextStyle.FontSize">
      <summary>
            Fonst size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.TextStyle.Alignment">
      <summary>
            Gets or sets horizontal alignment of the text. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.TextStyle.HorizontalAlignment">
      <summary>
            Text alignment. Valid values are: Left, Center, Rigth.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.TextStyle.Color">
      <summary>
            Color of the text.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.TextStyle.ToString">
      <summary>
            String representation of TextStyle.
            </summary>
      <returns>String representation.</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.AnnotationSelector">
      <summary>
            This class is used for selecting annotations using Visitor template idea.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.LinkAnnotation)">
      <summary>
             Select link annotation if AnnotationSelector was initialized with LinkAnnotation object.
             </summary>
      <param name="link">
             LinkAnnotation object for selecting.
             </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.#ctor(Aspose.Pdf.Annotations.Annotation)">
      <summary>
             Initializes new <see cref="T:Aspose.Pdf.Annotations.AnnotationSelector" /> object.
             </summary>
      <param name="annotation">
             Annotation to be selected. 
             This object only describes some characteristics we want found annotations to have, e.g. the type of annotation.
             </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.FileAttachmentAnnotation)">
      <summary>
             Select attachment annotation if AnnotationSelector was initialized with FileAttachmentAnnotation object.
            </summary>
      <param name="attachment">
             FileAttachmentAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.TextAnnotation)">
      <summary>
             Select text annotation if AnnotationSelector was initialized with TextAnnotation object.
            </summary>
      <param name="text">
             TextAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.RedactionAnnotation)">
      <summary>
            Select redact annotation if AnnotationSelector was initialized with RedactAnnotation object.
            </summary>
      <param name="redact">RedactAnnotation object for selecting.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.FreeTextAnnotation)">
      <summary>
             Select freetext annotation if AnnotationSelector was initialized with FreeTextAnnotation object.
            </summary>
      <param name="freetext">
             FreeTextAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.HighlightAnnotation)">
      <summary>
             Select attachment annotation if AnnotationSelector was initialized with FreeTextAnnotation object.
            </summary>
      <param name="highlight">
             HighlightAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.UnderlineAnnotation)">
      <summary>
             Select underline annotation if AnnotationSelector was initialized with UnderlineAnnotation object.
            </summary>
      <param name="underline">
             UnderlineAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.StrikeOutAnnotation)">
      <summary>
             Select strikeOut annotation if AnnotationSelector was initialized with StrikeOutAnnotation object.
            </summary>
      <param name="strikeOut">
             StrikeOutAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.SquigglyAnnotation)">
      <summary>
             Select squiggly annotation if AnnotationSelector was initialized with SquigglyAnnotation object.
            </summary>
      <param name="squiggly">
             SquigglyAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.PopupAnnotation)">
      <summary>
             Select popup annotation if AnnotationSelector was initialized with PopupAnnotation object.
            </summary>
      <param name="popup">
             PopupAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.LineAnnotation)">
      <summary>
             Select line annotation if AnnotationSelector was initialized with LineAnnotation object.
            </summary>
      <param name="line">
             LineAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.CircleAnnotation)">
      <summary>
             Select circle annotation if AnnotationSelector was initialized with CircleAnnotation object.
            </summary>
      <param name="circle">
             CircleAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.SquareAnnotation)">
      <summary>
             Select square annotation if AnnotationSelector was initialized with SquareAnnotation object.
            </summary>
      <param name="square">
             SquareAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.InkAnnotation)">
      <summary>
             Select ink annotation if AnnotationSelector was initialized with InkAnnotation object.
            </summary>
      <param name="ink">
             InkAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.PolylineAnnotation)">
      <summary>
             Select polyline annotation if AnnotationSelector was initialized with PolylineAnnotation object.
            </summary>
      <param name="polyline">
             PolylineAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.PolygonAnnotation)">
      <summary>
             Select polygon annotation if AnnotationSelector was initialized with PolygonAnnotation object.
            </summary>
      <param name="polygon">
             PolygonAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.CaretAnnotation)">
      <summary>
             Select caret annotation if AnnotationSelector was initialized with CaretAnnotation object.
            </summary>
      <param name="caret">
             CaretAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.StampAnnotation)">
      <summary>
             Select stamp annotation if AnnotationSelector was initialized with StampAnnotation object.
            </summary>
      <param name="stamp">
             StampAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.WidgetAnnotation)">
      <summary>
             Select widget annotation if AnnotationSelector was initialized with WidgetAnnotation object.
            </summary>
      <param name="widget">
             WidgetAnnotation object for selecting.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.WatermarkAnnotation)">
      <summary>
            Select watermark annotation if AnnotationSelector was initialized with WatermarkAnnotation object.
            </summary>
      <param name="watermark">WatermarkAnnotation for selecting.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.MovieAnnotation)">
      <summary>
            Select movie annotation if AnnotationSelector was initialized with MovieAnnotation object.
            </summary>
      <param name="movie">MovieAnnotation object for selecting.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.RichMediaAnnotation)">
      <summary>
            Select movie annotation if AnnotationSelector was initialized with RichMedia annotation object.
            </summary>
      <param name="richMedia">RichMedia annotation.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.ScreenAnnotation)">
      <summary>
            Select screen annotation if AnnotationSelector was initialized with ScreenAnnotation object.
            </summary>
      <param name="screen">ScreenAnnotation object for selecting.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.AnnotationSelector.Visit(Aspose.Pdf.Annotations.PDF3DAnnotation)">
      <summary>
            Select PDF3D annotation if AnnotationSelector was initialized with PDF3DAnnotation object.
            </summary>
      <param name="pdf3D">PDF3DAnnotation object for selecting.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.AnnotationState">
      <summary>
            The enumeration of states to which the original annotation can be set.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationState.Undefined">
      <summary>
            Not defined state.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationState.Marked">
      <summary>
            The annotation has been marked by the user.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationState.Unmarked">
      <summary>
            The annotation has not been marked by the user.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationState.Accepted">
      <summary>
            The user agrees with the change.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationState.Rejected">
      <summary>
            The user disagrees with the change.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationState.Cancelled">
      <summary>
            The change has been cancelled.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationState.Completed">
      <summary>
            The change has been completed.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.AnnotationState.None">
      <summary>
            The user has indicated nothing about the change.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.Border">
      <summary>
            Class representing characteristics of annotation border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Border.HCornerRadius">
      <summary>
            Gets or sets horizontal corner radius.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Border.VCornerRaduis">
      <summary>
            Obsolete property. Please use VCornerRadius instead. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Border.VCornerRadius">
      <summary>
            Gets or sets vertical corner radius.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Border.Width">
      <summary>
            Gets or sets border width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Border.EffectIntensity">
      <summary>
            Gets or sets effect intencity. Valid range of value is [0..2].
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Border.Style">
      <summary>
            Gets or sets border style.
            </summary>
      <see cref="T:Aspose.Pdf.Annotations.BorderStyle" />
    </member>
    <member name="P:Aspose.Pdf.Annotations.Border.Effect">
      <summary>
            Gets or sets border effect.
            </summary>
      <see cref="T:Aspose.Pdf.Annotations.BorderEffect" />
    </member>
    <member name="P:Aspose.Pdf.Annotations.Border.Dash">
      <summary>
            Gets or sets dash pattern.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.Border.#ctor(Aspose.Pdf.Annotations.Annotation)">
      <summary>
            Constructor for border object.
            </summary>
      <param name="parent">Parent annotation.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.BorderEffect">
      <summary>
            Describes effect which should be applied to the border of the annotations.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.BorderEffect.None">
      <summary>
            No effect.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.BorderEffect.Cloudy">
      <summary>
            The border will appear "cloudly".
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.BorderStyle">
      <summary>
            Describes style of the annotation border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.BorderStyle.Solid">
      <summary>
            Solid border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.BorderStyle.Dashed">
      <summary>
            Dashed border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.BorderStyle.Beveled">
      <summary>
            Bevelled border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.BorderStyle.Inset">
      <summary>
            Inset border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.BorderStyle.Underline">
      <summary>
            Underlined border.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.CaptionPosition">
      <summary>
            Enumeration of the annotation’s caption positioning.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.CaptionPosition.Inline">
      <summary>
            The caption will be centered inside the line (default value).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.CaptionPosition.Top">
      <summary>
            The caption will be on top of the line.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.CaretSymbol">
      <summary>
            A symbol to be associated with the caret.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.CaretSymbol.None">
      <summary>
            No symbol should be associated with the caret.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.CaretSymbol.Paragraph">
      <summary>
            A new paragraph symbol (¶) should be associated with the caret.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.Dash">
      <summary>
            Class representing line dash pattern.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Dash.On">
      <summary>
            Gets or sets length of dash.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.Dash.Off">
      <summary>
            Gets or sets length of gap between dashes.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.Dash.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructor for Dash.
            </summary>
      <param name="on">Length of the dash.</param>
      <param name="off">Length of the gap.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.FileIcon">
      <summary>
            An icon to be used in displaying the annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.FileIcon.PushPin">
      <summary>
            PushPin icon (default value).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.FileIcon.Graph">
      <summary>
            Graph icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.FileIcon.Paperclip">
      <summary>
            Paperclip icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.FileIcon.Tag">
      <summary>
            This is tag icon.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.IAnnotationVisitor">
      <summary>
            Defines Visitor for visiting different document annotations.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.LinkAnnotation)">
      <summary>
            Visit/select link annotation.
            </summary>
      <param name="link">
            LinkAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.FileAttachmentAnnotation)">
      <summary>
            Visit/select attachment annotation.
            </summary>
      <param name="attachment">
            FileAttachmentAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.TextAnnotation)">
      <summary>
            Visit/select text annotation.
            </summary>
      <param name="text">
            TextAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.FreeTextAnnotation)">
      <summary>
            Visit/select freetext annotation.
            </summary>
      <param name="freetext">
            FreeTextAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.HighlightAnnotation)">
      <summary>
            Visit/select highlight annotation.
            </summary>
      <param name="highlight">
            HighlightAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.UnderlineAnnotation)">
      <summary>
            Visit/select underline annotation.
            </summary>
      <param name="underline">
            UnderlineAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.StrikeOutAnnotation)">
      <summary>
            Visit/select strikeOut annotation.
            </summary>
      <param name="strikeOut">
            StrikeOutAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.SquigglyAnnotation)">
      <summary>
            Visit/select squiggly annotation.
            </summary>
      <param name="squiggly">
            SquigglyAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.PopupAnnotation)">
      <summary>
            Visit/select popup annotation.
            </summary>
      <param name="popup">
            PopupAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.LineAnnotation)">
      <summary>
            Visit/select line annotation.
            </summary>
      <param name="line">
            LineAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.CircleAnnotation)">
      <summary>
            Visit/select circle annotation.
            </summary>
      <param name="circle">
            CircleAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.SquareAnnotation)">
      <summary>
            Visit/select square annotation.
            </summary>
      <param name="square">
            SquareAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.InkAnnotation)">
      <summary>
            Visit/select ink annotation.
            </summary>
      <param name="ink">
            InkAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.PolylineAnnotation)">
      <summary>
            Visit/select polyline annotation.
            </summary>
      <param name="polyline">
            PolylineAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.PolygonAnnotation)">
      <summary>
            Visit/select polygon annotation.
            </summary>
      <param name="polygon">
            PolygonAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.CaretAnnotation)">
      <summary>
            Visit/select caret annotation.
            </summary>
      <param name="caret">
            CaretAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.StampAnnotation)">
      <summary>
            Visit/select stamp annotation.
            </summary>
      <param name="stamp">
            StampAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.WidgetAnnotation)">
      <summary>
            Visit/select widget annotation.
            </summary>
      <param name="widget">
            WidgetAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.MovieAnnotation)">
      <summary>
            Visit/select movie annotation.
            </summary>
      <param name="movie">
            MovieAnnotation object example/template.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.IAnnotationVisitor.Visit(Aspose.Pdf.Annotations.ScreenAnnotation)">
      <summary>
            Visit/select screen annotation.
            </summary>
      <param name="screen">
            ScreenAnnotation object example/template.
            </param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.LineEnding">
      <summary>
            Enumerates the line ending styles to be used in drawing the line.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LineEnding.None">
      <summary>
            No line ending.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LineEnding.Square">
      <summary>
            A square filled with the annotation’s interior color, if any.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LineEnding.Circle">
      <summary>
            A circle filled with the annotation’s interior color, if any.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LineEnding.Diamond">
      <summary>
            A diamond shape filled with the annotation’s interior color, if any.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LineEnding.OpenArrow">
      <summary>
            Two short lines meeting in an acute angle to form an open arrowhead.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LineEnding.ClosedArrow">
      <summary>
            Two short lines meeting in an acute angle as in the OpenArrow style and connected by a third line to form a triangular closed arrowhead filled with the annotation’s interior color, if any.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LineEnding.Butt">
      <summary>
            A short line at the endpoint perpendicular to the line itself.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LineEnding.ROpenArrow">
      <summary>
            Two short lines in the reverse direction from OpenArrow.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LineEnding.RClosedArrow">
      <summary>
            A triangular closed arrowhead in the reverse direction from ClosedArrow.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LineEnding.Slash">
      <summary>
            A short line at the endpoint approximately 30 degrees clockwise from perpendicular to the line itself.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.StampIcon">
      <summary>
            Enumerates the icons to be used in displaying the annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.StampIcon.Draft">
      <summary>
            Draft stamp icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.StampIcon.Approved">
      <summary>
            Approved stamp icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.StampIcon.Experimental">
      <summary>
            Experimental stamp icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.StampIcon.NotApproved">
      <summary>
            Stamp icon is not approved.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.StampIcon.AsIs">
      <summary>
            Stamp icon "as is".
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.StampIcon.Expired">
      <summary>
            Stamp icon is expired.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.StampIcon.NotForPublicRelease">
      <summary>
            Not for public release.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.StampIcon.Confidential">
      <summary>
            Confidential.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.StampIcon.Final">
      <summary>
            Final stamp.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.StampIcon.Sold">
      <summary>
            Sold   stamp.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.StampIcon.Departmental">
      <summary>
            Departamental.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.StampIcon.ForComment">
      <summary>
            For comment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.StampIcon.ForPublicRelease">
      <summary>
            For public release.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.StampIcon.TopSecret">
      <summary>
            Top secret.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.TextAnnotation">
      <summary>
            Represents a text annotation that is a “sticky note” attached to a point in the PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.TextAnnotation.Open">
      <summary>
            Gets or sets a flag specifying whether the annotation should initially be displayed open.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.TextAnnotation.Icon">
      <summary>
            Gets or sets an icon to be used in displaying the annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.TextAnnotation.State">
      <summary>
            Gets or sets the state to which the original annotation should be set.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.TextAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.TextAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.TextAnnotation.#ctor(Aspose.Pdf.Document)">
      <summary>
            Constructor for annotation when used in Generator.
            </summary>
      <param name="document">Document where text annotation will be created.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.TextAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new Text annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.TextIcon">
      <summary>
            Enumerates the icons to be used in displaying the annotation.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.TextIcon.Note">
      <summary>
            Note icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.TextIcon.Comment">
      <summary>
            Comment icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.TextIcon.Key">
      <summary>
            Key    icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.TextIcon.Help">
      <summary>
            Help icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.TextIcon.NewParagraph">
      <summary>
            NewParagraph icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.TextIcon.Paragraph">
      <summary>
            Paragraph icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.TextIcon.Insert">
      <summary>
            Insert icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.TextIcon.Check">
      <summary>
            Check icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.TextIcon.Cross">
      <summary>
            Cross icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.TextIcon.Circle">
      <summary>
            Circle icon.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.TextIcon.Star">
      <summary>
            Star icon.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.ExplicitDestination">
      <summary>
            Represents the base class for explicit destinations in PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.ExplicitDestination.Page">
      <summary>
            Gets the destination page object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.ExplicitDestination.PageNumber">
      <summary>
            Gets the destination page number
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.ExplicitDestination.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Annotations.ExplicitDestinationType,System.Double[])">
      <summary>
            Creates the explicit destination.
            </summary>
      <param name="page">The destination Aspose.Pdf.Page object.</param>
      <param name="type">The type of explicit destination.</param>
      <param name="values">The additional values of explicit destination type.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.ExplicitDestination.#ctor(System.Int32,Aspose.Pdf.Annotations.ExplicitDestinationType,System.Double[])">
      <summary>
            Creates the explicit destination.
            </summary>
      <param name="pageNumber">The destination page number.</param>
      <param name="type">The type of explicit destination.</param>
      <param name="values">The additional values of explicit destination type.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.ExplicitDestination.CreateDestination(Aspose.Pdf.Page,Aspose.Pdf.Annotations.ExplicitDestinationType,System.Double[])">
      <summary>
            Creates instances of ExplicitDestination descendant classes.
            </summary>
      <param name="page">The object of destination page.</param>
      <param name="type">The type of explicit destination.</param>
      <param name="values">Array of double values.</param>
      <returns>The explicit destination object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.ExplicitDestination.CreateDestination(Aspose.Pdf.Document,System.Int32,Aspose.Pdf.Annotations.ExplicitDestinationType,System.Double[])">
      <summary>
            Creates instances of ExplicitDestination descendant classes.
            </summary>
      <param name="doc">Document where destination will be created.</param>
      <param name="pageNumber">Number of the page.</param>
      <param name="type">Destionatyion type.</param>
      <param name="values">Array of destination specific values.</param>
      <returns>The explicit destination object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Annotations.ExplicitDestination.CreateDestination(System.Int32,Aspose.Pdf.Annotations.ExplicitDestinationType,System.Double[])">
      <summary>
            Creates instances of ExplicitDestination descendant classes.
            </summary>
      <param name="pageNumber">The destination page number.</param>
      <param name="type">The type of explicit destination.</param>
      <param name="values">Array of double values.</param>
      <returns>The explicit destination object.</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.IAppointment">
      <summary>
            Represents general interface for actions and destinations.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.Justification">
      <summary>
            Enumerates the forms of quadding (justification) to be used in displaying the annotation’s text.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.Justification.Left">
      <summary>
            Left justification.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.Justification.Center">
      <summary>
            Center justification.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.Justification.Right">
      <summary>
            Right justification.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.NamedAction">
      <summary>
            Represents named actions that PDF viewer applications are expected to support.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.NamedAction.Name">
      <summary>
            Gets or sets the action to be performed.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.NamedAction.#ctor(Aspose.Pdf.Annotations.PredefinedAction)">
      <summary>
            Constructor for Named Action class.
            </summary>
      <param name="action">Action for which this object is created.</param>
    </member>
    <member name="T:Aspose.Pdf.Annotations.PredefinedAction">
      <summary>
            Defines different actions which can be triggered from a PDF file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.FirstPage">
      <summary>
            A named action to go to the first page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.LastPage">
      <summary>
             A named action to go to the last page.
             </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.NextPage">
      <summary>
            A named action to go to the next page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.PrevPage">
      <summary>
            A named action to go to the previous page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.PrintDialog">
      <summary>
            A named action to open a print dialog.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.Bookmarks_ExpanCurrentBookmark">
      <summary>
            A named action to find current bookmark.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.Bookmarks_HightlightCurrentBookmark">
      <summary>
            A named action to highlight current bookmark.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.Document_AttachFile">
      <summary>
            A named action to add file attachment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.Document_CropPages">
      <summary>
            A named action to crop document pages.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.Document_DeletePages">
      <summary>
            A named action to delete document pages.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.Document_ExtractPages">
      <summary>
            A named action to exctract document pages.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.Document_InsertPages">
      <summary>
            A named action to insert pages from a document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.Document_ReplacePages">
      <summary>
            A named action to replace document pages.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.Document_RotatePages">
      <summary>
            A named action to rotate document pages.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.Edit_CheckSpelling_InComFieldEdit">
      <summary>
            A named action to check spelling in comments.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.Edit_Find">
      <summary>
            A named action to find.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.Edit_Preferences">
      <summary>
            A named action to edit preferences.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.Edit_Search">
      <summary>
            A named action for searching.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.File_AttachToEmail">
      <summary>
            A named action for attaching current pdf document into email message.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.File_Close">
      <summary>
            A named action to close the document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.File_CreatePDF_FromScanner">
      <summary>
            A named action to create pdf document from scanner.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.File_CreatePDF_FromWebPage">
      <summary>
            A named action to create pdf document from web page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.File_Exit">
      <summary>
            A named action to exit pdf reader.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.File_Organizer_OpenOrganizer">
      <summary>
            A named action to open organizer.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.File_Print">
      <summary>
            A named action to print the document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.File_Properties">
      <summary>
            A named action to open the document properties.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.File_SaveAs">
      <summary>
            A named action to save the document with another name.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.Miscellaneous_ZoomIn">
      <summary>
            A named action to zoom in the document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.Miscellaneous_ZoomOut">
      <summary>
            A named action to zoom out the document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.PageImages_PrintPages">
      <summary>
            A named action to print the document pages.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_GoTo_NextView">
      <summary>
            A named action to go to the next view.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_GoTo_Page">
      <summary>
            A named action to go to the certain page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_GoTo_PreDocument">
      <summary>
            A named action to go to the previous document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_GoTo_PreView">
      <summary>
            A named action to go to the previous view.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_NavigationPanels_Articles">
      <summary>
            A named action to show/hide articles panel.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_NavigationPanels_Attachments">
      <summary>
            A named action to show/hide attachment panel.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_NavigationPanels_Boomarks">
      <summary>
            A named action to show/hide bookmark panel.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_NavigationPanels_Comments">
      <summary>
            A named action to show/hide comments panel.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_NavigationPanels_Fields">
      <summary>
            A named action to show/hide fields panel.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_NavigationPanels_Layers">
      <summary>
            A named action to show/hide layers panel.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_NavigationPanels_ModelTree">
      <summary>
            A named action to show/hide model tree panel.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_NavigationPanels_Pages">
      <summary>
            A named action to show/hide pages panel.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_NavigationPanels_Signatures">
      <summary>
            A named action to show/hide signatures panel.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_PageDisplay_SinglePage">
      <summary>
            A named action to display single page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_PageDisplay_SinglePageContinuous">
      <summary>
            A named action to display single continious page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_PageDisplay_TwoUp">
      <summary>
            A named action to display pages as Two-Up.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_PageDisplay_TwoUpContinuous">
      <summary>
            A named action to display pages as Two-Up continious.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Toolbars_AdvanceEditing">
      <summary>
            A named action to show/hide advanced editing toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Toolbars_CommentMarkup">
      <summary>
            A named action to show/hide commenting toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Toolbars_Edit">
      <summary>
            A named action to show/hide edit toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Toolbars_File">
      <summary>
            A named action to show/hide file toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Toolbars_Find">
      <summary>
            A named action to show/hide find toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Toolbars_Forms">
      <summary>
            A named action to show/hide forms toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Toolbars_Measuring">
      <summary>
            A named action to show/hide measuring toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Toolbars_ObjectData">
      <summary>
            A named action to show/hide object data toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Toolbars_PageDisplay">
      <summary>
            A named action to show/hide page display toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Toolbars_PageNavigation">
      <summary>
            A named action to show/hide navigation toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Toolbars_PrintProduction">
      <summary>
            A named action to show/hide print production toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Toolbars_PropertiesBar">
      <summary>
            A named action to show/hide property toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Toolbars_Redaction">
      <summary>
            A named action to show/hide redaction toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Toolbars_SelectZoom">
      <summary>
            A named action to show/hide select &amp; zoom toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Toolbars_Tasks">
      <summary>
            A named action to show/hide tasks toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Toolbars_Typewriter">
      <summary>
            A named action to show/hide typewriter toolbar.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Zoom_ActualSize">
      <summary>
            A named action to view pages in actual size.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Zoom_FitHeight">
      <summary>
            A named action to fit page on height.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Zoom_FitPage">
      <summary>
            A named action to fit page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Zoom_FitVisible">
      <summary>
            A named action to fit page visibility.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Zoom_FitWidth">
      <summary>
            A named action to fit page on width.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.View_Zoom_ZoomTo">
      <summary>
            A named action to make zoom.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.PredefinedAction.Window_FullScreenMode">
      <summary>
            A named action to view the document in the full screen mode.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.XfdfReader">
      <summary>
            Class which peroformes reading of XFDF format. 
            </summary>
      <example>
        <code lang="C#">
            Document doc = new Document("example.pdf");
            Stream xfdfStream = File.OpenRead("file.xfdf");
            XfdfReader.ReadAnnotations(xfdfStream, doc);
            xfdfStream.Close();
            doc.Save("example_out.pdf");
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Annotations.XfdfReader.ReadAnnotations(System.IO.Stream,Aspose.Pdf.Document)">
      <summary>
            Import annotations from XFDF file and put them into document.
            </summary>
      <param name="stream">Source stream containing XFDF file.</param>
      <param name="document">Document where annotations will be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.XfdfReader.ReadFields(System.IO.Stream,Aspose.Pdf.Document)">
      <summary>
            Import field values from XFDF file.
            </summary>
      <param name="stream">Stream containing XFDF data.</param>
      <param name="document">Document where fields data will be imported.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.XfdfReader.GetElements(System.Xml.XmlReader)">
      <summary>
            Parses XFDF file and returns information as hashtable.
            </summary>
      <param name="reader">XmlReader for the source file.</param>
      <returns>Hashtable with information parsed from XFDF file.</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.ExplicitDestinationType">
      <summary>
            Enumerates the types of explicit destinations.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.ExplicitDestinationType.XYZ">
      <summary>
            Display the page with the coordinates (left, top) positioned at the upper-left corner of the window
            and the contents of the page magnified by the factor zoom. A null value for any of the parameters
            left, top, or zoom specifies that the current value of that parameter is to be retained unchanged. 
            A zoom value of 0 has the same meaning as a null value.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.ExplicitDestinationType.Fit">
      <summary>
            Display the page with its contents magnified just enough to fit the entire page within the window
            both horizontally and vertically. If the required horizontal and vertical magnification factors are
            different, use the smaller of the two, centering the page within the window in the other dimension.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.ExplicitDestinationType.FitH">
      <summary>
            Display the page with the vertical coordinate top positioned at the top edge of the window and
            the contents of the page magnified just enough to fit the entire width of the page within the window.
            A null value for top specifies that the current value of that parameter is to be retained unchanged.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.ExplicitDestinationType.FitV">
      <summary>
            Display the page with the horizontal coordinate left positioned at the left edge of the window
            and the contents of the page magnified just enough to fit the entire height of the page within the window.
            A null value for left specifies that the current value of that parameter is to be retained unchanged.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.ExplicitDestinationType.FitR">
      <summary>
            Display the page with its contents magnified just enough to fit the rectangle specified by the
            coordinates left, bottom, right, and topentirely within the window both horizontally and vertically.
            If the required horizontal and vertical magnification factors are different, use the smaller of
            the two, centering the rectangle within the window in the other dimension. A null value for any
            of the parameters may result in unpredictable behavior.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.ExplicitDestinationType.FitB">
      <summary>
            Display the page with its contents magnified just enough to fit its bounding box entirely within
            the window both horizontally and vertically. If the required horizontal and vertical magnification
            factors are different, use the smaller of the two, centering the bounding box within the window
            in the other dimension.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.ExplicitDestinationType.FitBH">
      <summary>
            Display the page with the vertical coordinate top positioned at the top edge of the window and the
            contents of the page magnified just enough to fit the entire width of its bounding box within the window.
            A null value for top specifies that the current value of that parameter is to be retained unchanged.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.ExplicitDestinationType.FitBV">
      <summary>
            Display the page with the horizontal coordinate left positioned at the left edge of the window and the
            contents of the page magnified just enough to fit the entire height of its bounding box within the window.
            A null value for left specifies that the current value of that parameter is to be retained unchanged.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.NamedDestination">
      <summary>
            Instead of being defined directly with the explicit syntax, a destination may be referred to indirectly by means of a name object or a byte string.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.NamedDestination.Name">
      <summary>
            Gets the name of named destination.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.NamedDestination.#ctor(Aspose.Pdf.Document,System.String)">
      <summary>
            Create named destination.
            </summary>
      <param name="doc">Document where named destination should be created.</param>
      <param name="name">Name to which destination refers.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.NamedDestination.ToString">
      <summary>
            Converts destination to string value.
            </summary>
      <returns>String value.</returns>
    </member>
    <member name="T:Aspose.Pdf.Annotations.ScreenAnnotation">
      <summary>
            A screen annotation that specifies a region of a page upon which media clips may be played.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Annotations.ScreenAnnotation.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle,System.String)">
      <summary>
            Creates new Screen annotation on the specified page.
            </summary>
      <param name="page">The document's page where annotation should be created.</param>
      <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
      <param name="mediaFile">The path to multimedia file.</param>
    </member>
    <member name="M:Aspose.Pdf.Annotations.ScreenAnnotation.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts visitor object to process the annotation.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="P:Aspose.Pdf.Annotations.ScreenAnnotation.Title">
      <summary>
            Gets or sets the title of the screen annotation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.ScreenAnnotation.Action">
      <summary>
            Gets or sets an action to be performed when the annotation is activated.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Annotations.ScreenAnnotation.AnnotationType">
      <summary>
            Gets type of annotation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.RenditionAction">
      <summary>
            A rendition action that controls the playing of multimedia content.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Annotations.LaunchActionOperation">
      <summary>
            Enumerates the operations to perform with document during launch action executing.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LaunchActionOperation.Undefined">
      <summary>
            Undefined state.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LaunchActionOperation.Open">
      <summary>
            Open a document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Annotations.LaunchActionOperation.Print">
      <summary>
            Print a document.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PsLoadOptions">
      <summary>
            Represents options for loading/importing of .mht-file into pdf document.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Opi">
      <summary>
            Represents The Open Prepress Interface (OPI) is a mechanism for creating low-resolution placeholders, or proxies,
            for such high-resolution images.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Opi.#ctor(Aspose.Pdf.XForm)">
      <summary>
            The constructor.
            </summary>
      <param name="xform">Xform object.</param>
    </member>
    <member name="P:Aspose.Pdf.Opi.Version">
      <summary>
            Gets the version of OPI to which this dictionary refers.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Opi.FileSpecification">
      <summary>
            Gets the external file containing the low- resolution proxy image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Opi.Position">
      <summary>
            Gets an array of eight numbers of the form specifying the location on the page of the cropped image.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.DocMDPAccessPermissions">
      <summary>
            The access permissions granted for this document.
            Valid values are:
            1 - No changes to the document are permitted; any change to the document invalidates the signature.
            2 - Permitted changes are filling in forms, instantiating page templates, and signing; other changes invalidate the signature.
            3 - Permitted changes are the same as for 2, as well as annotation creation, deletion, and modification; other changes invalidate the signature.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.DocMDPAccessPermissions.NoChanges">
      <summary>
            1 - No changes to the document are permitted; any change to the document invalidates the signature.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.DocMDPAccessPermissions.FillingInForms">
      <summary>
            2 - Permitted changes are filling in forms, instantiating page templates, and signing; other changes invalidate the signature.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.DocMDPAccessPermissions.AnnotationModification">
      <summary>
            3 - Permitted changes are the same as for 2, as well as annotation creation, deletion, and modification; other changes invalidate the signature.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.DocMDPSignature">
      <summary>
            Represents the class of document MDP (modification detection and prevention) signature type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.DocMDPSignature.AccessPermissions">
      <summary>
            Returns the access permissions granted for this document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.DocMDPSignature.#ctor(Aspose.Pdf.Forms.Signature,Aspose.Pdf.Forms.DocMDPAccessPermissions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Forms.DocMDPSignature" /> class.
            </summary>
      <param name="signature">The signature object that used during signing.</param>
      <param name="accessPermissions">The access permissions granted for this document.</param>
    </member>
    <member name="T:Aspose.Pdf.Forms.FormType">
      <summary>
            Enumeration of posible types of Acro Form.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.FormType.Standard">
      <summary>
            Standard AcroForm.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.FormType.Static">
      <summary>
            Static XFA form.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.FormType.Dynamic">
      <summary>
            Dynamic XFA form.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.XFA">
      <summary>
            Represents XML form regarding XML Forms Architecture (XFA).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.XFA.Template">
      <summary>
            XFA Template component of an XFA form.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.XFA.Form">
      <summary>
            XFA Form Component of an XFA form. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.XFA.Datasets">
      <summary>
            XFA Datasets component of an XFA form.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.XFA.Config">
      <summary>
            XFA Config component of an XFA form.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.XFA.XDP">
      <summary>
            XML Data Package (all XFA form components within a surrounding XML container).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.XFA.Item(System.String)">
      <summary>
            Gets of sets data node value according <paramref name="path" />.
            </summary>
      <param name="path">
            Data node path, e.g. form1[0].Subform1[0].Subform2[0].Subform3[0].TextField[0]. 
            Be sure to include indices even if data contains only single occurences of each nodes, 
            i.e. write node1[0].node2[0]... instead of node1.node2...
            </param>
      <returns>Data node value.</returns>
    </member>
    <member name="P:Aspose.Pdf.Forms.XFA.FieldNames">
      <summary>
            List of field names in the form template.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.XFA.GetFieldTemplate(System.String)">
      <summary>
            Returns XML node of XFA field tempalte. 
            </summary>
      <param name="fieldName">Path of the field which template must be found.</param>
      <returns>XL node with field template.</returns>
    </member>
    <member name="M:Aspose.Pdf.Forms.XFA.GetFieldTemplates">
      <summary>
            Returns list of all field templates on XFA form.
            </summary>
      <returns>List of field templates.</returns>
    </member>
    <member name="P:Aspose.Pdf.Forms.XFA.NamespaceManager">
      <summary>
            Gets the namespace for the XFA form. The following namepsaces are defined: "data" for form data and "tpl" for form template. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.XFA.SetFieldImage(System.String,System.IO.Stream)">
      <summary>
            Sets image for XFA field. 
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="image">Stream which contains image.</param>
    </member>
    <member name="T:Aspose.Pdf.Forms.BarcodeField">
      <summary>
            Class represents barcode field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.BarcodeField.Resolution">
      <summary>
            Gets the resolution, in dots-per-inch (dpi), at which the barcode object is rendered.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.BarcodeField.Caption">
      <summary>
            Gets the caption of the barcode object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.BarcodeField.Symbology">
      <summary>
            Specifies which barcode or glyph technology is to be used on this annotation,
            see <see cref="P:Aspose.Pdf.Forms.BarcodeField.Symbology" /> for details.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.BarcodeField.XSymWidth">
      <summary>
            Gets The horizontal distance, in pixels, between two barcode modules.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.BarcodeField.XSymHeight">
      <summary>
            Gets the the vertical distance between two barcode modules, measured in pixels. 
            The ratio XSymHeight/XSymWidth shall be an integer value. 
            For PDF417, the acceptable ratio range is from 1 to 4. For QRCode and DataMatrix, 
            this ratio shall always be 1
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.BarcodeField.ECC">
      <summary>
            Gets an integer value representing the error correction coefficient. 
            For PDF417, shall be from 0 to 8. For QRCode, shall be from 0 to 3 
            (0 for ‘L’, 1 for ‘M’, 2 for ‘Q’, and 3 for ‘H’).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.BarcodeField.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Forms.BarcodeField" /> class.
            </summary>
      <param name="page">
            The page where to place new barcode.
            </param>
      <param name="rect">
            Barcode sizes given in rectangle.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Forms.BarcodeField.#ctor(Aspose.Pdf.Document,Aspose.Pdf.Rectangle)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Forms.BarcodeField" /> class.
            </summary>
      <param name="doc">Document where field will be created.</param>
      <param name="rect">Rectangle where field will be placed on the page.</param>
    </member>
    <member name="F:Aspose.Pdf.Forms.BoxStyle.Circle">
      <summary>
            Circle style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.BoxStyle.Check">
      <summary>
            Check style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.BoxStyle.Cross">
      <summary>
            Cross style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.BoxStyle.Diamond">
      <summary>
            Diamond style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.BoxStyle.Square">
      <summary>
            Square style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.BoxStyle.Star">
      <summary>
            Star style.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.ButtonField">
      <summary>
            Class represnets push button field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.ButtonField.NormalCaption">
      <summary>
            Gets or sets normal caption.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.ButtonField.RolloverCaption">
      <summary>
            Gets or sets rollover caption of button which shall be displayed when the user rolls the cursor 
            into its active area without pressing the mouse button.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.ButtonField.AlternateCaption">
      <summary>
            Gets or sets alternate caption of the button which shall be displayed 
            when the mouse button is pressed within its active area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.ButtonField.NormalIcon">
      <summary>
            Gets or sets normal icon of the button which shall be displayed when it is not interacting with the user.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.ButtonField.RolloverIcon">
      <summary>
            Gets or sets rollover icon of the button which shall be displayed when the user 
            rolls the cursor into its active area without pressing the mouse button.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.ButtonField.AlternateIcon">
      <summary>
            Gets or sets alternate icon which shall be displayed when the mouse button is pressed within its active area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.ButtonField.IconFit">
      <summary>
            Gets icon fit object specifying how the widget annotation's icon shall be displayed within its annotation rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.ButtonField.ICPosition">
      <summary>
            Gets or sets icon caption position.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.ButtonField.#ctor">
      <summary>
            Button field constructor for Generator. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.ButtonField.AddImage(System.Drawing.Image)">
      <summary>
            Adds image into the field resources an draws it.
            </summary>
      <param name="image">
            Image ot add into text field.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Forms.ButtonField.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            ButtonField constructor.
            </summary>
      <param name="page">Page where button will be placed.</param>
      <param name="rect">Rectangle where button is placed on the page.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.ButtonField.#ctor(Aspose.Pdf.Document,Aspose.Pdf.Rectangle)">
      <summary>
            ButtonField constructore. 
            </summary>
      <param name="doc">Docuemtn where new field will be created.</param>
      <param name="rect">Rectangle hwere button is placed on the page. </param>
    </member>
    <member name="T:Aspose.Pdf.Forms.CheckboxField">
      <summary>
            Class representing checkbox field
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.CheckboxField.AllowedStates">
      <summary>
            Returns list of allowed states. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.Pdf.Forms.CheckboxField.Style">
      <summary>
            Gets or sets style of check box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.CheckboxField.ActiveState">
      <summary>
            Gets or sets current annotation appearance state.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.CheckboxField.Checked">
      <summary>
            Gets or sets state of check box.  
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.CheckboxField.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor for CheckboxField class.
            </summary>
      <param name="page">Page where check box will be placed.</param>
      <param name="rect">Position and size of the check box.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.CheckboxField.#ctor(Aspose.Pdf.Document,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor for CheckboxField class.
            </summary>
      <param name="doc">Document where will be new field created.</param>
      <param name="rect">Rectangle where new field will be created.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.CheckboxField.#ctor">
      <summary>
            Create instance of CheckboxField.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.CheckboxField.#ctor(Aspose.Pdf.Document)">
      <summary>
            Constructor to use with Generator.
            </summary>
      <param name="doc">Document where field will be created.</param>
    </member>
    <member name="P:Aspose.Pdf.Forms.CheckboxField.Value">
      <summary>
            Gets or sets value of check box field.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.ChoiceField">
      <summary>
            Represents base class for choice fields.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.ChoiceField.CommitImmediately">
      <summary>
            Gets or sets commit on selection change flag.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.ChoiceField.MultiSelect">
      <summary>
            Gets or sets multiselection flag.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.ChoiceField.Selected">
      <summary>
            Gets or sets index of selected option. This property allows to change selection. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.ChoiceField.SelectedItems">
      <summary>
            Gets or sets array of selected items. For multiselect list array contains more then one item. For single selection list it contains single item.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.ChoiceField.Options">
      <summary>
            Gets collection of choice options.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.ChoiceField.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor for ChoiceField.
            </summary>
      <param name="page">Page where field is situated.</param>
      <param name="rect">Rectangle of the field.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.ChoiceField.#ctor(Aspose.Pdf.Document)">
      <summary>
            Creates choice field (for Generator)
            </summary>
      <param name="doc">Document where choice field will be created.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.ChoiceField.#ctor(Aspose.Pdf.Document,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor for ChoiceField.
            </summary>
      <param name="doc">Document where field will be created. </param>
      <param name="rect">Rectangle of the field. </param>
    </member>
    <member name="M:Aspose.Pdf.Forms.ChoiceField.AddOption(System.String)">
      <summary>
            Adds new option with specified name. 
            </summary>
      <param name="optionName">Name of the new option.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.ChoiceField.AddOption(System.String,System.String)">
      <summary>
            Adds new option with specified export value and name.
            </summary>
      <param name="export">Export value.</param>
      <param name="name">Name of the new option.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.ChoiceField.DeleteOption(System.String)">
      <summary>
            Deletes option by its name.
            </summary>
      <param name="optionName">Name of the option which must be deleted.</param>
    </member>
    <member name="P:Aspose.Pdf.Forms.ChoiceField.Value">
      <summary>
            Gets or sets value of the field.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.ComboBoxField">
      <summary>
            Class representing Combobox field of the form.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.ComboBoxField.Editable">
      <summary>
            Gets or sets editable status of the field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.ComboBoxField.SpellCheck">
      <summary>
            Gets or sets spellchaeck activiity status.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.ComboBoxField.#ctor">
      <summary>
            Constructor for ComboBoxField to be used in Generator. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.ComboBoxField.#ctor(Aspose.Pdf.Document)">
      <summary>
            Creates CombBox field to work with Generator.
            </summary>
      <param name="doc">Document where field will be created.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.ComboBoxField.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor for Combobox Field. 
            </summary>
      <param name="page">Page where field will be placed. </param>
      <param name="rect">Rectangle which defines size and position of the field on the page.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.ComboBoxField.#ctor(Aspose.Pdf.Document,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor for Combobox field. 
            </summary>
      <param name="doc">Document where field should be created.</param>
      <param name="rect">Rectangle which defines size and position of the field. </param>
    </member>
    <member name="T:Aspose.Pdf.Forms.NamespaceDoc">
      <summary>
            The <b>Aspose.Pdf.Forms</b> namespace has classes which describes forms (standard, static, dynamic) and various types of fields like text box, list box, radio button etc.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.Field">
      <summary>
            Base class for acro form fields.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.Field.IsEqualTo(System.String)">
      <summary>
            Operator for comparision field value with given value.
            </summary>
      <param name="value">Value to check the field value on.</param>
      <returns>True if field value and passed value are equals.</returns>
    </member>
    <member name="M:Aspose.Pdf.Forms.Field.GetConformXFAValue(System.String)">
      <summary>
            Returns value correctly encoded for placing into XFA dataset.
            </summary>
      <param name="value">Value for placing into XFA form.</param>
      <returns>Encoded value.</returns>
    </member>
    <member name="P:Aspose.Pdf.Forms.Field.PartialName">
      <summary>
            Gets or sets partial name of the field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Field.AlternateName">
      <summary>
            Gets or sets alternate name of the field (An alternate field 
            name that shall be used in place of the actual field name 
            wherever the field shall be identified in the user interface).
            Alternate name is used as field tooltip in Adobe Acrobat.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Field.MappingName">
      <summary>
            Gets or sets mapping name  of the field that shall be used when exporting interactive form field data from the document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.Field.Recalculate">
      <summary>
            Recaculates all calculated fields on the form. 
            </summary>
      <returns>true if field value was changed during recalculation.</returns>
    </member>
    <member name="P:Aspose.Pdf.Forms.Field.Value">
      <summary>
            Gets or sets value of the field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Field.IsSynchronized">
      <summary>
            Returns true if dictionary is synchronized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Field.Count">
      <summary>
            Gets or sets number of subfields in this field. (For example number of items in radio button field).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Field.SyncRoot">
      <summary>
            Synchronization object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Field.IsGroup">
      <summary>
            Gets or sets boolean value which indicates is this field non-terminal field i.e. group of fields.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.Field.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies subfields of this field into array starting from specified index.
            </summary>
      <param name="array">Array where field must be copied.</param>
      <param name="index">Starting index where fields will be copied.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.Field.GetEnumerator">
      <summary>
            Returns enumerator of contained fields.
            </summary>
      <returns>Enumerator.</returns>
    </member>
    <member name="M:Aspose.Pdf.Forms.Field.#ctor(Aspose.Pdf.Document)">
      <summary>
            Creates field for use in Generator.
            </summary>
      <param name="doc">Document where field will be created.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.Field.Flatten">
      <summary>
            Removes this field and place its value directly on the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Field.Item(System.String)">
      <summary>
            Gets subfield contained in this field by name of the subfield.
            </summary>
      <param name="name">Contained subfield name.</param>
      <returns>Field instance.</returns>
    </member>
    <member name="P:Aspose.Pdf.Forms.Field.Item(System.Int32)">
      <summary>
            Gets subfield contained in this field by index.
            </summary>
      <param name="index">Index of the reuqested subfield.</param>
      <returns>Field instance.</returns>
    </member>
    <member name="M:Aspose.Pdf.Forms.Field.SetPosition(Aspose.Pdf.Point)">
      <summary>
            Set position of the field.
            </summary>
      <param name="point">Point where field should be positioned.</param>
    </member>
    <member name="P:Aspose.Pdf.Forms.Field.AnnotationIndex">
      <summary>
            Gets or sets index of this anotation on the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Field.PageIndex">
      <summary>
            Gets index of page which contains this field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Field.Rect">
      <summary>
            Gets or sets the field rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Field.IsSharedField">
      <summary>
            Property for Generator support. Used when field is added to header or footer. If true, this field will created once and it's appearance will be visible on all pages of the document. If false, separated field will be created for every document page. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Field.FitIntoRectangle">
      <summary>
            If true then font size will reduced to fit text to specified rectangle. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Field.MaxFontSize">
      <summary>
            Maximail font size which can be used for field contents. -1 to don't check size. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Field.TabOrder">
      <summary>
            Gets or sets tab order of the field.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.FileSelectBoxField">
      <summary>
            Field for file select box element.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.Form">
      <summary>
            Class representing form object.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.Form.FlattenSettings">
      <summary>
            Class which describes settings for Form flattening procedure.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Form.FlattenSettings.UpdateAppearances">
      <summary>
            If set, all field appearances will be regenerated before flattening. This option may help if field is incorrectly flattened.
            This option may decrease performance. By default set to false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Form.FlattenSettings.CallEvents">
      <summary>
            If set, formatting and other JavaScript events will be called. True by default.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Form.IsSynchronized">
      <summary>
            Returns true if object is thread-safe.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Form.SyncRoot">
      <summary>
            Returns synchronization object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Form.Count">
      <summary>
            Gets number of the fields on this form.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Form.DefaultResources">
      <summary>
            Gets default resources placed on this form.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Form.DefaultAppearance">
      <summary>
            Gets or sets default appearance of the form (object which describes default font, text size and color for fields on the form).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Form.XFA">
      <summary>
            Gets XFA data of the form (if presents).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.Form.SignDependentElementsRenderingModes">
      <summary>
              Forms can contain signing information and can be signed or unsigned.
              Sometimes view of forms in viewer must depend on whether form is signed or not.
              This enum enumerates possible rendering modes during convertion of form type in regard to sign. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.Form.SignDependentElementsRenderingModeWhenConverted">
      <summary>
              Forms can contain signing information, i.e. can be signed or unsigned.
              And form's view sometimes must depend on whether form is signed or not.
              This property tells to form's converter (f.e. during conversion XFA form to Standard form)
              whether result form must be rendered as signed or as unsigned.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Form.IgnoreNeedsRendering">
      <summary>
            If this property is true the value of NeedsRendering key will be ignored during conversion 
            XFA form to Standard form. It is false by default.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Form.RemovePermission">
      <summary>
            If this property is true the "Perms" dictionary will be removed from the pdf document after conversion 
            dynamic documents to standard. The "Perms" dictionary can contain a rules that disturb displaying selection of 
            mandatory fields in Adobe Acrobat reader.
            It is false by default.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Form.EmulateRequierdGroups">
      <summary>
            If this property is true then additional red boundary rectangles will be drawn for required Xfa exclGroup elements containers
            This property was introduced because absences of analogues for the exclGroup during conversion Xfa representation of forms 
            to standard.
            It is false by default.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Form.Type">
      <summary>
            Gets type of the form. Possible values are: Standard, Static, Dynamic.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.Form.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies fields placed on the form into array.
            </summary>
      <param name="array">Array where fields must be placed.</param>
      <param name="index">Starting index.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.Form.GetEnumerator">
      <summary>
            Gets enumeration of form fields.
            </summary>
      <returns>Field enumerator.</returns>
    </member>
    <member name="M:Aspose.Pdf.Forms.Form.Add(Aspose.Pdf.Forms.Field,System.Int32)">
      <summary>
            Adds field on the form.
            </summary>
      <param name="field">Field which must be added.</param>
      <param name="pageNumber">Page index where added field will be placed.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.Form.Add(Aspose.Pdf.Forms.Field)">
      <summary>
            Adds field on the form.
            </summary>
      <param name="field">Field which must be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.Form.Delete(Aspose.Pdf.Forms.Field)">
      <summary>
            Delete field from the form.
            </summary>
      <param name="field">Field which must be deleted.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.Form.Delete(System.String)">
      <summary>
            Deletes field from the form by its name.
            </summary>
      <param name="fieldName">Name of the filed which must be deleted.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.Form.Flatten">
      <summary>
            Removes all form fields and place their values directly on the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Form.Item(System.String)">
      <summary>
            Gets field of the form by field name. Throws excpetion if the field was not found.
            </summary>
      <param name="name">Name of the field.</param>
      <returns>Retreived field.</returns>
    </member>
    <member name="P:Aspose.Pdf.Forms.Form.Item(System.Int32)">
      <summary>
            Gets field of the form by field index.
            </summary>
      <param name="index">Index of the field.</param>
      <returns>Retreived field.</returns>
    </member>
    <member name="M:Aspose.Pdf.Forms.Form.Add(Aspose.Pdf.Forms.Field,System.String,System.Int32)">
      <summary>
            Adds new field to the form; If this field is already placed on other or this form, the copy of field is created. 
            </summary>
      <param name="field">Field name.</param>
      <param name="partialName">Name of field on the form.</param>
      <param name="pageNumber">Page number where field will be added.</param>
      <returns>Added field returned. If copy of the field was created it will be returned.</returns>
    </member>
    <member name="M:Aspose.Pdf.Forms.Form.AddFieldAppearance(Aspose.Pdf.Forms.Field,System.Int32,Aspose.Pdf.Rectangle)">
      <summary>
            Adds additional appearance of the field to specified page of the document in the specified location. 
            </summary>
      <param name="field">Field which appearance should be added on form.</param>
      <param name="pageNumber">Number of the page where field must be placed.</param>
      <param name="rect">Rectangle where field will be placed.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.Form.AssignXfa(System.Xml.XmlDocument)">
      <summary>
            Sets XFA of the form to specified value.
            </summary>
      <param name="xml">Xml document which concains new XFA data.</param>
    </member>
    <member name="P:Aspose.Pdf.Forms.Form.Fields">
      <summary>
            Gets list of all fields in lowest level of hierarhical form.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.Form.GetFieldsInRect(Aspose.Pdf.Rectangle)">
      <summary>
            Returns fields inside of specified rectangle.
            </summary>
      <param name="rect">Rectangle where fields should be found.</param>
      <returns>Array with found fields.</returns>
    </member>
    <member name="P:Aspose.Pdf.Forms.Form.CalculatedFields">
      <summary>
            Allows to set order of field calculation. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.IconCaptionPosition">
      <summary>
            Describes position of icon. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.IconCaptionPosition.NoIcon">
      <summary>
            Icon is not displayed.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.IconCaptionPosition.NoCaption">
      <summary>
            Caption is not displayed.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.IconCaptionPosition.CaptionBelowIcon">
      <summary>
            Caption is below icon. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.IconCaptionPosition.CaptionAboveIcon">
      <summary>
            Caption is above icon. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.IconCaptionPosition.CaptionToTheRight">
      <summary>
            Caption to the right.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.IconCaptionPosition.CaptionToTheLeft">
      <summary>
            Caption to the left.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.IconCaptionPosition.CaptionOverlaid">
      <summary>
            Caption over laid. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.IconFit">
      <summary>
            Describes how the widget annotation's icon shall be displayed within its annotation rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.IconFit.ScalingReason">
      <summary>
            Gets or sets scaling reason. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.IconFit.ScalingMode">
      <summary>
            The type of scaling that shall be used.        /// </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.IconFit.LeftoverLeft">
      <summary>
            Gets or sets space to allocate at the left of the icon.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.IconFit.LeftoverBottom">
      <summary>
            Gets or sets space to allocate at the bottom of the icon.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.IconFit.SpreadOnBorder">
      <summary>
            If true, indicates that the button appearance shall be scaled to fit fully within the bounds of the annotation without taking into consideration the line width of the border.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.IconFit.NameToScalingReason(System.String)">
      <summary>
            Converts name of scaling reason into ScalingReason object. 
            </summary>
      <param name="reason">Name of scaling reason. </param>
      <returns>Scaling reason object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Forms.IconFit.ScalingReasonToName(Aspose.Pdf.Forms.ScalingReason)">
      <summary>
            Converts scaling reason obejct to name. 
            </summary>
      <param name="reason">Scaling reason object to be converted.</param>
      <returns>Name of scaling reasong.</returns>
    </member>
    <member name="M:Aspose.Pdf.Forms.IconFit.NameToScalingMode(System.String)">
      <summary>
            Converts scaling mode name into ScalingMode object.
            </summary>
      <param name="mode">Scaling mode name.</param>
      <returns>Scaling mode object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Forms.IconFit.ScalingModeToName(Aspose.Pdf.Forms.ScalingMode)">
      <summary>
            Converts scaling mode object into name.
            </summary>
      <param name="mode">Scaling mode object.</param>
      <returns>Scaling mode name.</returns>
    </member>
    <member name="T:Aspose.Pdf.Forms.ListBoxField">
      <summary>
            Class represents ListBox field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.ListBoxField.TopIndex">
      <summary>
            Gets or sets index of the top visible element of the list.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.ListBoxField.Selected">
      <summary>
            Gets or sets index of the selected item. Items are numbered from 1.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.ListBoxField.#ctor">
      <summary>
            Constructor for ListBoxField to be used in Generator.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.ListBoxField.SelectedItems">
      <summary>
            Gets or sets array of the selected items in the multiselect list. For single-select list returns array with single item.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.ListBoxField.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates new ListBox field.
            </summary>
      <param name="page">Page where list box will be placed.</param>
      <param name="rect">Rectangle where list box will be placed on the page.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.ListBoxField.#ctor(Aspose.Pdf.Document,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor for ListBox field.
            </summary>
      <param name="doc">Document to which this field will belong.</param>
      <param name="rect">Rectangle where list box will be placed. </param>
    </member>
    <member name="T:Aspose.Pdf.Forms.Option">
      <summary>
            Class represents option of choice field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Option.Value">
      <summary>
            Gets or sets option export value.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Option.Name">
      <summary>
            Gets or sets name of option.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Option.Selected">
      <summary>
            Gets or sets selected status of option. Returns true if option is selected.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Option.Index">
      <summary>
            Gets index of the option. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.OptionCollection">
      <summary>
            Class representing collection of options of the choice field. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.OptionCollection.IsSynchronized">
      <summary>
            Returns true of object is synchronized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.OptionCollection.SyncRoot">
      <summary>
            Synchronization object of the collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.OptionCollection.Count">
      <summary>
            Gets number of options.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.OptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies options into array.
            </summary>
      <param name="array">Array where options wil lbe copied.</param>
      <param name="index">Startign index in array.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.OptionCollection.GetEnumerator">
      <summary>
            Returns enumerator for options in collection.
            </summary>
      <returns>Options enumerator.</returns>
    </member>
    <member name="M:Aspose.Pdf.Forms.OptionCollection.get(System.Int32)">
      <summary>
            Gets option by index.
            </summary>
      <param name="index">Option index. Index should be in range [1..n] where n is options count.</param>
      <returns>Retreived option.</returns>
    </member>
    <member name="M:Aspose.Pdf.Forms.OptionCollection.get(System.String)">
      <summary>
            Gets option from colleciton by option name.
            </summary>
      <param name="name">Option name.</param>
      <returns>Retreived option.</returns>
    </member>
    <member name="P:Aspose.Pdf.Forms.OptionCollection.Item(System.Int32)">
      <summary>
            Gets option by index.
            </summary>
      <param name="index">Index of the option.</param>
      <returns>Option on the specified index.</returns>
    </member>
    <member name="P:Aspose.Pdf.Forms.OptionCollection.Item(System.String)">
      <summary>
            Gets option by its name.
            </summary>
      <param name="name">Name of the option.</param>
      <returns>Found option.</returns>
    </member>
    <member name="T:Aspose.Pdf.Forms.PasswordBoxField">
      <summary>
            Class descibes text field for entering password.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.PKCS1">
      <summary>
            Represents signature object regarding PKCS#1 standard.
            RSA encryption algorithm and SHA-1 digest method are used for signing.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.PKCS1.#ctor(System.IO.Stream)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS1" /> class.
            </summary>
      <param name="image">
            This image will define signature appearance on the page.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Forms.PKCS1.#ctor">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS1" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.PKCS1.#ctor(System.String,System.String)">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS1" /> class.
            </summary>
      <param name="pfx">
            Pfx file which contains certificate for signing.
            </param>
      <param name="password">
            Password for certificate.
            </param>
            Password to get access to the private key in the certificate.
        </member>
    <member name="M:Aspose.Pdf.Forms.PKCS1.#ctor(System.IO.Stream,System.String)">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS1" /> class.
            </summary>
      <param name="pfx">
            Stream with certificate data organized as pfx.
            </param>
      <param name="password">
            Password to get access to the private key in the certificate.
            </param>
    </member>
    <member name="T:Aspose.Pdf.Forms.PKCS7">
      <summary>
            Represents the PKCS#7 object that conform to the PKCS#7 specification in Internet RFC 2315, 
            PKCS #7: Cryptographic Message Syntax, Version 1.5.
            The SHA1 digest of the document's byte range is encapsulated in the PKCS#7 SignedData field.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.PKCS7.#ctor">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS7" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.PKCS7.#ctor(System.String,System.String)">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS7" /> class.
            </summary>
      <param name="pfx">
            Pfx file which contains certificate for signing.
            </param>
      <param name="password">
            Password for certificate.
            </param>
            Password to get access to the private key in the certificate.
        </member>
    <member name="M:Aspose.Pdf.Forms.PKCS7.#ctor(System.IO.Stream,System.String)">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS7" /> class.
            </summary>
      <param name="pfx">
            Stream with certificate data organized as pfx.
            </param>
      <param name="password">
            Password to get access to the private key in the certificate.
            </param>
    </member>
    <member name="T:Aspose.Pdf.Forms.PKCS7Detached">
      <summary>
            Represents the PKCS#7 object that conform to the PKCS#7 specification in Internet RFC 2315, 
            PKCS #7: Cryptographic Message Syntax, Version 1.5.
            The original signed message digest over the document's byte range is incorporated as the normal PKCS#7 SignedData field. 
            No data shall is encapsulated in the PKCS#7 SignedData field.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.PKCS7Detached.#ctor(System.IO.Stream)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS7Detached" /> class.
            </summary>
      <param name="image">
            This image will define signature appearance on the page.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Forms.PKCS7Detached.#ctor">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS7Detached" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.PKCS7Detached.#ctor(System.String,System.String)">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS7Detached" /> class.
            </summary>
      <param name="pfx">
            Pfx file which contains certificate for signing.
            </param>
      <param name="password">
            Password to get access to the private key in the certificate.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Forms.PKCS7Detached.#ctor(System.IO.Stream,System.String)">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS7Detached" /> class.
            </summary>
      <param name="pfx">
            Stream with certificate data organized as pfx.
            </param>
      <param name="password">
            Password to get access to the private key in the certificate.
            </param>
    </member>
    <member name="T:Aspose.Pdf.Forms.RadioButtonField">
      <summary>
            Class representing radio button field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.RadioButtonField.Style">
      <summary>
            Style of field box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.RadioButtonField.Selected">
      <summary>
            Gets or sets index of selected item. Numbering of items is started from 1.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.RadioButtonField.Options">
      <summary>
            Gets collection of options of the radio button.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.RadioButtonField.#ctor(Aspose.Pdf.Page)">
      <summary>
            Constructor for RadiouttonField
            </summary>
      <param name="page">Page where radio button will be placed.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.RadioButtonField.#ctor(Aspose.Pdf.Document)">
      <summary>
            Constructor for RadioButtonField.
            </summary>
      <param name="doc">Document where radio button will be created.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.RadioButtonField.Add(Aspose.Pdf.Forms.RadioButtonOptionField)">
      <summary>
            Adds new option field to RadioButton field
            </summary>
      <param name="newItem">Item which should be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.RadioButtonField.AddOption(System.String,Aspose.Pdf.Rectangle)">
      <summary>
            Add  to radio button option with specifed rectangle. 
            </summary>
      <param name="optionName">Name of new option.</param>
      <param name="rect">New item rectangle.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.RadioButtonField.AddOption(System.String)">
      <summary>
            Add option to radion button. 
            </summary>
      <param name="optionName">Name of the option which will be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.RadioButtonField.SetPosition(Aspose.Pdf.Point)">
      <summary>
            Move all subitems of radio button to specified positins on the page. 
            </summary>
      <param name="point">Sets position of RadioButton field annotations.</param>
    </member>
    <member name="P:Aspose.Pdf.Forms.RadioButtonField.PageIndex">
      <summary>
            Gets index of page which contains this RadioButton field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.RadioButtonField.Value">
      <summary>
            Gets or sets value of field.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.RadioButtonOptionField">
      <summary>
            Class represents item of RadioButton field.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.RadioButtonOptionField.#ctor">
      <summary>
            Create new RadioButtonOptionField instance.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.RadioButtonOptionField.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Creates radiobutton in the specified recangle on specified page. 
            </summary>
      <param name="page">Page where RadioButton will be placed;</param>
      <param name="rect">Recangle of RadioButton.</param>
    </member>
    <member name="P:Aspose.Pdf.Forms.RadioButtonOptionField.OptionName">
      <summary>
            Gets or sets name of the option.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.RadioButtonOptionField.Caption">
      <summary>
            Gets or sets caption.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.RadioButtonOptionField.Style">
      <summary>
            Gets or sets style of check box.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.RichTextBoxField">
      <summary>
            Class describes rich text editor component.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.RichTextBoxField.Style">
      <summary>
            Gets or sets default style string of the rich text field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.RichTextBoxField.RichTextValue">
      <summary>
            Gets or sets rich text value.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.RichTextBoxField.FormattedValue">
      <summary>
            Gets or sets formatted rich text value with markup.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.RichTextBoxField.Value">
      <summary>
            Value of RichTextField.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.RichTextBoxField.Justify">
      <summary>
            Gets or sets justification of the rich text box.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.RichTextBoxField.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor for Rich Text Box  field. 
            </summary>
      <param name="page">Page where field will be placed.</param>
      <param name="rect">Position of the field on the page.</param>
    </member>
    <member name="T:Aspose.Pdf.Forms.ScalingMode">
      <summary>
            The type of scaling that shall be used.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.ScalingMode.Proportional">
      <summary>
            Scale the icon to fit the width or height of the annotation rectangle while maintaining the icon’s original aspect ratio.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.ScalingMode.Anamorphic">
      <summary>
            Scale the icon to fill the annotation rectangle exactly.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.ScalingReason">
      <summary>
            The circumstances under which the icon shall be scaled inside the annotation rectangle.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.ScalingReason.Always">
      <summary>
            Always scale.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.ScalingReason.IconIsBigger">
      <summary>
            BScale only when the icon is bigger than the annotation rectangle.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.ScalingReason.IconIsSmaller">
      <summary>
            Scale only when the icon is smaller than the annotation rectangle.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.ScalingReason.Never">
      <summary>
            Never scale.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.Signature">
      <summary>
            An abstract class which represents signature object in the pdf document. 
            Signatures are fields with values of signature objects, the last contain data which is used to
            verify the document validity.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Signature.Authority">
      <summary>
            The name of the person or authority signing the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Signature.Date">
      <summary>
            The time of signing.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Signature.Location">
      <summary>
            The CPU host name or physical location of the signing.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Signature.Reason">
      <summary>
            The reason for the signing, such as (I agreeРІР‚В¦).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Signature.ContactInfo">
      <summary>
            Information provided by the signer to enable a recipient to contact the signer 
            to verify the signature, e.g. a phone number.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Signature.ByteRange">
      <summary>
             An array of pairs of integers (starting byte offset, length in bytes) 
             that shall describe the exact byte range for the digest calculation.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Signature.TimestampSettings">
      <summary>
            Gets/sets timestamp settings.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.Signature.Verify">
      <summary>
            Verify the document regarding this signature and return true if document is valid 
            or otherwise false.
            </summary>
      <returns>true if document is valid.</returns>
    </member>
    <member name="M:Aspose.Pdf.Forms.Signature.#ctor">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.Signature" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.Signature.ShowProperties">
      <summary>
            Force to show/hide signature properties.
            In case ShowProperties is true signature field has predefined format of appearance (strings to represent):
            -------------------------------------------
            Digitally signed by {certificate subject}
            Date: {signature.Date}
            Reason: {signature.Reason}
            Location: {signature.Location}
            -------------------------------------------
            where {X} is placeholder for X value. Also signature can have image, in this case listed strings are placed over image.
            ShowProperties is true by default.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.Signature.#ctor(System.String,System.String)">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.Signature" /> class.
            </summary>
      <param name="pfx">
            Pfx file which contains certificate for signing.
            </param>
      <param name="password">
            Password to get access to the private key in the certificate.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Forms.Signature.#ctor(System.IO.Stream,System.String)">
      <summary>
            Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.Signature" /> class.
            </summary>
      <param name="pfx">
            Stream with certificate data organized as pfx.
            </param>
      <param name="password">
            Password to get access to the private key in the certificate.
            </param>
    </member>
    <member name="T:Aspose.Pdf.Forms.SignatureField">
      <summary>
            Represents signature form field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.SignatureField.Signature">
      <summary>
            Gets signature object.
            This object contains signature data regarding public-key cryptographic standards.
            Classes <see cref="T:Aspose.Pdf.Forms.PKCS1" />, <see cref="T:Aspose.Pdf.Forms.PKCS7" /> and <see cref="T:Aspose.Pdf.Forms.PKCS7Detached" /> 
            represent all supported types of signature objects.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.SignatureField.Sign(Aspose.Pdf.Forms.Signature,System.IO.Stream,System.String)">
      <summary>
            Signs the document using this signature field.
            </summary>
      <param name="signature">
            Signature object, see <see cref="T:Aspose.Pdf.Forms.PKCS1" />, <see cref="T:Aspose.Pdf.Forms.PKCS7" />, <see cref="T:Aspose.Pdf.Forms.PKCS7Detached" />.
            </param>
      <param name="pfx">
            Stream with certificate.
            </param>
      <param name="pass">
            Password to access private in the <paramref name="pfx" />.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Forms.SignatureField.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Forms.SignatureField" /> class.
            </summary>
      <param name="page">Page where signature field should be placed.</param>
      <param name="rect">Position and size of signature field.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.SignatureField.#ctor(Aspose.Pdf.Document,Aspose.Pdf.Rectangle)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Forms.SignatureField" /> class.
            </summary>
      <param name="doc">Page where signature field should be placed.</param>
      <param name="rect">Position and size of signature field.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.SignatureField.Sign(Aspose.Pdf.Forms.Signature)">
      <summary>
            Sign the document using this signature field.
            </summary>
      <param name="signature">Signature object, see <see cref="T:Aspose.Pdf.Forms.PKCS1" />, <see cref="T:Aspose.Pdf.Forms.PKCS7" /> and <see cref="T:Aspose.Pdf.Forms.PKCS7Detached" />.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.SignatureField.ExtractImage">
      <summary>
            Extracts signature's image as jpeg encoded stream.
            </summary>
      <returns>If image was successfully found than returns jpeg encoded stream object; otherwise, null.</returns>
    </member>
    <member name="M:Aspose.Pdf.Forms.SignatureField.ExtractImage(System.Drawing.Imaging.ImageFormat)">
      <summary>
            Extracts signature's image as encoded stream.
            </summary>
      <param name="format">Image format for encoding.</param>
      <returns>If image was successfully found than returns encodedstream object; otherwise, null.</returns>
    </member>
    <member name="M:Aspose.Pdf.Forms.SignatureField.ExtractCertificate">
      <summary>
            Extracts the single X.509 certificate in DER format as a stream.  
            </summary>
      <returns>If certificate was found returns X.509 single certificate; otherwise, null.</returns>
    </member>
    <member name="T:Aspose.Pdf.Forms.Symbology">
      <summary>
            A (Barcode) Symbology defines the technical details of a particular type of barcode:
            the width of the bars, character set, method of encoding, checksum specifications, etc.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.Symbology.PDF417">
      <summary>
            A multi-row, variable-length 2D symbology with high data capacity and error-correction capability.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.Symbology.QRCode">
      <summary>
            QR code (short for Quick Response) is a specific matrix barcode (2D code), 
            readable by dedicated QR barcode readers and camera phones.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Forms.Symbology.DataMatrix">
      <summary>
            A 2D matrix symbology consisting of black and white square modules arranged in either a square or 
            rectangular pattern.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Forms.TextBoxField">
      <summary>
            Class representing text box field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.TextBoxField.Multiline">
      <summary>
            Gets or sets multiline flag of the field. If Multiline is true field can contain multiple lines of text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.TextBoxField.SpellCheck">
      <summary>
            Gets or sets spellcheck flag for field. If true field shall be spell checked.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.TextBoxField.Scrollable">
      <summary>
            Gets or sets scrollable flag of field. If true field can be scrolled. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.TextBoxField.ForceCombs">
      <summary>
            Gets or sets flag which indicates is field divided into spaced positions.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Forms.TextBoxField.MaxLen">
      <summary>
            Gets or sets maximum length of text in the field. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.TextBoxField.#ctor(Aspose.Pdf.Document)">
      <summary>
            Constructor which should be used with Generator.
            </summary>
      <param name="doc">Document where field will be created.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.TextBoxField.#ctor">
      <summary>
            Create instance of TextBoxField.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.TextBoxField.#ctor(Aspose.Pdf.Page,Aspose.Pdf.Rectangle)">
      <summary>
            Constructor of TextBox field.
            </summary>
      <param name="page">Page where text field is placed.</param>
      <param name="rect">Rectangle where the text field will be placed on the page.</param>
    </member>
    <member name="M:Aspose.Pdf.Forms.TextBoxField.#ctor(Aspose.Pdf.Document,Aspose.Pdf.Rectangle)">
      <summary>
             Constructor of TextBox field.
            </summary>
      <param name="doc">Document where field will be created.</param>
      <param name="rect">Rectangle of the field.</param>
    </member>
    <member name="P:Aspose.Pdf.Forms.TextBoxField.Value">
      <summary>
            Gets or sets value of the field.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Forms.TextBoxField.AddImage(System.Drawing.Image)">
      <summary>
            Adds image into the field resources an draws it.
            </summary>
      <param name="image">
            Image to add into text field.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Forms.TextBoxField.AddBarcode(System.String)">
      <summary>
            Adds barcode 128 into the field. 
            Field value will be changed onto the code and field become read only.
            </summary>
      <param name="code">
            The text to generate barcode 128.
            </param>
    </member>
    <member name="T:Aspose.Pdf.ConvertTransparencyAction">
      <summary>
            This class represents action for conversion of transparency.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ConvertTransparencyAction.Default">
      <summary>
            Use default strategy, no adding masks.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ConvertTransparencyAction.Mask">
      <summary>
            Add transparent mask image.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.JavaScriptCollection">
      <summary>
            This class represnets collection of JavaScript 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.JavaScriptCollection.Keys">
      <summary>
            List of keys in JavaScript collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.JavaScriptCollection.Item(System.String)">
      <summary>
            Gets or sets JavaScrip from collection by its key.
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.JavaScriptCollection.Remove(System.String)">
      <summary>
            Removes JavaScript by its name.
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.Pdf.Metered">
      <summary>
            Provides methods to set metered key.
            </summary>
      <example>
            In this example, an attempt will be made to set metered public and private key
            
            <code>
            [C#]
            
            Metered matered = new Metered();
            matered.SetMeteredKey("PublicKey", "PrivateKey");
            
            
            [Visual Basic]
            
            Dim matered As Metered = New Metered
            matered.SetMeteredKey("PublicKey", "PrivateKey")
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Metered.SetMeteredKey(System.String,System.String)">
      <summary>
            Sets metered public and private key
            </summary>
      <param name="publicKey">public key</param>
      <param name="privateKey">private key</param>
    </member>
    <member name="M:Aspose.Pdf.Metered.GetConsumptionQuantity">
      <summary>
            Gets consumption quantity
            </summary>
      <returns>consumption quantity</returns>
    </member>
    <member name="T:Aspose.Pdf.PrintDuplex">
      <summary>
            The paper handling option to use when printing the file from the print dialog..
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PrintDuplex.Simplex">
      <summary>
            Print single-sided.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PrintDuplex.DuplexFlipShortEdge">
      <summary>
            Duplex and flip on the short edge of the sheet.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PrintDuplex.DuplexFlipLongEdge">
      <summary>
            Duplex and flip on the long edge of the sheet.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PdfAOptionClasses.NamespaceDoc">
      <summary>
            The <b>Aspose.PdfAOptionClasses</b> is a namespace for PDF/A convertsion optins.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PdfAOptionClasses.ToUnicodeProcessingRules">
      <summary>
            This class describes rules which can be used to solve Adobe Preflight error 
            "Text cannot be mapped to Unicode".
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PdfAOptionClasses.ToUnicodeProcessingRules.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PdfAOptionClasses.ToUnicodeProcessingRules.#ctor(System.Boolean)">
      <summary>
            Constructor
            </summary>
      <param name="removeSpaces">sets <see cref="P:Aspose.Pdf.PdfAOptionClasses.ToUnicodeProcessingRules.RemoveSpacesFromCMapNames" /> flag</param>
    </member>
    <member name="M:Aspose.Pdf.PdfAOptionClasses.ToUnicodeProcessingRules.#ctor(System.Boolean,System.Boolean)">
      <summary>
            Constructor
            </summary>
      <param name="removeSpaces">sets <see cref="P:Aspose.Pdf.PdfAOptionClasses.ToUnicodeProcessingRules.RemoveSpacesFromCMapNames" /> flag</param>
      <param name="mapNonLinkedUnicodesOnSpace">sets <see cref="P:Aspose.Pdf.PdfAOptionClasses.ToUnicodeProcessingRules.MapNonLinkedSymbolsOnSpace" /> flag</param>
    </member>
    <member name="P:Aspose.Pdf.PdfAOptionClasses.ToUnicodeProcessingRules.RemoveSpacesFromCMapNames">
      <summary>
            Some fonts have ToUnicode character code maps with spaces in names. These spaces could call errors
            with unicode text mapping. This flag commands to remove spaces from names of ToUnicode character code maps.
            By default false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfAOptionClasses.ToUnicodeProcessingRules.MapNonLinkedSymbolsOnSpace">
      <summary>
            Some fonts doesn't provide information about unicodes for some text symbols. 
            This lack of information calls an error "Text cannot be mapped to Unicode".
            Use this flag to map non-linked symbols on unicode "space"(code 32).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PdfAOptionClasses.FontEmbeddingOptions">
      <summary>
            PDF/A standard requires, that all fonts must be embedded into document.
            This class includes flags for cases when it's not possible to embed some font cause this font is absent 
            on destination PC.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfAOptionClasses.FontEmbeddingOptions.UseDefaultSubstitution">
      <summary>
            Declares to substitute non-embedded font using default font substitution strategy. By default false;
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PdfFormatConversionOptions">
      <summary>
            represents set of options for convert PDF document
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PdfFormatConversionOptions.#ctor(System.String,Aspose.Pdf.PdfFormat,Aspose.Pdf.ConvertErrorAction)">
      <summary>
            Constructor
            </summary>
      <param name="outputLogFileName">Path to file where comments will be stored.</param>
      <param name="format">The pdf format.</param>
      <param name="action">Action for objects that can not be converted</param>
    </member>
    <member name="M:Aspose.Pdf.PdfFormatConversionOptions.#ctor(System.String,Aspose.Pdf.PdfFormat)">
      <summary>
            Constructor
            </summary>
      <param name="outputLogFileName">Path to file where comments will be stored.</param>
      <param name="format">The pdf format.</param>
    </member>
    <member name="M:Aspose.Pdf.PdfFormatConversionOptions.#ctor(Aspose.Pdf.PdfFormat)">
      <summary>
            Constructor
            </summary>
      <param name="format">The pdf format.</param>
    </member>
    <member name="M:Aspose.Pdf.PdfFormatConversionOptions.#ctor(Aspose.Pdf.PdfFormat,Aspose.Pdf.ConvertErrorAction)">
      <summary>
            Constructor
            </summary>
      <param name="format">The pdf format.</param>
      <param name="action">Action for objects that can not be converted</param>
    </member>
    <member name="M:Aspose.Pdf.PdfFormatConversionOptions.#ctor(System.String,Aspose.Pdf.PdfFormat,Aspose.Pdf.ConvertErrorAction,Aspose.Pdf.ConvertTransparencyAction)">
      <summary>
            Constructor
            </summary>
      <param name="outputLogFileName">Path to file where comments will be stored.</param>
      <param name="format">The pdf format.</param>
      <param name="action">Action for objects that can not be converted</param>
      <param name="transparencyAction">Action for image masked objects</param>
    </member>
    <member name="M:Aspose.Pdf.PdfFormatConversionOptions.#ctor(System.IO.Stream,Aspose.Pdf.PdfFormat,Aspose.Pdf.ConvertErrorAction)">
      <summary>
            Constructor
            </summary>
      <param name="outputLogStream">Stream where comments will be stored</param>
      <param name="format">The pdf format</param>
      <param name="action">Action for objects that can not be converted</param>
    </member>
    <member name="P:Aspose.Pdf.PdfFormatConversionOptions.IsLowMemoryMode">
      <summary>
            Is low memory conversion mode enabled
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfFormatConversionOptions.Format">
      <summary>
            PDF format.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfFormatConversionOptions.LogFileName">
      <summary>
            Path to file where comments will be stored.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfFormatConversionOptions.LogStream">
      <summary>
            Stream where comments will be stored.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfFormatConversionOptions.ErrorAction">
      <summary>
            Action for objects that can not be converted
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfFormatConversionOptions.TransparencyAction">
      <summary>
            Action for image masked objects
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfFormatConversionOptions.Default">
      <summary>
            Gets PdfFormatConversionOptions object with default parameters
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfFormatConversionOptions.NonSpecificationCases">
      <summary>
            Holds flags to control PDF/A conversion process for cases when source document
            doesn't correspond to PDF/A specification.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfFormatConversionOptions.SymbolicFontEncodingStrategy">
      <summary>
            Strategy to copy encoding data for symbolic fonts if symbolic TrueType font
            has more than one encoding subtable.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfFormatConversionOptions.AlignText">
      <summary>
            This flag controls text alignment in converted document. By default document conversion 
            doesn't affect text alignment and leave text as is. But in some cases font substitution
            causes text overlapping or extra spaces in converted document. When  this flag is set
            special alignment operations will be performed. This flag should be set only for documents
            which have problems with overlapped text or extra text spaces cause using of this flag decrease
            performance and in some cases could corrupt text content. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PdfFormatConversionOptions.AlignStrategy">
      <summary>
            Strategy to align text. This parameter has sense only when flag <see cref="P:Aspose.Pdf.PdfFormatConversionOptions.AlignText" />  is set to true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfFormatConversionOptions.PuaTextProcessingStrategy">
      <summary>
            Strategy to process symbols from unicode Private Use Area (PUA).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfFormatConversionOptions.OptimizeFileSize">
      <summary>
            Gets or sets a flag which enables/disables special conversion mode to get PDF/A document with reduced file size.
            Now this flag impacts on optimization of fonts used in PDF document, possibly, in future, this flag 
            also will be used to switch on optimization for another data structures, such as graphic.  
            Set of this flag and mode could significantly reduce file size but at the same time it could
            significantly decrease performance of conversion.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfFormatConversionOptions.ExcludeFontsStrategy">
      <summary>
            Strategy(ies) to exclude superfluous fonts and reduce document file size. 
            This parameter has sense only when flag <see cref="P:Aspose.Pdf.PdfFormatConversionOptions.OptimizeFileSize" /> is set to true.
            By default combination of strategies <see cref="P:Aspose.Pdf.PdfFormatConversionOptions.SubsetFonts" /> and
            <see cref="P:Aspose.Pdf.PdfFormatConversionOptions.RemoveDuplicatedFonts" /> is used.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfFormatConversionOptions.FontEmbeddingOptions">
      <summary>
            Options for cases when it's not possible to embed some fonts into PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfFormatConversionOptions.UnicodeProcessingRules">
      <summary>
            Rules to solve problems with unicode mapping. Can be null.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfFormatConversionOptions.IccProfileFileName">
      <summary>
            Gets or sets the filename of icc profile name. In case of null the default icc profile used.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfFormatConversionOptions.NotAccessibleFonts">
      <summary>
            This property is out-property. It holds all the fonts(font names) which were not found on computer 
            at last PDF/A conversion.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PdfFormatConversionOptions.SegmentAlignStrategy">
      <summary>
            Describes strategies used to align document text segments.
            Now only strategy to restore segments to original bounds is supported.
            In future another strategies could be added.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PdfFormatConversionOptions.PuaProcessingStrategy">
      <summary>
            Some PDF documents have special unicode symbols, which are belonged to Private Use Area (PUA), 
            see description at https://en.wikipedia.org/wiki/Private_Use_Areas.
            This symbols cause an PDF/A compliant errors like "Text is mapped to Unicode Private Use Area but no ActualText entry is present".
            This enumeration declares a strategies which can be used to handle PUA symbols.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PdfFormatConversionOptions.PuaProcessingStrategy.None">
      <summary>
            Disable PUA symbol processing. This strategy used by default for PDF/A documents with Level B conformance.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PdfFormatConversionOptions.PuaProcessingStrategy.SurroundPuaTextWithEmptyActualText">
      <summary>
            Inserts marked content block with ActualText entry which contains empty text.
            This strategy gives good results for documents without marked content blocks. Used by default for PDF/A documents with Level A conformance.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PdfFormatConversionOptions.PuaProcessingStrategy.SubstitutePuaSymbols">
      <summary>
            This strategy works slower than 'SurroundPuaTextWithEmptyActualText' but it can remove
            PUA compliant errors for documents which can't be handled properly by SurroundPuaTextWithEmptyActualText. PUA symbols
            are substituted on symbol 'space' or special unicode (some PUA symbols have unicode analogs). Substitution applied
            not to document's text but to font's internal data ToUnicode so it doesn't affects symbol's vision but it
            affects symbol's presentation in copy/paste operation system buffer.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PdfFormatConversionOptions.RemoveFontsStrategy">
      <summary>
            Some documens have large size after converison into PDF/A format. To reduce file size for these
            documents it's necessary to define a strategy of fonts removing. 
            This enumeration declares a strategies which can be used to optimize fonts usage.
            Every strategy from this enumeration has sense only when flag <see cref="P:Aspose.Pdf.PdfFormatConversionOptions.OptimizeFileSize" /> is set.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PdfFormatConversionOptions.RemoveFontsStrategy.RemoveDuplicatedFonts">
      <summary>
            This strategy removes all the fonts which have duplicates in document. If document 
            contains group of duplicated fonts only one font from this group is embedded in document. 
            All other fonts from this group are removed from document, every removed font
            substituted with the already embedded analog.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PdfFormatConversionOptions.RemoveFontsStrategy.RemoveSimilarFontsWithDifferentWidths">
      <summary>
            This strategy looks like <see cref="F:Aspose.Pdf.PdfFormatConversionOptions.RemoveFontsStrategy.RemoveDuplicatedFonts" /> but it removes not fully 
            duplicated fonts but fonts which are similar one to another and differs only by parameter "Widths".
            This parameter contains set of some widths for specified symbols of font. Every value of width 
            from this "Widths" set is not the real width of symbol(glyph), real width for this symbol already 
            defined in font's binary data. Value of width from "Widths" set means visual width for this 
            symbol - the width which PDF viewer software must set on displaying symbol instead of real width 
            defined in the font. More accurately specification tells:
            Acrobat 5.0 and later viewers use the glyph widths stored in the font dictionary to override the 
            widths of glyphs in the font program itself, which improves the consistency of the display and 
            printing of the document.
            This strategy is more effective than <see cref="F:Aspose.Pdf.PdfFormatConversionOptions.RemoveFontsStrategy.RemoveDuplicatedFonts" /> but using of this 
            strategy in some cases theoretically could damage visual presentation of converted document. 
            This defect is possible due to that declared widths of fonts could be different for the same 
            symbol and in this case width of this symbol will be changed to new one after font 
            substitution - when removed font will be replaced in document with already embedded one.
            And if symbol's visual width will be changed - it will be shown incorrectly and this 
            distinction could cause visual defects such as text overlapping or another problems. 
            But visual defect described is a very rare case and this strategy reduces size of
            document more effectively.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PdfFormatConversionOptions.RemoveFontsStrategy.SubsetFonts">
      <summary>
            This is most effective strategy to reduce document's size. It takes fully embedded font sets 
            and trim them down to only the subsets used. It's recommended to use this strategy in combination
            with <see cref="F:Aspose.Pdf.PdfFormatConversionOptions.RemoveFontsStrategy.RemoveDuplicatedFonts" /> or <see cref="F:Aspose.Pdf.PdfFormatConversionOptions.RemoveFontsStrategy.RemoveSimilarFontsWithDifferentWidths" /> to
            get multiple compression effect for file size. Using of all three strategies simultaneously 
            has no sense and strategy <see cref="F:Aspose.Pdf.PdfFormatConversionOptions.RemoveFontsStrategy.RemoveSimilarFontsWithDifferentWidths" /> will not 
            be used in this case.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PdfANonSpecificationFlags">
      <summary>
            This class holds flags to control PDF/A conversion for cases when source PDF document doesn't 
            correspond to PDF specification. If flags of this clas are used it decreases performance 
            but it's necessary when source PDF document can't be convert into PDF/A format by usual way. 
            By default all flags are set to false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfANonSpecificationFlags.CheckDifferentNamesInFontDictionaries">
      <summary>
            Some PDF documents contain fonts which have different names in internal data. 
            Use of this flag enforces special processing logic for cases when fields 
            BaseFont and FontDescriptor.FontName are different.
            
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy">
      <summary>
            This class describes rules which can be used to tune process of copy encoding data for cases
            when TrueType symbolic font has more than one encoding.
            Some PDF documents after conversion into PDF/A format could have error 
            "More than one encoding in symbolic TrueType font's cmap". 
            What is a reason of this error? All TrueType symbolic fonts have special table "cmap"
            in it's internal data. This table maps character codes to glyph indices. 
            And this table could contain different encoding subtables which
            describe encodings used. See advanced info about cmap tables at
            https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6cmap.html.
            Usually cmap table contains several encoding subtables, but PDF/A standard requires
            that only one encoding subtable (3,0) must be leaved for this font in PDF/A document. 
            And key question here - what data must be taken from another subtables to copy into
            destination encoding table (3,0)? Majority of fonts have 'well-formed' cmap tables where
            every encoding subtable is fully consistent with another subtable. But some fonts
            have cmap tables with collisions - where for example one subtable has glyph index 
            100 for unicode 100, but another subtable has glyph index 200 for the same unicode 100.
            To solve this problems special strategy needed. 
            By default following strategy used: 
            mac subtable(1,0) is looked for. If this table is found, only this data used to fill destination
            table (3,0). If mac subtable is not found then all subtables except (3,0) are iterated 
            and used to copy data into destination (3,0) subtable. Also mapping for every unicode(unicode, glyph index)
            is copied into destination table only if destination table has no this unicode at current moment. 
            So, for example if first subtabe has glyph index 100 for unicode 100, and next subtable has glyph
            index 200 for the same unicode 100, only data from first subtable (unicode=100, glyph index = 100) will be copied. 
            So each previous subtable takes precedence over the next. 
            Properties of this class <see cref="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy" /> help tune default behaviour. 
            If property <see cref="P:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.PreferredCmapEncodingTable" /> of type <see cref="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType" />
            is set, then relevant subtable will be used in precedence to mac subtable(1,0). Value 'MacTable' from
            enumeration <see cref="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType" /> has no sense in this case, cause it 
            points on the same mac subtable (1,0) which will be used by default. 
            Property <see cref="P:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.CmapEncodingTablesPriorityQueue" /> discards all priorities for any subtable.
            If this property is set, then only subtables from declared queue will be used in specified order.
            If subtables specified are not found then default iteration of all subtables and copy strategy described above
            will be used.
            Object <see cref="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem" /> specifies encoding subtable used. This subtable can be set
            via combination of members(PlatformID, PlatformSpecificID) or via <see cref="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType" />
            enumeration.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.#ctor">
      <summary>
            Constructor. Sets default subtable (mac 1,0)
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.#ctor(Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType)">
      <summary>
            Constructor
            </summary>
      <param name="preferredEncodingTable">encoding subtable which will be used in precedence to mac subtable(1,0)</param>
    </member>
    <member name="P:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.PreferredCmapEncodingTable">
      <summary>
            Specifies subtable which will be used in precedence to mac subtable(1,0). Value 'MacTable' from
            enumeration <see cref="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType" /> has no sense in this case.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.CmapEncodingTablesPriorityQueue">
      <summary>
            Specifies queue of encoding subtables to process.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem">
      <summary>
            Specifies encoding subtable. Each encoding subtable has unique combination
            of parameters (PlatformID, PlatformSpecificID). Enumeration <see cref="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType" />
            and property <see cref="P:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTable" /> were implemented to make easier 
            set of encoding subtable needed.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.#ctor">
      <summary>
            Constructor, specifies mac subtable(1,0) by default
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.#ctor(System.UInt16,System.UInt16)">
      <summary>
            Constructor
            </summary>
      <param name="platformID">Platform identifier for encoding subtable</param>
      <param name="platformSpecificID">Platform-specific encoding identifier for encoding subtable</param>
    </member>
    <member name="M:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.#ctor(Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType)">
      <summary>
            Constructor
            </summary>
      <param name="cmapTable">encoding subtable</param>
    </member>
    <member name="P:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTable">
      <summary>
            Specifies encoding subtable via <see cref="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType" />enumeration
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.PlatformID">
      <summary>
            Platform identifier for encoding subtable
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.PlatformSpecificID">
      <summary>
            Platform-specific encoding identifier for encoding subtable
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType">
      <summary>
            Declares set of some known encoding subtables
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType.WindowsUnicodeTable">
      <summary>
            Specifies windows unicode table(3,1) - Unicode BMP-only (UCS-2)
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType.WindowsSymbolicTable">
      <summary>
            Specifies windows symbolic table - (3,0)
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType.MacTable">
      <summary>
            Specifies mac table(1,0)
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType.UnicodeTable">
      <summary>
            Specifies unicode table(0,3)
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Point3D">
      <summary>
            Represent point with fractional coordinates.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Point3D.X">
      <summary>
            X coordinate value.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Point3D.Y">
      <summary>
            Y coordinate value.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Point3D.Z">
      <summary>
            Z coordinate value.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Point3D.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Point3D" />.
            </summary>
      <param name="x">
            x coordinate value.
            </param>
      <param name="y">
            y coordinate value.
            </param>
      <param name="z">
            z coordinate value.
            </param>
    </member>
    <member name="P:Aspose.Pdf.Point3D.Trivial">
      <summary>
            Gets point with zero coordinates.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ColumnAdjustment">
      <summary>
            Enumerates column adjustment types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColumnAdjustment.Customized">
      <summary>
            Customized.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColumnAdjustment.AutoFitToContent">
      <summary>
            Auto fit to content.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColumnAdjustment.AutoFitToWindow">
      <summary>
            Auto fit to window.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.RgbToDeviceGrayConversionStrategy">
      <summary>
            Represents rgb to device gray color spaces conversion strategy.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.RgbToDeviceGrayConversionStrategy.Convert(Aspose.Pdf.Page)">
      <summary>
            Converts the page of document.
            </summary>
      <param name="page">The page of document.</param>
    </member>
    <member name="T:Aspose.Pdf.IColorSpaceConversionStrategy">
      <summary>
            Interface for color space conversion strategies.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.IColorSpaceConversionStrategy.Convert(Aspose.Pdf.Page)">
      <summary>
            Converts the page of document.
            </summary>
      <param name="page">The page of document.</param>
    </member>
    <member name="T:Aspose.Pdf.TimestampSettings">
      <summary>
            Represents the ocsp settings using during signing process.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TimestampSettings.ServerUrl">
      <summary>
            Gets/sets the timestamp server url.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TimestampSettings.BasicAuthCredentials">
      <summary>
            Gets/sets the basic authentication credentials, Username and password are combined into a string "username:password".
            </summary>
    </member>
    <member name="M:Aspose.Pdf.TimestampSettings.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.TimestampSettings" /> class.
            <param name="serverUrl">The timestamp server url.</param><param name="basicAuthCredentials">The basic authentication credentials, username and password are combined into a string "username:password".</param></summary>
    </member>
    <member name="T:Aspose.Pdf.ExcelSaveOptions">
      <summary>
            Save options for export to Excel format
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ExcelSaveOptions.MinimizeTheNumberOfWorksheets">
      <summary>
            Set true if you need to minimize the number of worksheets in resultant workbook.
            Default value is false; it means save of each PDF page as separated worksheet.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ExcelSaveOptions.InsertBlankColumnAtFirst">
      <summary>
            Set false if you need suppress inserting of blank column as the first column of worksheet.
            Default value is true; it means that blank column will be inserted.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ExcelSaveOptions.UniformWorksheets">
      <summary>
            Set true for using uniform columns division through the document. 
            Default value is false; it means that columns division will independent for each page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ExcelSaveOptions.ScaleFactor">
      <summary>
            Gets or sets factor that will be applied to (virtual) scaling font size during conversion to Excel table.
            Setting of less value facilitates the search for columns and prevents merging of them for some documents.
            Default value is 0.9;
            Setting value to zero allows algorithm choose scaling automatically.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.GraphInfo">
      <summary>
            Represents graphics info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.LineWidth">
      <summary>
            Gets or sets a float value that indicates the line width of the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.Color">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.GraphInfo.Color" /> object that indicates the color of the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.DashArray">
      <summary>
            Gets or sets a dash array.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.DashPhase">
      <summary>
            Gets or sets a dash phase.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.FillColor">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.GraphInfo.Color" /> object that indicates the fill color of the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.IsDoubled">
      <summary>
            Gets or sets is border doubled.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.SkewAngleX">
      <summary>
            Gets or sets a float value that indicates the skew angle of the x-coordinate when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.SkewAngleY">
      <summary>
            Gets or sets a float value that indicates the skew angle of the y-coordinate when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.ScalingRateX">
      <summary>
            Gets or sets a float value that indicates the scaling rate of the x-coordinate when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.ScalingRateY">
      <summary>
            Gets or sets a float value that indicates the scaling rate of the y-coordinate when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.RotationAngle">
      <summary>
            Gets or sets a float value that indicates the rotation angle of the coordinate system 
            when transforming a coordinate system.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.GraphInfo.Clone">
      <summary>
            Clone the graphics info.
            </summary>
      <returns>The cloned object</returns>
    </member>
    <member name="T:Aspose.Pdf.HtmlFragment">
      <summary>
            Represents html fragment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlFragment.TextState">
      <summary>
            Gets or sets font
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlFragment.HtmlLoadOptions">
      <summary>
            Gets or sets HtmlLoadOptions that will be used for loading (and rendering) of HTML into this instance of class.
            Please use it when it's necessary use specific setting for import of HTML for this or that instance
             (f.e when this or that instance should use specific BasePath for imported HTML or should use specific loader of external resources)
            If parameter is default (null), then standard HTML loading options will be used.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.HtmlFragment.#ctor(System.String)">
      <summary>
            Initializes a new instance of the HtmlFragment class.
            </summary>
      <param name="text">The fragment text</param>
    </member>
    <member name="T:Aspose.Pdf.UnsupportedFontTypeException">
      <summary>
            The exception that is thrown when a font type is not supported.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.UnsupportedFontTypeException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.UnsupportedFontTypeException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.UnsupportedFontTypeException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.UnsupportedFontTypeException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.UnsupportedFontTypeException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.UnsupportedFontTypeException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:Aspose.Pdf.ExtendedBoolean">
      <summary>
            Represents boolean type that supports Undefined value.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ExtendedBoolean.Undefined">
      <summary>
            Undefined value value of ExtendnedBoolean.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ExtendedBoolean.False">
      <summary>
            False value of ExtendnedBoolean.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ExtendedBoolean.True">
      <summary>
            True value of ExtendnedBoolean.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.IncorrectFontUsageException">
      <summary>
            The exception that is thrown when font usage is incorrect.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.IncorrectFontUsageException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.IncorrectFontUsageException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.IncorrectFontUsageException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.IncorrectFontUsageException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.IncorrectFontUsageException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.IncorrectFontUsageException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:Aspose.Pdf.InvalidFileFormatException">
      <summary>
            The exception that is thrown when a file is invalid.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InvalidFileFormatException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidFileFormatException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.InvalidFileFormatException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidFileFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.InvalidFileFormatException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidFileFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:Aspose.Pdf.InvalidPasswordException">
      <summary>
            The exception that is thrown when invalid password is provided by user.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InvalidPasswordException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidPasswordException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.InvalidPasswordException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidPasswordException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.InvalidPasswordException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidPasswordException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:Aspose.Pdf.InvalidPdfFileFormatException">
      <summary>
            The exception that is thrown when a pdf file is invalid.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InvalidPdfFileFormatException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidPdfFileFormatException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.InvalidPdfFileFormatException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidPdfFileFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.InvalidPdfFileFormatException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidPdfFileFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:Aspose.Pdf.PdfException">
      <summary>
            Represents errors that occur during PDF application execution.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PdfException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.PdfException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.PdfException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.PdfException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.PdfException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.PdfException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:Aspose.Pdf.ConvertErrorAction">
      <summary>
            This class represents action for conversion errors.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ConvertErrorAction.Delete">
            Delete convert errors
        </member>
    <member name="F:Aspose.Pdf.ConvertErrorAction.None">
            Do nothing with convert errors
        </member>
    <member name="T:Aspose.Pdf.PdfFormat">
      <summary>
            This class represents an pdf format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PdfFormat.PDF_A_1A">
            Pdf/A-1a format
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.PDF_A_1B">
            Pdf/A-1b format
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.PDF_A_2A">
            Pdf/A-2a format
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.PDF_A_3A">
            Pdf/A-3a format
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.PDF_A_2B">
            Pdf/A-2b format
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.PDF_A_2U">
            Pdf/A-2u format
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.PDF_A_3B">
            Pdf/A-3b format
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.PDF_A_3U">
            Pdf/A-3u format
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.v_1_3">
            Adobe version 1.3
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.v_1_4">
            Adobe version 1.4
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.v_1_5">
            Adobe version 1.5
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.v_1_6">
            Adobe version 1.6
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.v_1_7">
            Adobe version 1.7
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.PDF_X_1A">
            PDF/X-1a format
        </member>
    <member name="F:Aspose.Pdf.PdfFormat.PDF_X_3">
            PDF/X-3 format
        </member>
    <member name="T:Aspose.Pdf.IIndexBitmapConverter">
      <summary>
            This interface declared for customization algorithms of quantization. 
            Users can implement their own realization of this algorithms (for example algorithms based on unmanaged code).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.IIndexBitmapConverter.Get1BppImage(System.Drawing.Bitmap)">
      <summary>
            Returns 1Bpp bitmap representation
            </summary>
      <param name="src">Source bitmap.</param>
      <returns>Bitmap in 1 bpp image format.</returns>
    </member>
    <member name="M:Aspose.Pdf.IIndexBitmapConverter.Get4BppImage(System.Drawing.Bitmap)">
      <summary>
            Returns 4Bpp bitmap representation
            </summary>
      <param name="src">Source bitmap.</param>
      <returns>Bitmap in 4 bpp image format.</returns>
    </member>
    <member name="M:Aspose.Pdf.IIndexBitmapConverter.Get8BppImage(System.Drawing.Bitmap)">
      <summary>
            Returns 8Bpp bitmap representation
            </summary>
      <param name="src">Source bitmap.</param>
      <returns>Bitmap in 8 bpp image format.</returns>
    </member>
    <member name="T:Aspose.Pdf.CryptoAlgorithm">
      <summary>
            Represent type of cryptographic algorithm that used in encryption/decryption routines.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.CryptoAlgorithm.RC4x40">
      <summary>
            RC4 with key length 40.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.CryptoAlgorithm.RC4x128">
      <summary>
            RC4 with key length 128.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.CryptoAlgorithm.AESx128">
      <summary>
            AES with key length 128.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.CryptoAlgorithm.AESx256">
      <summary>
            AES with key length 256.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.GroupProcessor.NamespaceDoc">
      <summary>
        <p>The <b>Aspose.Pdf.GroupProcessor</b> namespace provides classes used to work text and fonts.</p>
      </summary>
    </member>
    <member name="T:Aspose.Pdf.GroupProcessor.ExtractorFactory">
      <summary>
            Represents factory for creating IPdfTypeExtractor objects.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.GroupProcessor.ExtractorFactory.Pdf">
      <summary>
            Conains creator of IPdfTypeExtractor object.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.GroupProcessor.IPdfTypeExtractor">
      <summary>
            Represents interface to interacting with extractor.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.GroupProcessor.Creators.NamespaceDoc">
      <summary>
        <p>The <b>Aspose.Pdf.GroupProcessor.Creators</b> namespace provides classes used to create instances of GroupProcessor classes. </p>
      </summary>
    </member>
    <member name="T:Aspose.Pdf.GroupProcessor.Creators.PdfTypeObjectCreator">
      <summary>
            Represents an creator of IPdfTypeExtractor object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.GroupProcessor.Creators.PdfTypeObjectCreator.CreateExtractor(System.String,System.Int32,System.Boolean)">
      <summary>
            Creates IPdfTypeExtractor object.
            </summary>
      <param name="pdfDocumentPath">Path to a pdf document.</param>
      <param name="bufferSize">Maximum size of content in bytes that can be kept in memory.</param>
      <param name="allowAsyncInitialization">Allows async initialization of resources.</param>
      <returns>object of IPdfTypeExtractor</returns>
    </member>
    <member name="M:Aspose.Pdf.GroupProcessor.Creators.PdfTypeObjectCreator.CreateExtractor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
            Creates IPdfTypeExtractor object.
            </summary>
      <param name="pdfDocumentStream">Stream containing pdf document.</param>
      <param name="bufferSize">Maximum size of content in bytes that can be kept in memory.</param>
      <param name="allowAsyncInitialization">Allows async initialization of resources.</param>
      <returns>object of IPdfTypeExtractor</returns>
    </member>
    <member name="M:Aspose.Pdf.GroupProcessor.Creators.PdfTypeObjectCreator.CreateExtractor(System.String,System.String,System.Int32,System.Boolean)">
      <summary>
            Creates IPdfTypeExtractor object.
            </summary>
      <param name="pdfDocumentPath">Path to a pdf document.</param>
      <param name="password">Document password.</param>
      <param name="bufferSize">Maximum size of content in bytes that can be kept in memory.</param>
      <param name="allowAsyncInitialization">Allows async initialization of resources.</param>
      <returns>object of IPdfTypeExtractor</returns>
    </member>
    <member name="M:Aspose.Pdf.GroupProcessor.Creators.PdfTypeObjectCreator.CreateExtractor(System.IO.Stream,System.String,System.Int32,System.Boolean)">
      <summary>
            Creates IPdfTypeExtractor object.
            </summary>
      <param name="pdfDocumentStream">Stream containing pdf document.</param>
      <param name="password">Document password.</param>
      <param name="bufferSize">Maximum size of content in bytes that can be kept in memory.</param>
      <param name="allowAsyncInitialization">Allows async initialization of resources.</param>
      <returns>object of IPdfTypeExtractor</returns>
    </member>
    <member name="T:Aspose.Pdf.FontNotFoundException">
      <summary>
            The exception that is thrown when a font is not found.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.FontNotFoundException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.FontNotFoundException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.FontNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.FontNotFoundException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.FontNotFoundException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.FontNotFoundException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:Aspose.Pdf.ExtractImageMode">
      <summary>
            Defines different modes which can be used while extracting images from documents.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ExtractImageMode.DefinedInResources">
      <summary>
            Defines image extraction mode in which all images defined in resources for particular page are extracted.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ExtractImageMode.ActuallyUsed">
      <summary> 
            Defines image extraction mode in which only those images are extracted that are actually shown on a page.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.FormPresentationMode">
      <summary>
            Used to specify the form presentation mode when printing or converting to image pdf documents.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.FormPresentationMode.Production">
      <summary>
            Specifies Production form presentation mode (used by default).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.FormPresentationMode.Editor">
      <summary>
            Specifies Editor form presentation mode.
            </summary>
      <remarks>
            The Editor mode is used by some products to display forms.
            In Editor mode some form elements are displayed as they are shown in form designer.
            </remarks>
    </member>
    <member name="T:Aspose.Pdf.Devices.BmpDevice">
      <summary>
            Represents image device that helps to save pdf document pages into bmp. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.BmpDevice.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.BmpDevice" /> class with default resolution.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.BmpDevice.#ctor(Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.BmpDevice" /> class.
            <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param></summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.BmpDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.BmpDevice" /> class with provided image dimensions and
            resolution.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.BmpDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.BmpDevice" /> class with provided page size and
            resolution.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.BmpDevice.Process(Aspose.Pdf.Page,System.IO.Stream)">
      <summary>
            Converts the page into bmp and saves it in the output stream.
            </summary>
      <param name="page">
            The page to convert.
            </param>
      <param name="output">
            Output stream with bmp image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.BmpDevice.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.BmpDevice" /> class with provided image dimensions, 
            default resolution (=150).
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.BmpDevice.#ctor(Aspose.Pdf.PageSize)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.BmpDevice" /> class with provided page size, 
            default resolution (=150).
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
    </member>
    <member name="T:Aspose.Pdf.Devices.ColorDepth">
      <summary>
            Used to specify the parameter value passed to a Tiff image device.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.ColorDepth.Default">
      <summary>
            Default color depth.
            32 bit depth is used by default.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.ColorDepth.Format8bpp">
      <summary>
            8 bits per pixel. Equal <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed" /></summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.ColorDepth.Format4bpp">
      <summary>
            4 bits per pixel. Equal <see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed" /></summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.ColorDepth.Format1bpp">
      <summary>
            1 bit per pixel. Equal <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppRgb" /></summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.CompressionType">
      <summary>
            Used to specify the parameter value passed to a Tiff image device.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.CompressionType.LZW">
      <summary>
            Specifies the LZW compression scheme. Can be passed to the Tiff encoder as a parameter that belongs to the Compression category.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.CompressionType.CCITT4">
      <summary>
            Specifies the CCITT4 compression scheme. Can be passed to the CCITT4 encoder as a parameter that belongs to the Compression category.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.CompressionType.CCITT3">
      <summary>
            Specifies the CCITT3 compression scheme. Can be passed to the CCITT3 encoder as a parameter that belongs to the Compression category.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.CompressionType.RLE">
      <summary>
            Specifies the RLE compression scheme. Can be passed to the RLE encoder as a parameter that belongs to the Compression category.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.CompressionType.None">
      <summary>
            Specifies no compression. Can be passed to the Tiff encoder as a parameter that belongs to the compression category.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.NamespaceDoc">
      <summary>
            The <b>Aspose.Pdf.Devices</b> namespace provides classes which are used for representing document as image(s) or a plain text.
            So document can be sent on to textual or various graphic devices which means we want to get it textual or graphic representation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.Device">
      <summary>
            Abstract class for all types of devices. Device is used to represent pdf document in some format.
            For example, document page can be represented as image or text. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.Device.Document">
      <summary>
            Document which is processed by this device instance.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.DocumentDevice">
      <summary>
            Abstract class for all devices which is used to process the whole pdf document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.DocumentDevice.Process(Aspose.Pdf.Document,System.Int32,System.Int32,System.IO.Stream)">
      <summary>
            Each device represents some operation on the document, e.g. we can convert pdf document into another format.
            </summary>
      <param name="document">
            The document to process.
            </param>
      <param name="fromPage">
            Defines the page from which to start processing.
            </param>
      <param name="toPage">
            Defines the last page to process.
            </param>
      <param name="output">
            Defines stream where the results of processing are stored.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.DocumentDevice.Process(Aspose.Pdf.Document,System.IO.Stream)">
      <summary>
            Processes the whole document and saves results into stream.
            </summary>
      <param name="document">
            The document to process.
            </param>
      <param name="output">
            Defines stream where the results of processing are stored.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.DocumentDevice.Process(Aspose.Pdf.Document,System.String)">
      <summary>
            Processes the whole document and saves results into file.
            </summary>
      <param name="document">
            The document to process.
            </param>
      <param name="outputFileName">
            Defines file where the results of processing are stored.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.DocumentDevice.Process(Aspose.Pdf.Document,System.Int32,System.Int32,System.String)">
      <summary>
            Processes certain pages of the document and saves results into file.
            </summary>
      <param name="document">
            The document to process.
            </param>
      <param name="fromPage">
            The first page to start processing.
            </param>
      <param name="toPage">
            The last page of processing.
            </param>
      <param name="outputFileName">
            Defines file where the results of processing are stored.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.DocumentDevice.BinarizeBradley(System.IO.Stream,System.IO.Stream,System.Double)">
      <summary>
            Do Bradley binarization for input stream.
            </summary>
      <param name="inputImageStream">The input image stream.</param>
      <param name="outputImageStream">The output image stream.</param>
      <param name="threshold">The threshold value between 0.0 and 1.0.</param>
    </member>
    <member name="T:Aspose.Pdf.Devices.GifDevice">
      <summary>
            Represents image device that helps to save pdf document pages into gif. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.GifDevice.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.GifDevice" /> class with default resolution.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.GifDevice.#ctor(Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.GifDevice" /> class.
            <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param></summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.GifDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.GifDevice" /> class with provided image dimensions and
            resolution.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.GifDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.GifDevice" /> class with provided page size and
            resolution.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.GifDevice.Process(Aspose.Pdf.Page,System.IO.Stream)">
      <summary>
            Converts the page into gif and saves it in the output stream.
            </summary>
      <param name="page">
            The page to convert.
            </param>
      <param name="output">
            Output stream with gif image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.GifDevice.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.GifDevice" /> class with provided image dimensions, 
            default resolution (=150).
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.GifDevice.#ctor(Aspose.Pdf.PageSize)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.GifDevice" /> class with provided page size, 
            default resolution (=150).
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
    </member>
    <member name="T:Aspose.Pdf.Devices.ImageDevice">
      <summary>
            An abstract class for image devices.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.ImageDevice.CoordinateType">
      <summary>
            Gets or sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.ImageDevice.RenderingOptions">
      <summary>
            Gets or sets rendering options.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.ImageDevice.FormPresentationMode">
      <summary>
            Gets or sets form presentation mode.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.ImageDevice.Resolution">
      <summary>
            Gets image resolution.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.ImageDevice.Width">
      <summary>
            Gets image output width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.ImageDevice.Height">
      <summary>
            Gets image output height.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.ImageDevice.#ctor">
      <summary>
            Abstract initializer for <see cref="T:Aspose.Pdf.Devices.ImageDevice" /> descendants, set resolution to 150x150.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.ImageDevice.#ctor(Aspose.Pdf.Devices.Resolution)">
      <summary>
            Abstract initializer for <see cref="T:Aspose.Pdf.Devices.ImageDevice" /> descendants.
            <param name="resolution">
            Resolution for the result image file, see <see cref="P:Aspose.Pdf.Devices.ImageDevice.Resolution" /> class.
            </param></summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.ImageDevice.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided image dimensions and default resolution (=150).
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.ImageDevice.#ctor(Aspose.Pdf.PageSize)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided image dimensions and default resolution (=150).
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.ImageDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided image dimensions and resolution.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="P:Aspose.Pdf.Devices.ImageDevice.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.ImageDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided image dimensions and resolution.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="P:Aspose.Pdf.Devices.ImageDevice.Resolution" /> class.
            </param>
    </member>
    <member name="T:Aspose.Pdf.Devices.JpegDevice">
      <summary>
            Represents image device that helps to save pdf document pages into jpeg. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with default resolution and maximum quality.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor(Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class.
            <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param></summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class.
            </summary>
      <param name="quality">
            Specifies the level of compression for an image. 
            The range of useful values for the quality is from 0 to 100. 
            The lower the number specified, the higher the compression and therefore the lower the quality of the image. 
            Zero would give you the lowest quality image and 100 the highest.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor(Aspose.Pdf.Devices.Resolution,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class.
            </summary>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
      <param name="quality">
            Specifies the level of compression for an image. 
            The range of useful values for the quality is from 0 to 100. 
            The lower the number specified, the higher the compression and therefore the lower the quality of the image. 
            Zero would give you the lowest quality image and 100 the highest.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided image dimensions, 
            default resolution (=150) and maximum quality.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor(Aspose.Pdf.PageSize)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided page size, 
            default resolution (=150) and maximum quality.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided image dimensions, 
            resolution and maximum quality.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided page size, 
            resolution and maximum quality.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided image dimensions, 
            resolution and quality.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
      <param name="quality">
            Specifies the level of compression for an image. 
            The range of useful values for the quality is from 0 to 100. 
            The lower the number specified, the higher the compression and therefore the lower the quality of the image. 
            Zero would give you the lowest quality image and 100 the highest.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided page size, 
            resolution and quality.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
      <param name="quality">
            Specifies the level of compression for an image. 
            The range of useful values for the quality is from 0 to 100. 
            The lower the number specified, the higher the compression and therefore the lower the quality of the image. 
            Zero would give you the lowest quality image and 100 the highest.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.JpegDevice.Process(Aspose.Pdf.Page,System.IO.Stream)">
      <summary>
            Converts the page into jpeg and saves it in the output stream.
            </summary>
      <param name="page">
            The page to convert.
            </param>
      <param name="output">
            Output stream with jpeg image.
            </param>
    </member>
    <member name="T:Aspose.Pdf.Devices.Margins">
      <summary>
            This class represents margins of an image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.Margins.Left">
      <summary>
            Gets or sets the left.
            </summary>
      <value>The left.</value>
    </member>
    <member name="P:Aspose.Pdf.Devices.Margins.Right">
      <summary>
            Gets or sets the right.
            </summary>
      <value>The right.</value>
    </member>
    <member name="P:Aspose.Pdf.Devices.Margins.Top">
      <summary>
            Gets or sets the top.
            </summary>
      <value>The top.</value>
    </member>
    <member name="P:Aspose.Pdf.Devices.Margins.Bottom">
      <summary>
            Gets or sets the bottom.
            </summary>
      <value>The bottom.</value>
    </member>
    <member name="M:Aspose.Pdf.Devices.Margins.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.Margins"></see> class.
            </summary>
      <param name="left">The left coordinate.</param>
      <param name="right">The right coordinate.</param>
      <param name="top">The top coordinate.</param>
      <param name="bottom">The bottom coordinate.</param>
    </member>
    <member name="M:Aspose.Pdf.Devices.Margins.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.Margins"></see> class.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.PageDevice">
      <summary>
            Abstract class for all devices which is used to process certain page the pdf document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.PageDevice.Process(Aspose.Pdf.Page,System.IO.Stream)">
      <summary>
            Perfoms some operation on the given page, e.g. converts page into graphic image.
            </summary>
      <param name="page">
            The page to process.
            </param>
      <param name="output">
            This stream contains the results of processing.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.PageDevice.Process(Aspose.Pdf.Page,System.String)">
      <summary>
            Perfoms some operation on the given page and saves results into the file.
            </summary>
      <param name="page">
            The page to process.
            </param>
      <param name="outputFileName">
            This file contains the results of processing.
            </param>
    </member>
    <member name="T:Aspose.Pdf.Devices.PngDevice">
      <summary>
            Represents image device that helps to save pdf document pages into png. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.PngDevice.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.PngDevice" /> class with default resolution.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.PngDevice.#ctor(Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.PngDevice" /> class.
            <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param></summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.PngDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.PngDevice" /> class with provided image dimensions and
            resolution.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.PngDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.PngDevice" /> class with provided page size and
            resolution.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.PngDevice.Process(Aspose.Pdf.Page,System.IO.Stream)">
      <summary>
            Converts the page into png and saves it in the output stream.
            </summary>
      <param name="page">
            The page to convert.
            </param>
      <param name="output">
            Output stream with png image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.PngDevice.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.PngDevice" /> class with provided image dimensions, 
            default resolution (=150).
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.PngDevice.#ctor(Aspose.Pdf.PageSize)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.PngDevice" /> class with provided page size, 
            default resolution (=150).
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
    </member>
    <member name="T:Aspose.Pdf.Devices.Resolution">
      <summary>
            Represents class for holding image resolution.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.Resolution.X">
      <summary>
            Gets or sets horizontal image resolution.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.Resolution.Y">
      <summary>
            Gets or sets vertical image resolution.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.Resolution.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </summary>
      <param name="value">
            Value which represents the horizontal and vertical resolution.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.Resolution.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </summary>
      <param name="valueX">
            Horizontal resolution.
            </param>
      <param name="valueY">
            Vertical resolution.
            </param>
    </member>
    <member name="T:Aspose.Pdf.Devices.ShapeType">
      <summary>
            This enum represents shape type for the extracted images.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.ShapeType.None">
      <summary>
            Original image shape.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.ShapeType.Landscape">
      <summary>
            Landscape Shape.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Devices.ShapeType.Portrait">
      <summary>
            Portrait Shape.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.TextDevice">
      <summary>
            Represents class for converting pdf document pages into text.
            </summary>
      <remarks>
            The <see cref="T:Aspose.Pdf.Devices.TextDevice" /> object is basically used to extract text from pdf page.
            </remarks>
      <example>
            The example demonstrates how to extract text on the first PDF document page.
            <code lang="C#"> 
            Document doc = new Document(inFile);
            string extractedText;
            
            using (MemoryStream ms = new MemoryStream())
            {
                // create text device
                TextDevice device = new TextDevice();
            
                // convert the page and save text to the stream
                device.Process(doc.Pages[1], ms);
            
                // use the extracted text
                ms.Close();
                extractedText = Encoding.Unicode.GetString(ms.ToArray());
            }
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Devices.TextDevice.ExtractionOptions">
      <summary>
            Gets or sets text extraction options.
            </summary>
      <example>
            The example demonstrates how to extracted text in raw order.
            <code lang="C#"> 
            Document doc = new Document(inFile);
            string extractedText;
            
            // create text device
            TextDevice device = new TextDevice(new TextExtractionOptions(TextExtractionOptions.TextFormattingMode.Raw));
            
            // convert the page and save text to the stream
            device.Process(doc.Pages[1], outFile);
            
            // use the extracted text
            extractedText = File.ReadAllText(outFile, Encoding.Unicode); 
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Devices.TextDevice.Encoding">
      <summary>
            Gets or sets encoding of extracted text.
            </summary>
      <example>
            The example demonstrates how to represent extracted text in UTF-8 encoding.
            <code lang="C#"> 
            Document doc = new Document(inFile);
            string extractedText;
            
            // create text device
            TextDevice device = new TextDevice(Encoding.UTF8);
            
            // convert the page and save text to the stream
            device.Process(doc.Pages[1], outFile);
            
            // use the extracted text
            extractedText = File.ReadAllText(outFile, Encoding.UTF8);
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Devices.TextDevice.Process(Aspose.Pdf.Page,System.IO.Stream)">
      <summary>
            Convert page and save it as text stream.
            </summary>
      <example>
            The example demonstrates how to extract text on the first PDF document page.
            <code lang="C#"> 
            Document doc = new Document(inFile);
            string extractedText;
            
            using (MemoryStream ms = new MemoryStream())
            {
                // create text device
                TextDevice device = new TextDevice();
            
                // convert the page and save text to the stream
                device.Process(doc.Pages[1], ms);
            
                // use the extracted text
                ms.Close();
                extractedText = Encoding.Unicode.GetString(ms.ToArray());
            }
            </code></example>
      <param name="page">
            The page to convert.
            </param>
      <param name="output">
            Result stream.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TextDevice.#ctor(Aspose.Pdf.Text.TextExtractionOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TextDevice" /> with text extraction options.
            </summary>
      <param name="extractionOptions">
            Text extraction options.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TextDevice.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TextDevice" /> with the Raw text formatting mode and Unicode text encoding.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.TextDevice.#ctor(System.Text.Encoding)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TextDevice" /> for the specified encoding.
            </summary>
      <param name="encoding">
            Encoding of extracted text
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TextDevice.#ctor(Aspose.Pdf.Text.TextExtractionOptions,System.Text.Encoding)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TextDevice" /> for the specified encoding with text extraction options.
            </summary>
      <param name="extractionOptions">
            Text extraction options.
            </param>
      <param name="encoding">
            Encoding of extracted text.
            </param>
    </member>
    <member name="T:Aspose.Pdf.Devices.TiffDevice">
      <summary>
            This class helps to save pdf document page by page into the one tiff image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffDevice.RenderingOptions">
      <summary>
            Gets or sets rendering options.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffDevice.FormPresentationMode">
      <summary>
            Gets or sets form presentation mode.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffDevice.Settings">
      <summary>
            Gets settings for mapping pdf into tiff image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffDevice.Resolution">
      <summary>
            Gets image resolution.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="resolution">
            Resolution for the result image file.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.Devices.Resolution,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="resolution">
            Resolution for the output image.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.Devices.Resolution,Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="resolution">
            Resolution for the output image.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
      <param name="converter">
            External converter
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
      <param name="converter">
            External converter
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class with default settings.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.Process(Aspose.Pdf.Document,System.Int32,System.Int32,System.IO.Stream)">
      <summary>
            Converts certain document pages into tiff and save it in the output stream.
            </summary>
      <param name="document">
            The document to convert.
            </param>
      <param name="fromPage">
            Defines page number from which converting will start.
            </param>
      <param name="toPage">
            Defines page number which will end the converting.
            </param>
      <param name="output">
            Output stream with tiff image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the output image.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution,Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the output image.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
      <param name="converter">
            External converter
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the output image.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution,Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the output image.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
      <param name="converter">
            External converter
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the output image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the output image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
      <param name="converter">
            External converter
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.TiffSettings,Aspose.Pdf.IIndexBitmapConverter)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
      <param name="converter">
            External converter
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.TiffSettings)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="settings">
            Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffDevice.#ctor(Aspose.Pdf.PageSize)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" /> class.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffDevice.Width">
      <summary>
            Gets image output width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffDevice.Height">
      <summary>
            Gets image output height.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.TiffSettings">
      <summary>
            This class represents settings for importing pdf to Tiff.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffSettings.Margins">
      <summary>
            Gets the margins.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffSettings.SkipBlankPages">
      <summary>
            Gets or sets a value indicating whether to skip blank pages.
            </summary>
      <remarks>
            Default value is false
            </remarks>
      <value>
        <c>true</c> if need to skip blank pages; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffSettings.Compression">
      <summary>
            Gets or sets the type of the compression.
            </summary>
      <remarks>
            Default value is CompressionType.LZW
            </remarks>
      <value>The type of the compression.</value>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffSettings.Depth">
      <summary>
            Gets or sets the color depth.
            </summary>
      <remarks>
            Default value is ColorDepth.Default
            </remarks>
      <value>The color depth.</value>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffSettings.Shape">
      <summary>
            Gets or sets the type of the shape.
            </summary>
      <remarks>
            Default value is ShapeType.None
            </remarks>
      <value>The type of the shape.</value>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffSettings.#ctor(Aspose.Pdf.Devices.ShapeType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </summary>
      <param name="shapeType">Type of the shape.</param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffSettings.#ctor(Aspose.Pdf.Devices.CompressionType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </summary>
      <param name="compressionType">Type of the compression.</param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffSettings.#ctor(Aspose.Pdf.Devices.ColorDepth)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </summary>
      <param name="colorDepth">The color depth.</param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffSettings.#ctor(Aspose.Pdf.Devices.Margins)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </summary>
      <param name="margins">The margins.</param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffSettings.#ctor(Aspose.Pdf.Devices.CompressionType,Aspose.Pdf.Devices.ColorDepth,Aspose.Pdf.Devices.Margins)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </summary>
      <param name="compressionType">Type of the compression.</param>
      <param name="colorDepth">The color depth.</param>
      <param name="margins">The margins.</param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffSettings.#ctor(Aspose.Pdf.Devices.CompressionType,Aspose.Pdf.Devices.ColorDepth,Aspose.Pdf.Devices.Margins,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </summary>
      <param name="compressionType">Type of the compression.</param>
      <param name="colorDepth">The color depth.</param>
      <param name="margins">The margins.</param>
      <param name="skipBlankPages">if set to <c>true</c> need to skip blank pages.</param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffSettings.#ctor(Aspose.Pdf.Devices.CompressionType,Aspose.Pdf.Devices.ColorDepth,Aspose.Pdf.Devices.Margins,System.Boolean,Aspose.Pdf.Devices.ShapeType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </summary>
      <param name="compressionType">Type of the compression.</param>
      <param name="colorDepth">The color depth.</param>
      <param name="margins">The margins.</param>
      <param name="skipBlankPages">if set to <c>true</c> need to skip blank pages.</param>
      <param name="shapeType">Type of the shape.</param>
    </member>
    <member name="M:Aspose.Pdf.Devices.TiffSettings.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" /> class.
            </summary>
      <param name="skipBlankPages">if set to <c>true</c> [skip blank pages].</param>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffSettings.Brightness">
      <summary>
            Get or sets a value boundary of the transformation of colors in white and black.
            This parameter can be applied with EncoderValue.CompressionCCITT4, EncoderValue.CompressionCCITT3, EncoderValue.CompressionRle or ColorDepth.Format1bpp == 1
            </summary>
      <value>Value of brightness should be in the range from 0 to 1. By default value is equal to 0.33f</value>
    </member>
    <member name="P:Aspose.Pdf.Devices.TiffSettings.CoordinateType">
      <summary>
            Get or sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.        
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Devices.EmfDevice">
      <summary>
            Represents image device that helps to save pdf document pages into emf. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.EmfDevice.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.EmfDevice" /> class with default resolution of raster image written to emf.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.EmfDevice.#ctor(Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.EmfDevice" /> class.
            <param name="resolution">
            Resolution for the raster image written to emf, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param></summary>
    </member>
    <member name="M:Aspose.Pdf.Devices.EmfDevice.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.EmfDevice" /> class with provided image dimensions, 
            and default resolution for the raster image written to emf (=150)
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.EmfDevice.#ctor(Aspose.Pdf.PageSize)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.EmfDevice" /> class with provided page size, 
            and default resolution for the raster image written to emf (=150)
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.EmfDevice.#ctor(System.Int32,System.Int32,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided image dimensions, 
            and resolution for the raster image written to emf.
            </summary>
      <param name="width">
            Image output width.
            </param>
      <param name="height">
            Image output height.
            </param>
      <param name="resolution">
            Resolution for the for the raster image written to emf, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.EmfDevice.#ctor(Aspose.Pdf.PageSize,Aspose.Pdf.Devices.Resolution)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" /> class with provided page size, 
            and resolution for the raster image written to emf.
            </summary>
      <param name="pageSize">
            Page size of the output image.
            </param>
      <param name="resolution">
            Resolution for the for the raster image written to emf, see <see cref="T:Aspose.Pdf.Devices.Resolution" /> class.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Devices.EmfDevice.Process(Aspose.Pdf.Page,System.IO.Stream)">
      <summary>
            Converts the page into emf and saves it in the output stream.
            </summary>
      <param name="page">
            The page to convert.
            </param>
      <param name="output">
            Output stream with emf image.
            </param>
    </member>
    <member name="T:Aspose.Pdf.BaseParagraph">
      <summary>
            Represents a abstract base object can be added to the page(doc.Paragraphs.Add()).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BaseParagraph.VerticalAlignment">
      <summary>
            Gets or sets a vertical alignment of paragraph 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BaseParagraph.HorizontalAlignment">
      <summary>
            Gets or sets a horizontal alignment of paragraph 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BaseParagraph.Margin">
      <summary>
            Gets or sets a outer margin for paragraph (for pdf generation)
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BaseParagraph.IsFirstParagraphInColumn">
      <summary>
            Gets or sets a bool value that indicates whether this paragraph will be at next column.
            Default is false.(for pdf generation)
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BaseParagraph.IsKeptWithNext">
      <summary>
            Gets or sets a bool value that indicates whether current paragraph remains in the same page along with next paragraph.
            Default is false.(for pdf generation)
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BaseParagraph.IsInNewPage">
      <summary>
            Gets or sets a bool value that force this paragraph generates at new page.
            Default is false.(for pdf generation)
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BaseParagraph.IsInLineParagraph">
      <summary>
            Gets or sets a paragraph is inline.
            Default is false.(for pdf generation)
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BaseParagraph.Hyperlink">
      <summary>
            Gets or sets the fragment hyperlink(for pdf generator).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BaseParagraph.ZIndex">
      <summary>
            Gets or sets a int value that indicates the Z-order of the graph. A graph with larger ZIndex 
            will be placed over the graph with smaller ZIndex. ZIndex can be negative. Graph with negative 
            ZIndex will be placed behind the text in the page.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.BorderCornerStyle">
      <summary>
            Enumerates the border corner styles for border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderCornerStyle.None">
      <summary>
            None border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderCornerStyle.Round">
      <summary>
            Round border style.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.BorderInfo">
      <summary>
            This class represents border for graphics elements.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BorderInfo.Left">
      <summary>
            Gets or sets a object that indicates left of the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BorderInfo.Right">
      <summary>
            Gets or sets a object that indicates right of the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BorderInfo.Top">
      <summary>
            Gets or sets a object that indicates the top border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BorderInfo.Bottom">
      <summary>
            Gets or sets a object that indicates bottom of the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BorderInfo.RoundedBorderRadius">
      <summary>
            Gets or sets a rouded border radius
            </summary>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.#ctor(Aspose.Pdf.BorderSide,Aspose.Pdf.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (int)(BorderSide.Left | BorderSide.Top).</param>
      <param name="borderColor">The border color.</param>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.#ctor(Aspose.Pdf.BorderSide)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top).</param>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.#ctor(Aspose.Pdf.BorderSide,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top).</param>
      <param name="borderWidth">The width of the border.</param>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.#ctor(Aspose.Pdf.BorderSide,System.Single,Aspose.Pdf.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top).</param>
      <param name="borderWidth">The width of the border.</param>
      <param name="borderColor">The border color.</param>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.#ctor(Aspose.Pdf.BorderSide,Aspose.Pdf.GraphInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top).</param>
      <param name="info">The border info.</param>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.Clone">
      <summary>
            Clones a new BorderInfo object.
            </summary>
      <returns>The new BorderInfo object.</returns>
    </member>
    <member name="T:Aspose.Pdf.BorderSide">
      <summary>
            Enumerates the border sides.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.None">
      <summary>
            No border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.Left">
      <summary>
            Left border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.Top">
      <summary>
            Top border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.Right">
      <summary>
            Right border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.Bottom">
      <summary>
            Bottom border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.All">
      <summary>
            All sides borders.It has the same meaning when useing "Box" and will be replaced by "Box" one year later. So, please use "Box" if possible. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.Box">
      <summary>
            Four sides borders.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.FloatingBox">
            Represents a FloatingBox in a Pdf document. FloatingBox is custom positioned.
        </member>
    <member name="M:Aspose.Pdf.FloatingBox.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.FloatingBox" /> class with specified width and height.
            </summary>
      <param name="width">The width of the box.</param>
      <param name="height">The height of the box.</param>
    </member>
    <member name="M:Aspose.Pdf.FloatingBox.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.FloatingBox" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FloatingBox.ColumnInfo">
            Gets or sets a column info
        </member>
    <member name="P:Aspose.Pdf.FloatingBox.Width">
            Gets or sets a float value that indicates the width of the floating box.
        </member>
    <member name="P:Aspose.Pdf.FloatingBox.Height">
            Gets or sets a float value that indicates the height of the floating box.
        </member>
    <member name="P:Aspose.Pdf.FloatingBox.IsNeedRepeating">
            Gets or sets a bool value that indicates whether the paragraph need to be repeated on next page.
            Default value is false.The attribute is only valid when the paragraph itself and the object its ReferenceParagraphID referred to both are included in RepeatingRows.
        </member>
    <member name="P:Aspose.Pdf.FloatingBox.Paragraphs">
            Gets or sets a <see cref="P:Aspose.Pdf.FloatingBox.Paragraphs" /> collection that indicates all paragraphs in the cell.
        </member>
    <member name="P:Aspose.Pdf.FloatingBox.Border">
            Gets or sets a <see cref="T:Aspose.Pdf.BorderInfo" /> object that indicates the border info of the floating box.
        </member>
    <member name="P:Aspose.Pdf.FloatingBox.BackgroundColor">
            Gets or sets a <see cref="T:Aspose.Pdf.Color" /> object that indicates the background color of the 
            floating box.
        </member>
    <member name="P:Aspose.Pdf.FloatingBox.Padding">
            Gets or sets a <see cref="T:Aspose.Pdf.MarginInfo" /> object that indicates the padding of the floating box.
        </member>
    <member name="P:Aspose.Pdf.FloatingBox.Left">
      <summary>
            Gets or sets the table left coordinate.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FloatingBox.Top">
      <summary>
            Gets or sets the table top coordinate.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.FloatingBox.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.FloatingBox" /> object. Paragraphs in the floating box are not cloned.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.FloatingBox" /> object.</returns>
    </member>
    <member name="T:Aspose.Pdf.HeaderFooter">
      <summary>
            Class represents header or footer pdf page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HeaderFooter.Paragraphs">
      <summary>
            Gets or sets the end note paragraphs.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HeaderFooter.Margin">
      <summary>
            Gets or sets the margin info.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.HeaderFooter.Clone">
      <summary>
            Clones a new object.
            </summary>
      <returns>The new object.</returns>
    </member>
    <member name="T:Aspose.Pdf.Heading">
      <summary>
            Represents heading.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Heading.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the Cell class.
            </summary>
      <param name="level">The headings level.</param>
    </member>
    <member name="P:Aspose.Pdf.Heading.TocPage">
      <summary>
            Gets the page that contains this heading.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.Top">
      <summary>
            Gets the top Y of this headings.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.StartNumber">
      <summary>
            Gets the heading start number.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.IsAutoSequence">
      <summary>
            Gets the heading should be numered automatically.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.IsInList">
      <summary>
            Gets the heading should be in toc list.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.DestinationPage">
      <summary>
            Gets the destination page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.Level">
      <summary>
            Gets the level.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.Style">
      <summary>
            Gets or sets style.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.UserLabel">
      <summary>
            Gets or sets user label.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Heading.Clone">
      <summary>
            Clone the heading.
            </summary>
      <returns>The cloned object</returns>
    </member>
    <member name="M:Aspose.Pdf.Heading.CloneWithSegments">
      <summary>
            Clone the heading with all segments.
            </summary>
      <returns>The cloned object</returns>
    </member>
    <member name="T:Aspose.Pdf.Hyperlink">
      <summary>
            Represents abstract hyperlink.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Image">
      <summary>
            Represents image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.File">
      <summary>
            Gets or sets the image file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.FixWidth">
      <summary>
            Gets or sets the image width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.FixHeight">
      <summary>
            Gets or sets the image height.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.FileType">
      <summary>
            Gets or sets the image file type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.ImageScale">
      <summary>
            Gets or sets the image scale.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.ImageStream">
      <summary>
            Gets or sets the image stream.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.IsApplyResolution">
      <summary>
            Gets or sets a bool value that indicates whether the image use resolution during generation
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.IsBlackWhite">
      <summary>
            Gets or sets a bool value that indicates whether the image is forced to be black-and-white. If TIFF 
            image of CCITT subformat is used, this property must be set to true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.Title">
      <summary>
            Gets or sets a string value that indicates the title of the image.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Image.Clone">
      <summary>
            Clone the image.
            </summary>
      <returns>The cloned object</returns>
    </member>
    <member name="T:Aspose.Pdf.LevelFormat">
      <summary>
            Represents format of the table of contents.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LevelFormat.LineDash">
      <summary>
            Gets or sets TOC line dash.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LevelFormat.Margin">
      <summary>
            Gets or sets a list level margin 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LevelFormat.SubsequentLinesIndent">
      <summary>
            Gets or sets a subsequent lines indent 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LevelFormat.TextState">
      <summary>
            Gets or sets a list level text state 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.MarginInfo">
      <summary>
            This class represents a margin for different objects.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.MarginInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.MarginInfo" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.MarginInfo.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Constructor of Rectangle.
            </summary>
      <param name="left">Left margin.</param>
      <param name="bottom">Bottom margin</param>
      <param name="right">Right margin.</param>
      <param name="top">Top margin.</param>
    </member>
    <member name="P:Aspose.Pdf.MarginInfo.Left">
      <summary>
            Gets or sets a float value that indicates the left margin.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.MarginInfo.Right">
      <summary>
            Gets or sets a float value that indicates the right margin.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.MarginInfo.Top">
      <summary>
            Gets or sets a float value that indicates the top margin.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.MarginInfo.Bottom">
      <summary>
            Gets or sets a float value that indicates the bottom margin.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.MarginInfo.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.MarginInfo" /> object.
            </summary>
      <returns>The new object.</returns>
    </member>
    <member name="T:Aspose.Pdf.PageInfo">
      <summary>
            Represents the page information.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageInfo.Clone">
      <summary>
            Clone page info.
            </summary>
      <returns>The cloned object</returns>
    </member>
    <member name="P:Aspose.Pdf.PageInfo.DefaultTextState">
      <summary>
            Gets or sets default font.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageInfo.Height">
      <summary>
            Gets or sets page height.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageInfo.PureHeight">
      <summary>
            Gets or sets page pure height without margins.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageInfo.IsLandscape">
      <summary>
            Gets or sets is page landscaped.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageInfo.Margin">
      <summary>
            Gets or sets page margin.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageInfo.Width">
      <summary>
            Gets or sets page width.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Paragraphs">
      <summary>
            This class represents paragraph collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.Add(Aspose.Pdf.BaseParagraph)">
      <summary>
            Add paragraph to collection.
            </summary>
      <param name="paragraph">The paragraph.</param>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.GetRange(System.Int32,System.Int32)">
      <summary>
            Remove paragraphs range.
            </summary>
      <param name="index">The first paragraph index.</param>
      <param name="count">The paragraphs count.</param>
      <returns>The paragraphs collection</returns>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Remove paragraphs range.
            </summary>
      <param name="index">The first paragraph index.</param>
      <param name="count">The paragraphs count.</param>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.Remove(Aspose.Pdf.BaseParagraph)">
      <summary>
            Remove paragraph from collection.
            </summary>
      <param name="paragraph">The paragraph.</param>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.Insert(System.Int32,Aspose.Pdf.BaseParagraph)">
      <summary>
            Insert paragraph to collection.
            </summary>
      <param name="index">The index for paragraph.</param>
      <param name="paragraph">The paragraph.</param>
    </member>
    <member name="P:Aspose.Pdf.Paragraphs.Count">
      <summary>
            Get paragraphs count.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.Clear">
      <summary>
            Clear paragraphs.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Paragraphs.Item(System.Int32)">
      <summary>
            Gets or sets paragraph from or to collection.
            </summary>
      <param name="index">The paragraph index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.Clone">
      <summary>
            Clones a new <see cref="M:Aspose.Pdf.Paragraphs.Clone" /> object.
            </summary>
      <returns>The new <see cref="M:Aspose.Pdf.Paragraphs.Clone" /> object.</returns>
    </member>
    <member name="T:Aspose.Pdf.TocInfo">
      <summary>
            Represents table of contents info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TocInfo.ColumnInfo">
      <summary>
            Gets or sets column info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TocInfo.FormatArray">
      <summary>
            Gets or sets format array for table of contents.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TocInfo.FormatArrayLength">
      <summary>
            Gets or sets format array length
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TocInfo.Title">
      <summary>
            Gets or sets table of contents title.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TocInfo.IsCountTocPages">
      <summary>
            Gets or sets is count or passed toc pages.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:Aspose.Pdf.TocInfo.IsShowPageNumbers" -->
    <member name="P:Aspose.Pdf.TocInfo.LineDash">
      <summary>
            Gets or sets TOC line dash.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.TocInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.TocInfo" /> class.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.WebHyperlink">
      <summary>
            Represents web hyperlink object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.WebHyperlink.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.WebHyperlink" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.WebHyperlink.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.WebHyperlink" /> class.
            </summary>
      <param name="url">Web url for hyperlink.</param>
    </member>
    <member name="P:Aspose.Pdf.WebHyperlink.Url">
      <summary>
            Gets or sets the web url.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Layer">
      <summary>
            Represents page layer.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Layer.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Layer" /> class.
            </summary>
      <param name="id">The layer id</param>
      <param name="name">The layer name</param>
    </member>
    <member name="P:Aspose.Pdf.Layer.Name">
      <summary>
            Gets the layer name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Layer.Id">
      <summary>
            Gets the layer id.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Layer.Contents">
      <summary>
            Gets the layer content.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.MobiXmlSaveOptions">
      <summary>
            Save options for export to Xml format
            </summary>
    </member>
    <member name="T:Aspose.Pdf.DestinationCollection">
      <summary>
            Class represents the collection of all destinations (a name tree mapping name strings to destinations (see 12.3.2.3, "Named Destinations") and (see 7.7.4, "Name Dictionary")) in the pdf document. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DestinationCollection.Item(System.Int32)">
      <summary>
            Gets the destination object by index.
            </summary>
      <param name="index">The index of destination to get.</param>
      <returns>Destination.</returns>
    </member>
    <member name="M:Aspose.Pdf.DestinationCollection.GetPageNumber(System.String,System.Boolean)">
      <summary>
            Returns the page number of destination by the name.
            </summary>
      <param name="destinameName">The name of destination.</param>
      <param name="useCache">Determines whether cached version of collection is used or not.</param>
      <returns>The page number if destination was found; otherwise, -1.</returns>
    </member>
    <member name="M:Aspose.Pdf.DestinationCollection.GetExplicitDestination(System.String,System.Boolean)">
      <summary>
            Returns the explicit destination by the name.
            </summary>
      <param name="destinameName">The name of destination.</param>
      <param name="useCache">Determines whether cached version of collection is used or not.</param>
      <returns>The ExplicitDestination object for destination found; otherwise, null.</returns>
    </member>
    <member name="M:Aspose.Pdf.DestinationCollection.GetEnumerator">
      <summary>
            Returns the enumerator.
            </summary>
      <returns>The enumerator.</returns>
    </member>
    <member name="M:Aspose.Pdf.DestinationCollection.IndexOf(System.Object)">
      <summary>
            Returns the index of destination in collection.
            </summary>
      <param name="value">The value to find.</param>
      <returns>The index of destination in collection.</returns>
    </member>
    <member name="M:Aspose.Pdf.DestinationCollection.Contains(System.Object)">
      <summary>
            Determines whether a destination is in collection or not.
            </summary>
      <param name="value">The value to find.</param>
      <returns>True if a destination is in collection; otherwise, false.</returns>
    </member>
    <member name="T:Aspose.Pdf.NumberingStyle">
      <summary>
            Enumeration of supported page numbering style for PageLabel class.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingStyle.NumeralsArabic">
      <summary>
            Arabic decimal numbers.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingStyle.NumeralsRomanUppercase">
      <summary>
            Uppercase roman numbers (I, II, III...).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingStyle.NumeralsRomanLowercase">
      <summary>
            Lowercase roman numbers (i, ii, iii...).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingStyle.LettersUppercase">
      <summary>
            Uppercase latin letters (A, B, C...).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingStyle.LettersLowercase">
      <summary>
            Lowercase latin letters (a, b, c...).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingStyle.None">
      <summary>
            No numbering.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PageActionCollection">
      <summary>
            This class describes page actions
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageActionCollection.OnOpen">
      <summary>
            An action that shall be performed when the page is opened.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageActionCollection.OnClose">
      <summary>
            An action that shall be performed when the page is closed.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PageCoordinateType">
      <summary>
            Describes page coordinate type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageCoordinateType.MediaBox">
      <summary>
            The MediaBox is used to specify the width and height of the page. 
            For the average user, this probably equals the actual page size. 
            The MediaBox is the largest page box in a PDF. The other page boxes can equal the 
            size of the MediaBox but they cannot be larger.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageCoordinateType.CropBox">
      <summary>
            The CropBox defines the region to which the page contents are to be clipped. 
            Acrobat uses this size for screen display and printing.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PageLabel">
      <summary>
            Class representing Page Label range.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageLabel.StartingValue">
      <summary>
            Gets or sets starting value of the page numbering range.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageLabel.NumberingStyle">
      <summary>
            Gets or sets numbering style. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageLabel.Prefix">
      <summary>
            Gets or sets page number prefix.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageLabel.#ctor">
      <summary>
            Constructor for page label. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PageLabelCollection">
      <summary>
            Class represeingting page label collection. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageLabelCollection.GetLabel(System.Int32)">
      <summary>
            Gets page label by page index (page index is started from 0).
            </summary>
      <param name="pageIndex">Index of the page.</param>
      <returns>Page label for specified page index or null if page label does not exist.</returns>
    </member>
    <member name="M:Aspose.Pdf.PageLabelCollection.UpdateLabel(System.Int32,Aspose.Pdf.PageLabel)">
      <summary>
            Update label for given page index (page index is started from 0).
            </summary>
      <param name="pageIndex">Index of page to change lable of the page.</param>
      <param name="pageLabel">New label of the page.</param>
    </member>
    <member name="M:Aspose.Pdf.PageLabelCollection.RemoveLabel(System.Int32)">
      <summary>
            Remove label by page index (page index is started from 0).
            </summary>
      <param name="pageIndex">Index of page where label must be deleted.</param>
      <returns>true if operation was executed successfully.</returns>
    </member>
    <member name="M:Aspose.Pdf.PageLabelCollection.GetPages">
      <summary>
            Gets page indexes in collection.
            </summary>
      <returns>Array of integers which contains indexes of the pages.</returns>
    </member>
    <member name="T:Aspose.Pdf.PageSize">
      <summary>
            Class representing size of page in PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.Width">
      <summary>
            Gets or sets page width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.Height">
      <summary>
            Gets or sets page height.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.IsLandscape">
      <summary>
            Gets page orientation. Returns true of this is landscape orientation and false if this is portrait. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.A0">
      <summary>
            A0 size (1189x840 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.A1">
      <summary>
            A1 size (840x594 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.A2">
      <summary>
            A2 size (594x420 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.A3">
      <summary>
            A3 size (420x297 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.A4">
      <summary>
            A4 size (297x210 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.A5">
      <summary>
            A5 size (210x148 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.A6">
      <summary>
            A6 size (148x105 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.B5">
      <summary>
            B5 size (250x176 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.PageLetter">
      <summary>
            Letter size (279x216 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.PageLegal">
      <summary>
            Legal size (356x216 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.PageLedger">
      <summary>
            Ledger size (432x279 mm).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSize.P11x17">
      <summary>
            11x17 inches format.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageSize.#ctor(System.Single,System.Single)">
      <summary>
            Constructor for PageSize.
            </summary>
      <param name="x">Width of the page.</param>
      <param name="y">Height of the page.</param>
    </member>
    <member name="T:Aspose.Pdf.CompositingParameters">
      <summary>
            Represents an object containing graphics compositing parameters of current graphics state.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.CompositingParameters.#ctor(Aspose.Pdf.BlendMode)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.CompositingParameters" /> object.
            </summary>
      <param name="blendMode">Blend mode of current graphics state.</param>
    </member>
    <member name="M:Aspose.Pdf.CompositingParameters.#ctor(Aspose.Pdf.BlendMode,Aspose.Pdf.ImageFilterType)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.CompositingParameters" /> object.
            </summary>
      <param name="blendMode">Blend mode of current graphics state.</param>
      <param name="filterType">The image filter type.</param>
    </member>
    <member name="M:Aspose.Pdf.CompositingParameters.#ctor(Aspose.Pdf.BlendMode,Aspose.Pdf.ImageFilterType,System.Boolean)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.CompositingParameters" /> object.
            </summary>
      <param name="blendMode">Blend mode of current graphics state.</param>
      <param name="filterType">The image filter type.</param>
      <param name="isMasked">The adding mask flag.</param>
    </member>
    <member name="P:Aspose.Pdf.CompositingParameters.BlendMode">
      <summary>
            Gets blend mode of current graphics state.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.CompositingParameters.FilterType">
      <summary>
            Gets the image filter type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.CompositingParameters.IsMasked">
      <summary>
            Gets the mask flag.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.BlendMode">
      <summary>
            The blend modes enumeration.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Normal">
      <summary>
            Normal blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Multiply">
      <summary>
            Multiply blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Screen">
      <summary>
            Screen blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Overlay">
      <summary>
            Overlay blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Darken">
      <summary>
            Darken blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Lighten">
      <summary>
            Lighten blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.ColorDodge">
      <summary>
            ColorDodge blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.ColorBurn">
      <summary>
            ColorBurn blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.HardLight">
      <summary>
            HardLight blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.SoftLight">
      <summary>
            SoftLight blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Difference">
      <summary>
            Difference blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Exclusion">
      <summary>
            Exclusion blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Hue">
      <summary>
            Hue blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Saturation">
      <summary>
            Saturation blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Color">
      <summary>
            Color blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Luminosity">
      <summary>
            Luminosity blend mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BlendMode.Compatible">
      <summary>
            Compatible blend mode.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.InvalidFormTypeOperationException">
      <summary>
            The exception that is thrown when an operation with form type is not valid.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InvalidFormTypeOperationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidFormTypeOperationException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.InvalidFormTypeOperationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidFormTypeOperationException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.InvalidFormTypeOperationException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidFormTypeOperationException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:Aspose.Pdf.InvalidCgmFileFormatException">
      <summary>
            The exception that is thrown when a Cgm file is invalid.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.InvalidCgmFileFormatException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidCgmFileFormatException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Aspose.Pdf.InvalidCgmFileFormatException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidCgmFileFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Aspose.Pdf.InvalidCgmFileFormatException.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidCgmFileFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:Aspose.Pdf.BuildVersionInfo">
      <summary>
            This class provides information about current product build.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BuildVersionInfo.AssemblyVersion">
      <summary>
            Assembly Version
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BuildVersionInfo.Product">
      <summary>
            Product Name
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BuildVersionInfo.FileVersion">
      <summary>
            File Version
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Color">
      <summary>
            Represents class for color value which can be expressed in different color space.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Color.Empty">
      <summary>
            Represents empty color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Color.A">
      <summary>
            Gets the alpha component value
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Color.Data">
      <summary>
            Gets color value.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Color.ColorSpace">
      <summary>
            Gets color space that the color represents.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Color.Parse(System.String)">
      <summary>
            Extracts color components from the string.
            </summary>
      <param name="value">
            String value with color component values.
            </param>
      <returns>
            Color object.
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Color.ToString">
      <summary>
            Converts to string.
            </summary>
      <returns>
            String representation of the Color object.
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Color.ToRgb">
      <summary>
            Converts color into rgb.
            </summary>
      <returns>
            Rgb color value.
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Color.FromRgb(System.Drawing.Color)">
      <summary>
            Gets valid pdf Color object from System.Drawing.Color value.
            </summary>
      <param name="color">
            System.Drawing.Color value.
            </param>
      <returns>
            Color object with each component value in [0..1] range.
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Color.FromArgb(System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets valid pdf Color object from RGB color components.
            </summary>
      <param name="r">
            The Red color component (value 0 - 255).
            </param>
      <param name="g">
            The Green color component (value 0 - 255).
            </param>
      <param name="b">
            The Blue color component (value 0 - 255).
            </param>
      <returns>
            Color object with each component value in [0..255] range.
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Color.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets valid pdf Color object from RGB color components.
            </summary>
      <param name="a">
            The alpha component value (value 0 - 255).
            </param>
      <param name="r">
            The Red color component (value 0 - 255).
            </param>
      <param name="g">
            The Green color component (value 0 - 255).
            </param>
      <param name="b">
            The Blue color component (value 0 - 255).
            </param>
      <returns>
            Color object with each component value in [0..255] range.
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Color.FromRgb(System.Double,System.Double,System.Double)">
      <summary>
            Gets valid pdf Color object from RGB color components.
            </summary>
      <param name="r">
            The Red color component (value 0 - 1).
            </param>
      <param name="g">
            The Green color component (value 0 - 1).
            </param>
      <param name="b">
            The Blue color component (value 0 - 1).
            </param>
      <returns>
            Color object with each component value in [0..1] range.
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Color.FromGray(System.Double)">
      <summary>
            Gets valid pdf Color object from Gray color component.
            </summary>
      <param name="g">
            The Gray color component (value 0 - 1).
            </param>
      <returns>
            Color object with each component value in [0..1] range.
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Color.FromCmyk(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Gets valid pdf Color object from RGB color components.
            </summary>
      <param name="c">
            The Cyan color component (value 0 - 1).
            </param>
      <param name="m">
            The Magenta color component (value 0 - 1).
            </param>
      <param name="y">
            The Yellow color component (value 0 - 1).
            </param>
      <param name="k">
            The Key color component (value 0 - 1).
            </param>
      <returns>
            Color object with each component value in [0..1] range.
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Color.Equals(System.Object)">
      <summary>
            Returns true if two Colors are equal.
            </summary>
      <param name="obj">Object to compare.</param>
      <returns>True in case Color objects are equal.</returns>
    </member>
    <member name="M:Aspose.Pdf.Color.op_Equality(Aspose.Pdf.Color,Aspose.Pdf.Color)">
      <summary>
            Returns true if two Colors are equal.
            </summary>
      <param name="x">First Color object.</param>
      <param name="y">Second Color object.</param>
      <returns>True in case Color objects are equal.</returns>
    </member>
    <member name="M:Aspose.Pdf.Color.op_Inequality(Aspose.Pdf.Color,Aspose.Pdf.Color)">
      <summary>
            Returns true if two Colors are not equal.
            </summary>
      <param name="x">First Color object.</param>
      <param name="y">Second Color object.</param>
      <returns>True in case Color objects are not equal.</returns>
    </member>
    <member name="P:Aspose.Pdf.Color.PatternColorSpace">
      <summary>
            Represents a object that indicates the pattern colorspace.        
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Color.Transparent">
      <summary>
            Gets a system-defined color.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.AliceBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF0F8FF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.AntiqueWhite">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFAEBD7.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Aqua">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF00FFFF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Aquamarine">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF7FFFD4.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Azure">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF0FFFF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Beige">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF5F5DC.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Bisque">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFE4C4.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Black">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF000000.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.BlanchedAlmond">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFEBCD.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Blue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF0000FF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.BlueViolet">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF8A2BE2.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Brown">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFA52A2A.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.BurlyWood">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFDEB887.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.CadetBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF5F9EA0.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Chartreuse">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF7FFF00.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Chocolate">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFD2691E.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Coral">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFF7F50.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.CornflowerBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF6495ED.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Cornsilk">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFF8DC.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Crimson">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFDC143C.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Cyan">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF00FFFF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF00008B.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkCyan">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF008B8B.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkGoldenrod">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFB8860B.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkGray">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFA9A9A9.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF006400.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkKhaki">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFBDB76B.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkMagenta">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF8B008B.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkOliveGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF556B2F.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkOrange">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFF8C00.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkOrchid">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF9932CC.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkRed">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF8B0000.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkSalmon">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFE9967A.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkSeaGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF8FBC8F.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkSlateBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF483D8B.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkSlateGray">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF2F4F4F.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkTurquoise">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF00CED1.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DarkViolet">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF9400D3.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DeepPink">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFF1493.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DeepSkyBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF00BFFF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DimGray">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF696969.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.DodgerBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF1E90FF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Firebrick">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFB22222.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.FloralWhite">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFAF0.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.ForestGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF228B22.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Fuchsia">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFF00FF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Gainsboro">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFDCDCDC.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.GhostWhite">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF8F8FF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Gold">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFD700.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Goldenrod">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFDAA520.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Gray">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF808080.
            </summary>
      <returns>
            A  strcture representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Green">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF008000.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.GreenYellow">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFADFF2F.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Honeydew">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF0FFF0.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.HotPink">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFF69B4.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.IndianRed">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFCD5C5C.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Indigo">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF4B0082.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Ivory">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFFF0.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Khaki">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF0E68C.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Lavender">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFE6E6FA.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LavenderBlush">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFF0F5.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LawnGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF7CFC00.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LemonChiffon">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFACD.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFADD8E6.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightCoral">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF08080.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightCyan">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFE0FFFF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightGoldenrodYellow">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFAFAD2.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF90EE90.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightGray">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFD3D3D3.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightPink">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFB6C1.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightSalmon">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFA07A.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightSeaGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF20B2AA.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightSkyBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF87CEFA.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightSlateGray">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF778899.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightSteelBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFB0C4DE.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LightYellow">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFFE0.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Lime">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF00FF00.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.LimeGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF32CD32.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Linen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFAF0E6.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Magenta">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFF00FF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Maroon">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF800000.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MediumAquamarine">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF66CDAA.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MediumBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF0000CD.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MediumOrchid">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFBA55D3.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MediumPurple">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF9370DB.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MediumSeaGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF3CB371.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MediumSlateBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF7B68EE.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MediumSpringGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF00FA9A.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MediumTurquoise">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF48D1CC.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MediumVioletRed">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFC71585.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MidnightBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF191970.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MintCream">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF5FFFA.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.MistyRose">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFE4E1.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Moccasin">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFE4B5.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.NavajoWhite">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFDEAD.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Navy">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF000080.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.OldLace">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFDF5E6.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Olive">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF808000.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.OliveDrab">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF6B8E23.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Orange">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFA500.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.OrangeRed">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFF4500.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Orchid">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFDA70D6.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.PaleGoldenrod">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFEEE8AA.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.PaleGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF98FB98.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.PaleTurquoise">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFAFEEEE.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.PaleVioletRed">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFDB7093.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.PapayaWhip">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFEFD5.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.PeachPuff">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFDAB9.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Peru">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFCD853F.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Pink">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFC0CB.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Plum">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFDDA0DD.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.PowderBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFB0E0E6.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Purple">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF800080.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Red">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFF0000.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.RosyBrown">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFBC8F8F.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.RoyalBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF4169E1.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.SaddleBrown">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF8B4513.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Salmon">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFA8072.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.SandyBrown">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF4A460.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.SeaGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF2E8B57.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.SeaShell">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFF5EE.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Sienna">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFA0522D.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Silver">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFC0C0C0.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.SkyBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF87CEEB.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.SlateBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF6A5ACD.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.SlateGray">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF708090.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Snow">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFAFA.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.SpringGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF00FF7F.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.SteelBlue">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF4682B4.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Tan">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFD2B48C.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Teal">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF008080.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Thistle">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFD8BFD8.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Tomato">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFF6347.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Turquoise">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF40E0D0.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Violet">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFEE82EE.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Wheat">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF5DEB3.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.White">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFFFF.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.WhiteSmoke">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFF5F5F5.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.Yellow">
      <summary>
            Gets a system-defined color that has an ARGB value of #FFFFFF00.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <member name="P:Aspose.Pdf.Color.YellowGreen">
      <summary>
            Gets a system-defined color that has an ARGB value of #FF9ACD32.
            </summary>
      <returns>
            A  representing a system-defined color.
            </returns>
    </member>
    <!-- Badly formed XML comment ignored for member "T:Aspose.Pdf.HtmlConverter.HtmlLinkedResourcesSaver" -->
    <member name="T:Aspose.Pdf.HtmlDocumentType">
      <summary>
            Represents enumeration of the Html document types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlDocumentType.Xhtml">
      <summary>
            The XHtml Document Type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlDocumentType.Html5">
      <summary>
            The HTML5 Document Type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions">
      <summary>
            Save options for export to Html format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.CustomProgressHandler">
      <summary>
              This handler can be used to handle conversion progress events
              f.e. it can be used to show progress bar or messages about current amount
              of processed  pages, example of handler's code that shows progress on console is :
             </summary>
      <example>
        <code>
              public static void ConvertWithShowingProgress()
            {
                (new Aspose.Pdf.License()).SetLicense(@"F:\_Sources\Aspose_5\trunk\testdata\License\Aspose.Total.lic");
                Document doc = new Document(@"F:\ExternalTestsData\Booklet.pdf");
                HtmlSaveOptions saveOptions = new HtmlSaveOptions();
                saveOptions.CustomProgressHandler = new HtmlSaveOptions.ConversionProgressEventHandler(ShowProgressOnConsole);
                doc.Save(@"F:\ExternalTestsData\Booklet.doc", saveOptions);
                Console.ReadLine();
            }
            public static void ShowProgressOnConsole(HtmlSaveOptions.ProgressEventHandlerInfo eventInfo)
            {
                switch (eventInfo.EventType)
                {
                    case HtmlSaveOptions.ProgressEventType.TotalProgress:
                        Console.WriteLine(string.Format("{0}  - Conversion progress : {1}% .", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString()));
                        break;
                    case HtmlSaveOptions.ProgressEventType.SourcePageAnalized:
                        Console.WriteLine(string.Format("{0}  - Source page {1} of {2} analyzed.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString()));
                        break;
                    case HtmlSaveOptions.ProgressEventType.ResultPageCreated:
                        Console.WriteLine(string.Format("{0}  - Result page's {1} of {2} layout created.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString()));
                        break;
                    case HtmlSaveOptions.ProgressEventType.ResultPageSaved:
                        Console.WriteLine(string.Format("{0}  - Result page {1} of {2} exported.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString()));
                        break;
                    default:
                        break;
                }
             }
             </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions.FontSavingModes">
      <summary>
             Enumerates modes that can be used for saving of fonts
             referenced in saved PDF 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.FontSavingModes.AlwaysSaveAsWOFF">
      <summary>
             All referenced fonts will be saved and referenced as WOFF-fonts
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.FontSavingModes.AlwaysSaveAsTTF">
      <summary>
             All referenced fonts will be saved and referenced as TTF-fonts
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.FontSavingModes.AlwaysSaveAsEOT">
      <summary>
             All referenced fonts will be saved and referenced as EOT-fonts
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.FontSavingModes.SaveInAllFormats">
      <summary>
             All referenced fonts will be saved (and referenced in CSS) as 3 independent files : EOT, TTH,WOFF.
              It increases size of output data but makes output sutable for overhelming majority of web brawsers 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions.AntialiasingProcessingType">
      <summary>
            This enum describes possible antialiasing measures during conversion
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.AntialiasingProcessingType.NoAdditionalProcessing">
      <summary>
            no special antialiasing processing in use. This is an optimal option 
            for overhelming majority of documents and it does not require additional time
            during conversion
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "F:Aspose.Pdf.HtmlSaveOptions.AntialiasingProcessingType.TryCorrectResultHtml" -->
    <member name="F:Aspose.Pdf.HtmlSaveOptions.AntialiasingProcessing">
      <summary>
            This parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.SaveTransparentTexts">
      <summary>
              Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it).
              This settings tells to converter whether we need save such texts as transparent
              selectable texts in result HTML
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.SaveShadowedTextsAsTransparentTexts">
      <summary>
              Pdf can contain texts that are shadowed by another elements (f.e. by images) but 
              can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it).
              This settings tells to converter whether we need save such texts as transparent
              selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard)
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.FontSavingMode">
      <summary>
             Defines font saving mode that will be used during saving of PDF to desirable format
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions.CssSavingInfo">
      <summary>
              This class represents set of data 
              that related to custom saving of CSS  during conversion
              of PDF to HTML format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.CssSavingInfo.CssNumber">
      <summary>
             Set by converter.
             During conversion several CSS-files are created . This properties shows ordinal
             of saved CSS-file during conversion.
             It can be used in logic of custom code to decide how to process or where to save CSS content
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.CssSavingInfo.SupposedURL">
      <summary>
             Set by converter.
             Supposed file name that goes from converter to code of custom method
             Can be used in custom code to decide how to process or where to save content
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.CssSavingInfo.ContentStream">
      <summary>
               Set by converter.
               Represents binary content of saved CSS  
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions.HtmlPageMarkupSavingInfo">
      <summary>
             If SplitToPages property of HtmlSaveOptions, then several HTML-files (one HTML file per converted page)
             are created during conversion of PDF to HTML. 
              This class represents set of data  that related to custom saving of one HTML-page's markup 
              during conversion of PDF to HTML 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlPageMarkupSavingInfo.SupposedFileName">
      <summary>
             Set by converter.
             Supposed file name that goes from converter to code of custom method
             Can be used in custom code to decide how to process or where to save content
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlPageMarkupSavingInfo.ContentStream">
      <summary>
               Set by converter.
               Represents saved HTML as stream
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlPageMarkupSavingInfo.PdfHostPageNumber">
      <summary>
             Set by converter.
              If SplitToPages property set, then several HTML-files(one HTML file per converted page)
             are created during conversion  created .
               This property tells to custom code from what page of original PDF was created saved HTML-markup.
              If original page number for some reason is inknown or SplitOnPages=false,then this property allways contains '0'
              that signals that converter cannot supply exact original PDF's page number for supplied HTML-markup file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlPageMarkupSavingInfo.HtmlHostPageNumber">
      <summary>
             Set by converter.
              If set SplitToPages property, then several HTML-files(one HTML file per converted page)
             are created during conversion  created . This property contains ordinal of saved HTML page's file.
              The property can be used in logic of custom code
             to decide how to process or where to save HTML page and 
               If splitting on pages turned off this value always contains '1'
              since in such case  only one big HTML page is generated
              for whole source document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlPageMarkupSavingInfo.CustomProcessingCancelled">
      <summary>
              Should be set in custom code when necessary.
               This flag must be set to "true" in custom code if for some reasons
               supplied html-markup should be processed not with custom code but 
               with converter's code itself in standard for converter way. 
               So, setting if this flag in custom code  means that
               custom code did not process referenced file and 
               converter must handle it itself 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions.CssUrlRequestInfo">
      <summary>
              Represents set of data 
              that related to request from converter to 
               custom code aimed to get desirable URL (or URL template)of subject CSS 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.CssUrlRequestInfo.CustomProcessingCancelled">
      <summary>
               Should be set by custom code if it cannot or should not define URL that 
               will be used in generated HTML for referencing of that CSS.
                 If it's 'true', then CSS file will be saved in standard way in standard place. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.PageBorderIfAny">
      <summary>
              This attribute represents set of settings used for drawing border (if any)
              in result HTML document around area that represent source PDF page.
              In essence it concerns of showing of page's paper edges,
              not page border referenced in PDF page itself. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions.LettersPositioningMethods">
      <summary>
              It enumerates possible modes of positioning of letters in words in result HTML
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.LettersPositioningMethods.UseEmUnitsAndCompensationOfRoundingErrorsInCss">
      <summary>
              It's default method. It uses EM-units and special alhorithm of compensation of rounding errors
              It's preferable for usage in IE10.0 and more fresh versions and gives better scaling of captions when scaling is necessary
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.LettersPositioningMethods.UsePixelUnitsInCssLetterSpacingForIE">
      <summary>
              It allows to get sometimes more precise results in old IE browser versions
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.LettersPositioningMethod">
      <summary>
              Sets mode of positioning of letters in words in result HTML
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions.HtmlImageSavingInfo">
      <summary>
              This class represents set of data 
              that related to external resource image file's saving
              during PDF to HTML conversion.  
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlImageSavingInfo.ImageType">
      <summary>
             Represents type of saved image referenced in HTML.
             Set by converter and can be used in custom code 
             to decide what should be done
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlImageSavingInfo.ParentType">
      <summary>
               Saved image can pertain to HTML itself or can be extracted.
             from SVG embedded to HTML. 
             This property can tell to custom code what's that type of parent of processed image.  
              It set by converter and can be used in custom code 
             to decide what should be done with that image 
              (f.e. custom code can decide where to save image
              or how it must be referenced in parent's content).
             
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlImageSavingInfo.PdfHostPageNumber">
      <summary>
               Tells to custom code to what page of original PDF document pertains saved image
               Since it's possible that will be saved not all pages of original document,
               this value tells us about host page number in original PDF. If original page number for some reason
               is inknown, it allways return '1'
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlImageSavingInfo.HtmlHostPageNumber">
      <summary>
               Tells to custom code to what page of generated set of HTML page-files pertains saved image.
               If splitting on pages turned off this value always contains '1' since in such case 
               Only one HTML page is generated.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions.ResourceSavingStrategy">
      <summary>
               To this property You can  assign delegate created from custom method that implements processing 
               of external resource(Font or Image)
               that was extracted from PDF and must be saved as external resource during conversion of PDF to HTML.
                In such case  processing (like saving in stream or disk)
              can be done in that custom code and that custom code must return path(or any another string without quotemarks)
                that will be afterwards incorporated into generated HTML instead of original supposed path to that image resource. 
             In such case All the necessary actions for saving of image must be undertaken
             in code of supplied method, because saving of result in code of converter will be not in use  . 
               If processing for this or that file for some reason must be done by converter's code itself, not in custom code,
               please set in custom code flag 'CustomProcessingCancelled' of 'resourceSavingInfo' parameter's variable
                 It signals to converter that all the necessary steps for processing of that resource 
                 must be done in converter itself as if there was no any external custom code .
            </summary>
      <param name="resourceSavingInfo"> represents set of data for saving of resource</param>
      <returns> must return URL to saved resource that will be used during generation of HTML </returns>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions.HtmlPageMarkupSavingStrategy">
      <summary>
              Result of conversion can contain one or several HTML-pages ( that also can reference external files like images or fonts)
               You can  assign to this property delegate created from custom method that implements processing 
               of got HTML-page(HTML itself) that was created during conversion.
                In such case  processing (like saving in stream or disk) can be done in that custom code . 
             In such case All the necessary actions for saving of HTML page's markup must be undertaken
             in code of supplied method, because saving of result in code of converter will be not in use. 
               If processing for this or that case for some reason must be done by converter's code itself,
             not in custom code, please set in custom code flag 'CustomProcessingCancelled'
             of 'htmlSavingInfo' parameter's variable : it signals to converter that all the necessary
             steps for processing of that resource  must be done in converter itself in same way 
             as if there was no any external custom saving code .
            </summary>
      <param name="htmlSavingInfo"> represents data that can be used for saving or processing of supplied HTML page</param>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions.CssSavingStrategy">
      <summary>
                You can  assign to this property custom strategy that implements processing
              or/and saving of one CSS's part that was created during conversion of PDF to HTML .
                In such case  processing (like saving to stream or disk)
              must be done in that custom code 
            </summary>
      <param name="partSavingInfo"> represents set of data that can be used for saving of supplied CSS part</param>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions.CssUrlMakingStrategy">
      <summary>
               You can  assign to this property  delegate created from custom method that implements creation of URL of CSS referenced 
               in generated HTML document. F.e. if You want to make CSS referenced in HTML f.e. as "otherPage.ASPX?CssID=zjjkklj"
               Then such custom strategy must return "otherPage.ASPX?CssID=zjjkklj"
            </summary>
      <param name="cssUrlRequestInfo"> represents set of data that can be used for generation of CSS' URL</param>
      <returns> must return string that represents CSS's URL or URL's template</returns>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.ExplicitListOfSavedPages">
      <summary>
              With this property You can explicitely define 
             what pages of document should be converted.
             Pages in this list must have 1-based numbers. I.e. 
             valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument])
              Order of appearing of pages in this list does not affect their
              order in result HTML page(s) - in result pages allways will go in order in which they are 
              present in source PDF.
              If this list is null (as it is by default), all pages will be converted.
             If any page number of this list will go out of range of present pages(1-[amountOfPagesInDocument])
              exception will be thrown. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions.HtmlImageType">
      <summary>
             enumerates possible types of image files
             that can be saved as external resources
             during Pdf to Html conversion
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlImageType.Jpeg">
      <summary>
            Jpeg format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlImageType.Png">
      <summary>
            Png format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlImageType.Bmp">
      <summary>
            Bmp format 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlImageType.Gif">
      <summary>
            Gif format 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlImageType.Tiff">
      <summary>
             Tiff format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlImageType.Svg">
      <summary>
            Svg format 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlImageType.ZippedSvg">
      <summary>
            Zipped Svg format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlImageType.Unknown">
      <summary>
            Unknown - means that converter cannot detect type of content itself
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions.ImageParentTypes">
      <summary>
             Enumerates possible types of image's parents
             Image can pertain to HTML page or to SVG parent image
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.ImageParentTypes.HtmlPage">
      <summary>
            Image pertains to HTML page itself
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.ImageParentTypes.SvgImage">
      <summary>
            Image was embedded in SVG image
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.CustomResourceSavingStrategy">
      <summary>
              This field can contain saving strategy
              that must be used (if present) during conversion 
              for customized handling of created referenced resource
              files (like images and fonts) related  to nodes of saved HTML.
              That strategy must process resources 
              and return string that represents desirable URL of saved resource
              in generated HTML.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.CustomCssSavingStrategy">
      <summary>
              This field can contain saving strategy
              that must be used (if present) during conversion 
              of Pdf to Html for handling of saving of CSSes related
              to created HTML document as whole or to it's pages(if several HTMLpages are generated)
             If You want handle CSS file in some specific way, that just please create relevant method and 
              assign delegate created from it to this property.    
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.CustomHtmlSavingStrategy">
      <summary>
              Result of conversion can contain one or several  HTML-pages
               You can  assign to this property delegate created from custom method that implements processing 
              of one HTML-page(to be accurately - markup-HTML, without exteranl linked files if any)
              that was created during conversion.
                In such case  processing (like saving of paage's HTML in stream or disk) can be done in that custom code . 
             In such case all the necessary actions for saving of HTML page must be undertaken
             in code of supplied method, because saving of result in code of converter will be not in use  . 
                If processing for this or that case for some reason must be done by converter's code itself,
             not in custom code, please set in custom code flag 'CustomProcessingCancelled'
             of 'htmlSavingInfo' parameter's variable : it will signal to converter that all the necessary
             steps for processing of that resource  must be done in converter itself in same way 
             as if there was no any external custom code for procesing .
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.CustomStrategyOfCssUrlCreation">
      <summary>
              This field can contain custom method that returns
              URL (Or URL template if multipage generation is on - see details below) of subject  CSS as it should be put in generated result HTML.
               F.e. if You  want converter put some specific URL instead of standard
              CSS file name into generated CSS, then You should just create and put into this property method
              that generates desirable URL.
                If flag  'SplitCssIntoPages' set, then this custom strategy (if any)
                must return not exact URL of CSS but rather template string that
                (after substitution of placeholder with page number with string.Format() 
                function inside converter) can be resolved into URL for this or that page's CSS' URL. 
                   Examples of expected return string in such case are: 'SomeTargetLocation-page_{0}.css','../PartHandlers/GetCss.aspx?DocumentId=45654&amp;CssPage={0}')
            </summary>
    </member>
    <member name="M:Aspose.Pdf.HtmlSaveOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.HtmlSaveOptions" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.HtmlSaveOptions.#ctor(Aspose.Pdf.HtmlDocumentType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.HtmlSaveOptions" /> class.
            </summary>
      <param name="documentType">The <see cref="T:Aspose.Pdf.HtmlDocumentType" />.</param>
    </member>
    <member name="M:Aspose.Pdf.HtmlSaveOptions.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.HtmlSaveOptions" /> class.
            </summary>
      <param name="fixedLayout">if set to <c>true</c> HTML is created as fixed layout.</param>
    </member>
    <member name="M:Aspose.Pdf.HtmlSaveOptions.#ctor(Aspose.Pdf.HtmlDocumentType,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.HtmlSaveOptions" /> class.
            </summary>
      <param name="documentType">The <see cref="T:Aspose.Pdf.HtmlDocumentType" />.</param>
      <param name="fixedLayout">if set to <c>true</c> HTML is created as fixed layout.</param>
    </member>
    <member name="P:Aspose.Pdf.HtmlSaveOptions.DocumentType">
      <summary>
            Gets or sets the <see cref="T:Aspose.Pdf.HtmlDocumentType" />.
            </summary>
      <value>
            The <see cref="T:Aspose.Pdf.HtmlDocumentType" />.
            </value>
    </member>
    <member name="P:Aspose.Pdf.HtmlSaveOptions.CompressSvgGraphicsIfAny">
      <summary>
            Gets or sets the flag that indicates whether
            found SVG graphics(if any) will be compressed(zipped) 
            into SVGZ format during saving
            </summary>
      <value>
            The <see cref="T:Aspose.Pdf.HtmlDocumentType" />.
            </value>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.SpecialFolderForSvgImages">
      <summary>
            Gets or sets path to directory to which must be saved only SVG-images if they 
            are encountered during saving of document as HTML. If parameter is empty or null
            then SVG files(if any) wil be saved together with other image-files (near to output file)
            or in special folder for images (if it specified in SpecialImagesFolderIfAny option).
              It does not affect anything if CustomImageSavingStrategy
              property was successfully used to process relevant image file. 
             
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.SpecialFolderForAllImages">
      <summary>
            Gets or sets path to directory to which must be saved any images if they 
            are encountered during saving of document as HTML. If parameter is empty or null
            then image files(if any) wil be saved together with other files linked to HTML
              It does not affect anything if CustomImageSavingStrategy
              property was successfully used to process relevant image file. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlSaveOptions.SplitCssIntoPages">
      <summary>
              When multipage-mode selected(i.e 'SplitIntoPages' is 'true'), 
            then this attribute defines whether should be created separate CSS-file
            for each result HTML page.
              By default this attribute is false, so, will be created
            one  big common CSS for all created pages. Summary size of all
            CSSes generated in this mode(one CSS per page) usually
            much more than size of one big CSS file, because in former case 
            CSS classes are duplicates in such case in several CSS files for each page.
            So, this setting is worse to be used only when You are interested
            in future processing of each HTML page independently, and therefore size
            of CSS of each one page taken apart is the most critical issue.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.CssClassNamesPrefix">
      <summary>
             When PDFtoHTML converter generates result CSSs, CSS class names
            (something like ".stl_01 {}" ... ".stl_NN {}) are generated
            and used in result CSS. This property allows forcibly set class name prefix
              For example, if You want that all class names start with 'my_prefix_'
              (i.e. were something like 'my_prefix_1' ... 'my_prefix_NNN' ) , 
            then just assign 'my_prefix_' to this property before conversion.
             If this property will stay untouched(i.e. null will be leaved as value ), then
             converter will generate class names itself 
             (it wil be something like ".stl_01 {}" ... ".stl_NN {}")
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlSaveOptions.SplitIntoPages">
      <summary>
            Gets or sets the flag that indicates whether each page of source 
            document will be converted into it's own target HTML document, 
            i.e whether result HTML will be splitted into several HTML-pages.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions.RasterImagesSavingModes">
      <summary>
             Converted PDF can contain raster images(.png, *.jpeg etc.)
             This enum defines methods of how raster images can be handled
             during conversion of PDF to HTML
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.RasterImagesSavingModes.AsPngImagesEmbeddedIntoSvg">
      <summary>
            for each distinct raster file will be generated wrapper SVG image,
             and raster image will be embedded as Base64 encoded strings
             into that SVG image
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.RasterImagesSavingModes.AsExternalPngFilesReferencedViaSvg">
      <summary>
            distinct raster images will be put apart as PNG files but will be referenced through wrapping SVG images,
            i.e. will be generated one PNG file and one SVG for each raster image,
            and each of such SVGs will contain links to relevant PNG file
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.RasterImagesSavingModes.AsEmbeddedPartsOfPngPageBackground">
      <summary>
             Will be generated one big PNG background file for each result page.
            Raster images will be embedded into that file and rendered as regions of that image.
              No external PNG files for each image will be generated,
             only one PNG file per page will be present in conversion result set of files.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions.HtmlMarkupGenerationModes">
      <summary>
             Sometimes specific reqirments to created HTML are present.
             This enum defines HTML preparing modes that can be used
             during conversion of PDF to HTML to match such specific requirments.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlMarkupGenerationModes.WriteAllHtml">
      <summary>
              Default mode any specific requirments are absent.
              Will be generated output that will contain all parts of HTML
              without any special additional processing.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlMarkupGenerationModes.WriteOnlyBodyContent">
      <summary>
             will be stripped away all HTML content that is outside HTML's body,
             i.e. will be left only content that is inside <body></body> tags
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions.PartsEmbeddingModes">
      <summary>
             This enum enumerates possible modes of embedding of files referenced in HTML
             It allows to control whether referenced files (HTML, Fonts,Images, CSSes)
             will be embedded into main HTML file or will be generated as apart binary entities 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.PartsEmbeddingModes.EmbedAllIntoHtml">
      <summary>
              Enforces embed all referenced files(Css,Images,Fonts) into generated HTML markup (i.e. into HTML itself)
              This approach generates one HTML file, but total size of output 
              becames bigger(because Base64 encoding of binaries is in use) and not all browsers (especially legacy) 
              successfully process binaries embedded into HTML. But it allows get HTML that contains whole result, without any additional files.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.PartsEmbeddingModes.EmbedCssOnly">
      <summary>
              Enforces put apart all referenced files except CSS (Images and Fonts)
              I.e. CSS will be embedded into result HTML , and all other referenced files(Images and Fonts)
               will be processed as external parts
              It generates HTML that is sutable for wide set of browsers
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.PartsEmbeddingModes.NoEmbedding">
      <summary>
              Enforces put apart referenced files(Css,Images,Fonts) 
              This approach generates set of files, but total size of output 
              becames smaller(because no Base64 encoding of binaries is in use)
              Also such approach generates HTML that is sutable for wide set of browsers
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.PartsEmbeddingMode">
      <summary>
             It defines whether referenced files (HTML, Fonts,Images, CSSes)
             will be embedded into main HTML file or will be generated as apart binary entities 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.HtmlMarkupGenerationMode">
      <summary>
             Sometimes specific reqirments to generation of HTML markup are present.
             This parameter defines HTML preparing modes that can be used
             during conversion of PDF to HTML to match such specific requirments.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.RasterImagesSavingMode">
      <summary>
            Converted PDF can contain raster images
             This parameter defines how they should be handled
             during conversion of PDF to HTML
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.RemoveEmptyAreasOnTopAndBottom">
      <summary>
             Defines whether in created HTML will be removed top and bottom empty area without any content (if any).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlSaveOptions.FixedLayout">
      <summary>
            Gets or sets a value indicating whether that HTML is created as fixed layout.
            </summary>
      <value>
        <c>true</c> if [fixed layout]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Aspose.Pdf.HtmlSaveOptions.ImageResolution">
      <summary>
            Gets or sets resolution for image rendering.
            </summary>
      <value>
              Resolution
            </value>
    </member>
    <member name="P:Aspose.Pdf.HtmlSaveOptions.DefaultFontName">
      <summary>
            Specifies the name of an installed font which is used to substitute
            any document font that is not embedded and not installed in the system. 
            If null then default substitution font is used.
            </summary>
      <value>
              Font name
            </value>
    </member>
    <member name="P:Aspose.Pdf.HtmlSaveOptions.FontSources">
      <summary>
            Font sources of pre-saved fonts. 
            </summary>
      <remarks>
            Fonts may be saved preliminarily for cache purpose and then passed into Html conversion process.
            For example it may be useful in document splitting scenario and processing document pages in multiple threads with single set of fonts.
            </remarks>
    </member>
    <member name="T:Aspose.Pdf.HtmlSaveOptions.FontEncodingRules">
      <summary>
            This enumeration defines rules which tune encoding logic
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.FontEncodingRules.Default">
      <summary>
            Leave encoding logic "as is" - in accordance with PDF specification 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.FontEncodingRules.DecreaseToUnicodePriorityLevel">
      <summary>
            ToUnicode is a special mechanism which helps to decode input codes to unicode symbols.
            According to specification it must be used first of all mechanisms to get unicode symbols 
            for specific input code. But some documents has non-standard fonts and to convert these
            documents correctly it may be necessary to decrease ToUnicode priority and use another
            mechanisms to decode input codes.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.FontEncodingStrategy">
      <summary>
            Defines encoding special rule to tune PDF decoding for current document
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.PagesFlowTypeDependsOnViewersScreenSize">
      <summary>
                If attribute 'SplitOnPages=false', than whole HTML representing all input PDF pages will be 
             put into one big result HTML file. 
                This flag defines whether result HTML will be generated in such way
             that flow of areas that represent PDF pages in result HTML will depend
             on screen resolution of viewer. 
                Suppose width of screen on viewer side is big enough to put 2 or more pages one near
             other in horizontal direction. If this flag set to true, then this opportunity
             will be used (as many pages will be shown  in horizontal direction one near another
             as it possible, then next horizontal group of pages will be shown under first one ).
               Otherwise pages will flow in such way: next page goes always under previous one.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlSaveOptions.TrySaveTextUnderliningAndStrikeoutingInCss">
      <summary>
             PDF itself does not contain underlining markers for texts. It emulated with line situated under text.
             This option allows converter try guess that this or that line is a text's underlining
             and put this info into CSS instead of drawing of underlining graphically
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlSaveOptions.AdditionalMarginWidthInPoints">
      <summary>
            If attribute 'SplitOnPages=false', than whole HTML representing all input PDF pages wont
                be not split into different HTML pages, but will be put into one big result HTML file.
                But each source PDF page will be represented with it's own 
                rectangle  area in HTML (if necessary that areas can be bordered to show page paper edges
                with special attribute 'PageBorderIfAny'.
             This parameter defines width of margin that will be forcibly left around that output HTML-areas
               that represent pages of source PDF document.In essence it defines guaranteed interval between
               HTML-representations of PDF "paper" pages such mode of conversion.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlSaveOptions.UseZOrder">
      <summary>
            If attribute UseZORder set to true, graphics and text are added to resultant HTML document accordingly Z-order in original PDF document. 
            If this attribute is false all graphics is put as single layer which may cause some unnecessary effects for overlapped objects.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:Aspose.Pdf.HtmlSaveOptions.ConvertMarkedContentToLayers" -->
    <member name="P:Aspose.Pdf.HtmlSaveOptions.MinimalLineWidth">
      <summary>
            This attribute sets minimal width of graphic path line.
            If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can be used to emulate this behavior for HTML browsers.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlSaveOptions.PreventGlyphsGrouping">
      <summary>
            This attribute switch on the mode when text glyphs will not be grouped into words and strings
            This mode allows to keep maximum precision during positioning of glyphs on the page and it can be
            used for conversion documents with music notes or glyphs that should be placed separately each other.
            This parameter will be applied to document only when the value of FixedLayout attribute is true.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "T:Aspose.Pdf.Plugins.PluginsFactory" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Pdf.Plugins.PluginsFactory.GetPlugin(System.String,System.String)" -->
    <member name="T:Aspose.Pdf.UnifiedSaveOptions">
      <summary>
            This class represents saving options for saving that 
            uses unified conversion way (with unified internal document model)
            </summary>
    </member>
    <member name="T:Aspose.Pdf.UnifiedSaveOptions.ProgressEventType">
      <summary>
            This enum describes possible progress event types
            that can occure during conversion
            </summary>
    </member>
    <member name="F:Aspose.Pdf.UnifiedSaveOptions.ProgressEventType.TotalProgress">
      <summary>
            means that occured event informs about total progress of conversion
            </summary>
    </member>
    <member name="F:Aspose.Pdf.UnifiedSaveOptions.ProgressEventType.SourcePageAnalized">
      <summary>
            means that occured event informs about end of analysys of one of pages before conversion
            </summary>
    </member>
    <member name="F:Aspose.Pdf.UnifiedSaveOptions.ProgressEventType.ResultPageCreated">
      <summary>
            means that occured event informs about creation of one result page before phisical export
            </summary>
    </member>
    <member name="F:Aspose.Pdf.UnifiedSaveOptions.ProgressEventType.ResultPageSaved">
      <summary>
            means that occured event informs about finished saving of one result page 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.UnifiedSaveOptions.TryMergeAdjacentSameBackgroundImages">
      <summary>
              Sometimes PDFs contain background images (of pages or table cells)
              constructed from several same tiling background images put one near other.
              In such case renderers of target formats (f.e MsWord for DOCS format) sometimes generates
              visible boundaries beetween parts of background images,
              cause their techniques of image edge smoothing (anti-aliasing) is different from Acrobat Reader.
               If it looks like exported document contains such visible boundaries between 
              parts of same background images, please try use this setting to get rid 
              of that unwanted effect. 
                ATTENTION! This optimization of quality usually essentially slows down conversion,
              so, please, use this option only when it's really necessary.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.UnifiedSaveOptions.ProgressEventHandlerInfo">
      <summary>
            This class represents information about conversion progress
            that can be used in external applicatuion to show conversion progress to end user
            </summary>
    </member>
    <member name="F:Aspose.Pdf.UnifiedSaveOptions.ProgressEventHandlerInfo.EventType">
      <summary>
            Type of progress event that occured
            </summary>
    </member>
    <member name="F:Aspose.Pdf.UnifiedSaveOptions.ProgressEventHandlerInfo.Value">
      <summary>
            current value of progress value
            </summary>
    </member>
    <member name="F:Aspose.Pdf.UnifiedSaveOptions.ProgressEventHandlerInfo.MaxValue">
      <summary>
            maximum possible value of progress value
            </summary>
    </member>
    <member name="T:Aspose.Pdf.UnifiedSaveOptions.ConversionProgressEventHandler">
      <summary>
             Represents method that usually supplied by calling side
             and  handles progress events that comes from converter.
             Usually such suplied customer's handler can be used to show 
             total conversion progress on console or in progress bar.
             <param name="eventInfo">represents information about occured progress event</param></summary>
    </member>
    <member name="P:Aspose.Pdf.UnifiedSaveOptions.ExtractOcrSublayerOnly">
      <summary>
            This atrribute turned on functionality for extracting image or text 
            for PDF documents with OCR sublayer.
            </summary>
      <value>
        <c>true</c> text will be extracted in result document; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Aspose.Pdf.ImportFormat">
      <summary>
             Specifies import format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImportFormat.Cgm">
      <summary>
             Computer Graphics Metafile format.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ImportOptions">
      <summary>
             ImportOptions type hold level of abstraction on individual import options.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.ImportOptions.#ctor(Aspose.Pdf.ImportFormat)">
      <summary>
            Constructor
            </summary>
      <param name="importFormat">Import format.</param>
    </member>
    <member name="P:Aspose.Pdf.ImportOptions.ImportFormat">
      <summary>
            Import format.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.CgmImportOptions">
      <summary>
            Import option for import from Computer Graphics Metafile(CGM) format.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.CgmImportOptions.PageSize">
      <summary>
            Gets or sets output page size for import.
            Default page size - A4 300dpi 2480 X 3508.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Direction">
      <summary>
            Text direction.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Direction.L2R">
      <summary>
            Left to right direction.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Direction.R2L">
      <summary>
            Right to left direction.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.NamespaceDoc">
      <summary>
            The <b>Aspose.Pdf</b> is a root namespace for all classes of Aspose.Pdf library which are either directly in it like <b>Document</b> or indirectly through several subnamespaces.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Document">
      <summary>
            Class representing PDF document
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.JavaScript">
      <summary>
            Collection of JavaScript of document level.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.IsLicensed">
      <summary>
            Gets licensed state of the system. Returns true is system works in licensed mode and false otherwise. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.PageInfo">
      <summary>
            Gets or sets the page info.(for generator only)
            </summary>
      <value>The page info.</value>
    </member>
    <member name="P:Aspose.Pdf.Document.IsPdfaCompliant">
      <summary>
            Gets the is document pdfa compliant.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.IsXrefGapsAllowed">
      <summary>
            Gets or sets  the is document pdfa compliant.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.NamedDestinations">
      <summary>
            Collection of Named Destination in the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.Destinations">
      <summary>
            Gets the collection of destinations.
            Obsolete. Please use NamedDestinations.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.PdfFormat">
      <summary>
            Gets PDF format
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.EmbedStandardFonts">
      <summary>
            Property which declares that document must embed all standard Type1 fonts 
            which  has flag IsEmbedded set into true. All PDF fonts can be embedded 
            into document simply via setting of flag IsEmbedded into true, but PDF standard Type1 fonts is an exception from this rule.
            Standard Type1 font embedding requires much time, so to embed these fonts it's necessary
            not only set flag IsEmbedded into true for specified font but also set 
            an additiona flag on document's level - EmbedStandardFonts = true;
            This property can be set only one time for all fonts.
            By default false.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Document.FontSubstitutionHandler">
      <summary>
            Represents the method that will handle FontSubstitution event.
            </summary>
      <param name="oldFont">original font</param>
      <param name="newFont">new font</param>
    </member>
    <member name="E:Aspose.Pdf.Document.FontSubstitution">
      <summary>
            Occurs when font replaces another font in document.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Document.FontSubsetStrategy">
      <summary>
            enumerates strategies for font subsetting
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Document.FontSubsetStrategy.SubsetEmbeddedFontsOnly">
      <summary>
            Declares to subset only fonts which are embedded in document already
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Document.FontSubsetStrategy.SubsetAllFonts">
      <summary>
            Declares to subsets all the fonts, non-embedded and embedded both
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Document.IDocumentFontUtilities">
      <summary>
            Holds functionality to tune fonts
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.IDocumentFontUtilities.SubsetFonts(Aspose.Pdf.Document.FontSubsetStrategy)">
      <summary>
            Subsets all fonts in document
            </summary>
      <param name="subsetStrategy">strategy</param>
    </member>
    <member name="M:Aspose.Pdf.Document.IDocumentFontUtilities.GetAllFonts">
      <summary>
            Returns all fonts from document
            </summary>
      <returns>fonts</returns>
    </member>
    <member name="P:Aspose.Pdf.Document.FontUtilities">
      <summary>
            IDocumentFontUtilities instance
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.RemovePdfaCompliance">
      <summary>
            Remove pdfa compliance from the document
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.Collection">
      <summary>
            Gets collection of document. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.Version">
      <summary>
            Gets a version of Pdf from Pdf file header.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.OpenAction">
      <summary>
            Gets or sets action performed at document opening. 
            </summary>
      <example>
            Example demonstrates how to get CenterWindow flag:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            IAppointment value = document.OpenAction;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Document.HideToolBar">
      <summary>
            Gets or sets flag specifying whether toolbar should be hidden when document is active. 
            </summary>
      <example>
            Example demonstrates how to get HideToolBar flag:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            bool value = document.HideToolBar;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Document.HideMenubar">
      <summary>
            Gets or sets flag specifying whether menu bar should be hidden when document is active. 
            </summary>
      <example>
            Example demonstrates how to get HideMenubar flag:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            bool value = document.HideMenubar;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Document.HideWindowUI">
      <summary>
            Gets or sets flag specifying whether user interface elements should be hidden when document is active. 
            </summary>
      <example>
            Example demonstrates how to get HideWindowUI flag:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            bool value = document.HideWindowUI;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Document.FitWindow">
      <summary>
            Gets or sets flag specifying whether document window must be resized to fit the first displayed page. 
            </summary>
      <example>
            Example demonstrates how to get FitWindow flag:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            bool value = document.FitWindow;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Document.CenterWindow">
      <summary>
            Gets or sets flag specifying whether position of the document's window will be centerd on the screen.
            </summary>
      <example>
            Example demonstrates how to get CenterWindow flag:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            bool value = document.CenterWindow;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Document.DisplayDocTitle">
      <summary>
            Gets or sets flag specifying whether document's window title bar should display document title.
            </summary>
      <example>
            Example demonstrates how to get DisplayDocTitle flag:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            bool value = document.DisplayDocTitle;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Document.Pages">
      <summary>
            Gets or sets collection of document pages.
            Note that pages are numbered from 1 in collection.
            </summary>
      <example>
            Example below demonstrates how to operate with the document pages:
            How to obtain number of pages and how to obtain rectangle of starting page of the document. 
            <code lang="C#">
            Aspose.Pdf.Document document = new Aspose.Pdf.Document("sample.pdf");
            Aspose.Pdf.PageCollection pages = document.Pages;
            System.Console.WriteLine("Document contains " + pages.Count);
            Page page = pages[1];
            Rectangle rect = page.Rect;        
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Document.Outlines">
      <summary>
            Gets document outlines.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.Actions">
      <summary>
            Gets document actions. This property is instance of DocumentActions class which allows to get/set BeforClosing, BeforSaving, etc. actions. 
            </summary>
      <example>
            This example demonstrates how to obtain after open action of the document:
            <code lang="C#">
            Aspose.Pdf.Document document = new Aspose.Pdf.Document("d:\\work\\aspose\\aspose.pdf.kit.net.new\\trunk\\testdata\\Aspose.Pdf\\PdfWithOpenAction.pdf");
            Aspose.Pdf.Annotations.DocumentActionCollection actions = document.Actions;
            Aspose.Pdf.Annotations.PdfAction afterSavingAction = actions.AfterSaving;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Document.Form">
      <summary>
            Gets Acro Form of the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.EmbeddedFiles">
      <summary>
            Gets collection of files embedded to document. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.Direction">
      <summary>
            Gets or sets reading order of text: L2R (left to right) or R2L (right to left).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.PageMode">
      <summary>
            Gets or sets page mode, specifying how document should be displayed when opened. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.NonFullScreenPageMode">
      <summary>
            Gets or sets page mode, specifying how to display the document on exiting full-screen mode.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.PageLayout">
      <summary>
            Gets or sets page layout which shall be used when the document is opened.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.Duplex">
      <summary>
            Gets or sets print duplex mode handling option to use when printing the file from the print dialog.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.FileName">
      <summary>
            Name of the PDF file that caused this document
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.Info">
      <summary>
            Gets document info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.Metadata">
      <summary>
            Document metadata.
            (A PDF document may include general information,
             such as the document's title, author, and creation and modification dates.
             Such global information about the document (as opposed to its content or structure) is called metadata
             and is intended to assist in cataloguing and searching for documents in external databases.)
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.LogicalStructure">
      <summary>
            Gets logical structure of the document. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(System.IO.Stream)">
      <summary>
            Initialize new Document instance from the <paramref name="input" /> stream.
            </summary>
      <param name="input">Stream with pdf document. </param>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(System.IO.Stream,System.String,System.Boolean)">
      <summary>
            Initialize new Document instance from the <paramref name="input" /> stream.
            </summary>
      <param name="input">Stream with pdf document. </param>
      <param name="password">User or owner password.</param>
      <param name="isManagedStream">if set to <c>true</c> inner stream is closed before exit; otherwise, is not.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
            Initialize new Document instance from the <paramref name="input" /> stream.
            </summary>
      <param name="input">Stream with pdf document. </param>
      <param name="isManagedStream">if set to <c>true</c> inner stream is closed before exit; otherwise, is not.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(System.String)">
      <summary>
            Just init Document using <paramref name="filename" />. The same as <see cref="M:Aspose.Pdf.Document.#ctor(System.IO.Stream)" />.
            </summary>
      <param name="filename">The name of the pdf document file. </param>
    </member>
    <member name="M:Aspose.Pdf.Document.ProcessParagraphs">
      <summary>
            Process paragraphs for generator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.Save(System.IO.Stream)">
      <summary>
            Stores document into stream.
            </summary>
      <param name="output">Stream where document shell be stored.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(System.IO.Stream,System.String)">
      <summary>
            Initialize new Document instance from the <paramref name="input" /> stream.
            </summary>
      <param name="input">Input stream object, corresponding pdf is password protected.</param>
      <param name="password">User or owner password.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Save(System.String)">
      <summary>
            Saves document into the specified file.
            </summary>
      <param name="outputFileName">Path to file where the document will be stored.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.ExportAnnotationsToXfdf(System.String)">
      <summary>
            Exports all document annotations to XFDF file
            </summary>
      <param name="fileName">XFDF file name</param>
    </member>
    <member name="M:Aspose.Pdf.Document.SendTo(Aspose.Pdf.Devices.DocumentDevice,System.IO.Stream)">
      <summary>
            Sends the whole document to the document device for processing.
            </summary>
      <param name="device">
            Document device which is used to process the document.
            </param>
      <param name="output">
            Output stream contains the results of the document processing with given device.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Document.SendTo(Aspose.Pdf.Devices.DocumentDevice,System.Int32,System.Int32,System.IO.Stream)">
      <summary>
            Sends the certain pages of the document to the document device for processing.
            </summary>
      <param name="device">
            Document device which is used to process the document.
            </param>
      <param name="fromPage">
            The first page for processing.
            </param>
      <param name="toPage">
            The last page for processing.
            </param>
      <param name="output">
            Output stream contains the results of the document pages processing with given device.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Document.SendTo(Aspose.Pdf.Devices.DocumentDevice,System.String)">
      <summary>
            Sends the whole document to the document device for processing.
            </summary>
      <param name="device">
            Document device which is used to process the document.
            </param>
      <param name="outputFileName">
            Output file name with the results of processing.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Document.SendTo(Aspose.Pdf.Devices.DocumentDevice,System.Int32,System.Int32,System.String)">
      <summary>
            Sends the whole document to the document device for processing.
            </summary>
      <param name="device">
            Document device which is used to process the document.
            </param>
      <param name="fromPage">
            The first page for processing.
            </param>
      <param name="toPage">
            The last page for processing.
            </param>
      <param name="outputFileName">
            Output file name with the results of processing.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Document.RemoveMetadata">
      <summary>
            Removes metadata from the document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.ImportAnnotationsFromXfdf(System.String)">
      <summary>
            Imports annotations from XFDF file to document.
            </summary>
      <param name="fileName">XFDF file name</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Validate(System.String,Aspose.Pdf.PdfFormat)">
      <summary>
            Validate document into the specified file.
            </summary>
      <param name="outputLogFileName">Path to file where the comments will be stored.</param>
      <param name="format">The pdf format.</param>
      <returns>The operation result</returns>
    </member>
    <member name="M:Aspose.Pdf.Document.Convert(System.String,Aspose.Pdf.PdfFormat,Aspose.Pdf.ConvertErrorAction,Aspose.Pdf.ConvertTransparencyAction)">
      <summary>
            Convert document and save errors into the specified file.
            </summary>
      <param name="outputLogFileName">Path to file where the comments will be stored.</param>
      <param name="format">The pdf format.</param>
      <param name="action">Action for objects that can not be converted</param>
      <param name="transparencyAction">Action for image masked objects</param>
      <returns>The operation result</returns>
    </member>
    <member name="M:Aspose.Pdf.Document.Convert(System.String,Aspose.Pdf.PdfFormat,Aspose.Pdf.ConvertErrorAction)">
      <summary>
            Convert document and save errors into the specified file.
            </summary>
      <param name="outputLogFileName">Path to file where the comments will be stored.</param>
      <param name="format">The pdf format.</param>
      <param name="action">Action for objects that can not be converted</param>
      <returns>The operation result</returns>
    </member>
    <member name="M:Aspose.Pdf.Document.Convert(Aspose.Pdf.PdfFormatConversionOptions)">
      <summary>
            Convert document using specified conversion options
            </summary>
      <param name="options">set of options for convert PDF document</param>
      <returns>The operation result</returns>
    </member>
    <member name="M:Aspose.Pdf.Document.Validate(System.IO.Stream,Aspose.Pdf.PdfFormat)">
      <summary>
            Validate document into the specified file.
            </summary>
      <param name="outputLogStream">Stream where the comments will be stored.</param>
      <param name="format">The pdf format.</param>
      <returns>The operation result</returns>
    </member>
    <member name="M:Aspose.Pdf.Document.Validate(Aspose.Pdf.PdfFormatConversionOptions)">
      <summary>
            Validate document into the specified file.
            </summary>
      <param name="options">set of options for convert PDF document</param>
      <returns>The operation result</returns>
    </member>
    <member name="T:Aspose.Pdf.Document.CallBackGetHocr">
      <summary>
            The call back procedure for hocr recognize.
            </summary>
      <param name="img">The hocr image.</param>
      <returns>The hocr text</returns>
    </member>
    <member name="M:Aspose.Pdf.Document.Convert(Aspose.Pdf.Document.CallBackGetHocr)">
      <summary>
            Convert document and save errors into the specified file.
            </summary>
      <param name="callback">Action for objects that can not be converted</param>
      <returns>The operation result</returns>
    </member>
    <member name="M:Aspose.Pdf.Document.Convert(System.IO.Stream,Aspose.Pdf.PdfFormat,Aspose.Pdf.ConvertErrorAction)">
      <summary>
            Convert document and save errors into the specified stream.
            </summary>
      <param name="outputLogStream">Stream where the comments will be stored.</param>
      <param name="format">Pdf format.</param>
      <param name="action">Action for objects that can not be converted</param>
      <returns>The operation result</returns>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor">
      <summary>
            Initializes empty document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(System.String,Aspose.Pdf.LoadOptions)">
      <summary>
            Opens an existing document from a file providing necessary converting options to get pdf document.
            </summary>
      <param name="filename">
            Input file to convert into pdf document.
            </param>
      <param name="options">
            Represents properties for converting <paramref name="filename" /> into pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(System.IO.Stream,Aspose.Pdf.LoadOptions)">
      <summary>
            Opens an existing document from a stream providing necessary converting to get pdf document.
            </summary>
      <param name="input">
            Input stream to convert into pdf document.
            </param>
      <param name="options">
            Represents properties for converting <paramref name="input" /> into pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Document.Flatten">
      <summary>
            Removes all fields from the document and place their values instead.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.Flatten(Aspose.Pdf.Forms.Form.FlattenSettings)">
      <summary>
            Removes all fields from the document and place their values instead.
            </summary>
      <param name="flattenSettings">Settings for flattening process.</param>
    </member>
    <member name="P:Aspose.Pdf.Document.CryptoAlgorithm">
      <summary>
            Gets security settings if document is encrypted. 
            If document is not encrypted then corresponding exception will be raised in .net 1.1
            or CryptoAlgorithm will be null for other .net versions.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.Encrypt(System.String,System.String,Aspose.Pdf.Facades.DocumentPrivilege,Aspose.Pdf.CryptoAlgorithm,System.Boolean)">
      <summary>
            Encrypts the document. Call then Save to get encrypted version of the document.
            </summary>
      <param name="userPassword">User password.</param>
      <param name="ownerPassword">Owner password.</param>
      <param name="privileges">Document permissions, see <see cref="P:Aspose.Pdf.Document.Permissions" /> for details.</param>
      <param name="cryptoAlgorithm">Cryptographic algorithm, see <see cref="P:Aspose.Pdf.Document.CryptoAlgorithm" /> for details.</param>
      <param name="usePdf20">Support for revision 6 (Extension 8).</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Encrypt(System.String,System.String,Aspose.Pdf.Permissions,Aspose.Pdf.CryptoAlgorithm)">
      <summary>
            Encrypts the document. Call then Save to get encrypted version of the document.
            </summary>
      <param name="userPassword">User password.</param>
      <param name="ownerPassword">Owner password.</param>
      <param name="permissions">Document permissions, see <see cref="P:Aspose.Pdf.Document.Permissions" /> for details.</param>
      <param name="cryptoAlgorithm">Cryptographic algorithm, see <see cref="P:Aspose.Pdf.Document.CryptoAlgorithm" /> for details.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Encrypt(System.String,System.String,Aspose.Pdf.Permissions,Aspose.Pdf.CryptoAlgorithm,System.Boolean)">
      <summary>
            Encrypts the document. Call then Save to get encrypted version of the document.
            </summary>
      <param name="userPassword">User password.</param>
      <param name="ownerPassword">Owner password.</param>
      <param name="permissions">Document permissions, see <see cref="P:Aspose.Pdf.Document.Permissions" /> for details.</param>
      <param name="cryptoAlgorithm">Cryptographic algorithm, see <see cref="P:Aspose.Pdf.Document.CryptoAlgorithm" /> for details.</param>
      <param name="usePdf20">Support for revision 6 (Extension 8).</param>
    </member>
    <member name="M:Aspose.Pdf.Document.ChangePasswords(System.String,System.String,System.String)">
      <summary>
            Changes document passwords. This action can be done only using owner password.
            </summary>
      <param name="ownerPassword">Owner password.</param>
      <param name="newUserPassword">New user password.</param>
      <param name="newOwnerPassword">New owner password.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(System.String,System.String)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Document" /> class for working with encrypted document. 
            </summary>
      <param name="filename">Document file name.</param>
      <param name="password">User or owner password.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.#ctor(System.String,System.String,System.Boolean)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Document" /> class for working with encrypted document. 
            </summary>
      <param name="filename">Document file name.</param>
      <param name="password">User or owner password.</param>
      <param name="isManagedStream">if set to <c>true</c> inner stream is closed before exit; otherwise, is not.</param>
    </member>
    <member name="P:Aspose.Pdf.Document.IsLinearized">
      <summary>
            Gets or sets a value indicating whether document is linearized.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.Decrypt">
      <summary>
            Decrypts the document. Call then Save to obtain decrypted version of the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.Permissions">
      <summary>
            Gets permissions of the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.IsEncrypted">
      <summary>
            Gets encrypted status of the document. True if document is encrypted.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.Optimize">
      <summary>
            Linearize document in order to
            - open the first page as quickly as possible;
            - display next page or follow by link to the next page as quickly as possible;
            - display the page incrementally as it arrives when data for a page is delivered over a slow channel (display the most useful data first);
            - permit user interaction, such as following a link, to be performed even before the entire page has been received and displayed.
            Invoking this method doesn't actually saves the document. On the contrary the document only is prepared to have optimized structure,
            call then Save to get optimized document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.Save">
      <summary>
            Save document incrementally (i.e. using incremental update technque).
            </summary>
      <remarks>
            In order to save document incremetally we should open the document file for writing. 
            Therefore Document must be initialized with writable stream like in the next code snippet:
            Document doc = new Document(new FileStream("document.pdf", FileMode.Open, FileAccess.ReadWrite));
            // make some changes and save the document incrementally
            doc.Save();
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Document.Save(System.String,Aspose.Pdf.SaveFormat)">
      <summary>
            Saves the document with a new name along with a file format.
            </summary>
      <param name="outputFileName">Path to file where the document will be stored.</param>
      <param name="format">Format options.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Save(System.IO.Stream,Aspose.Pdf.SaveFormat)">
      <summary>
            Saves the document with a new name along with a file format.
            </summary>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.ArgumentException" /> when <see cref="T:Aspose.Pdf.HtmlSaveOptions" /> is passed to a method. Save a document to the html stream is not supported. Please use method save to the file.</exception>
      <param name="outputStream">Stream where the document will be stored.</param>
      <param name="format">Format options.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Save(System.String,Aspose.Pdf.SaveOptions)">
      <summary>
            Saves the document with a new name setting its save options.
            </summary>
      <param name="outputFileName">Path to file where the document will be stored.</param>
      <param name="options">Save options.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Save(System.IO.Stream,Aspose.Pdf.SaveOptions)">
      <summary>
            Saves the document to a stream with a save options.
            </summary>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.ArgumentException" /> when <see cref="T:Aspose.Pdf.HtmlSaveOptions" /> is passed to a method. Save a document to the html stream is not supported. Please use method save to the file.</exception>
      <param name="outputStream">Stream where the document will be stored.</param>
      <param name="options">Save options.</param>
    </member>
    <member name="P:Aspose.Pdf.Document.Id">
      <summary>
            Gets the ID.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.Dispose">
      <summary>
            Closes all resources used by this document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.Background">
      <summary>
            Gets or sets the background color of the document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.OptimizeResources">
      <summary>
            Optimize resources in the document:
            1. Resources which are not used on the document pages are removed;
            2. Equal resources are joined into one object; 
            3. Unused objects are deleted.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.OptimizeResources(Aspose.Pdf.Document.OptimizationOptions)">
      <summary>
            Optimize resources in the document according to defined optimization strategy.
            </summary>
      <param name="strategy">Optimization strategy.</param>
    </member>
    <member name="P:Aspose.Pdf.Document.OptimizeSize">
      <summary>
            Gets or sets optimization flag. When pages are added to document, equal resource streams in resultant file are
            merged into one PDF object if this flag set. 
            This allows to decrease resultant file size but may cause slower execution and larger memory requirements.
            Default value: false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.AllowReusePageContent">
      <summary>
            Allows to merge page contents to optimize docuement size. If used then differnet but duplicated pages may reference to the 
            same content object. Please note that this mode may cause side effects like changing page content when other page is changed.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Document.OptimizationOptions">
      <summary>
            Class which describes document optimization algorithm.
            Instance of this class may be used as parameter of OptimizeResources() method.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.OptimizationOptions.LinkDuplcateStreams">
      <summary>
            If this flag is set to true, Resource streams will be analyzed. If duplicate streams are found (i.e. if stream contents is equal), then thes streams will be stored as one object. 
            This allows to decrease document size in some cases (for example, when same document was concatenedted multiple times).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.OptimizationOptions.AllowReusePageContent">
      <summary>
            If true page contents will be reused when document is optimized for equal pages.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.OptimizationOptions.RemoveUnusedStreams">
      <summary>
            If this flag set to true, every resource is checked on it's usage. If resource is never used, then resources is removed.
            This may decrease document size for example when pages were extracted from document. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.OptimizationOptions.RemoveUnusedObjects">
      <summary>
            If this flag is set to true, all document objects will be checked and unused objects (i.e. objects which does not have any reference) are removed from document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.OptimizationOptions.CompressImages">
      <summary>
            If this flag is set to true images will be compressed in the document. compression level is specfied with ImageQuality property.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.OptimizationOptions.ResizeImages">
      <summary>
            If this flag set to true and CompressImages is true images will be resized if image resoultion is greater then specified MaxResolution parameter.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.OptimizationOptions.ImageQuality">
      <summary>
            Specifies level of image compression when CompressIamges flag is used.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.OptimizationOptions.MaxResoultion">
      <summary>
            Specifies maximum resolution of images. If image has higher resolition it will be scaled 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.OptimizationOptions.UnembedFonts">
      <summary>
            Make fonts not embedded if set to true. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Document.OptimizationOptions.RemovePrivateInfo">
      <summary>
            Remove private information (page piece info).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.OptimizationOptions.All">
      <summary>
            Creates optimization strategy will all options activated.
            </summary>
      <returns>OptimizationOptions object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Document.IgnoreCorruptedObjects">
      <summary>
            Gets or sets flag of ignoring errors in source files. 
            When pages from source document copied into destination document, copying process is stopped with exception 
            if some objects in source files are corrupted when this flag is false. 
            example: dest.Pages.Add(src.Pages);
            If this flag is set to true then corrupted objects will be replaced with empty values.
            By default: true.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.GetCatalogValue(System.String)">
      <summary>
            Returns item value from catalog dictionary.
            </summary>
      <param name="key">The key of item.</param>
      <returns>Item value - if key was successfully found; otherwise, null.</returns>
    </member>
    <member name="P:Aspose.Pdf.Document.PageLabels">
      <summary>
            Gets page labels in the document. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.FreeMemory">
      <summary>
            Clears memory
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.SaveXml(System.String)">
      <summary>
             Save document to XML.
            </summary>
      <param name="file">The document model xml file</param>
    </member>
    <member name="M:Aspose.Pdf.Document.GetObjectById(System.String)">
      <summary>
            Gets a object with specified ID in the document.
            </summary>
      <param name="id">The object id.</param>
      <returns>The object with specified id. Null if the id is not found.</returns>
    </member>
    <member name="M:Aspose.Pdf.Document.BindXml(System.String)">
      <summary>
            Bind xml to document
            </summary>
      <param name="file">The xml file</param>
    </member>
    <member name="M:Aspose.Pdf.Document.Repair">
      <summary>
            Repairs broken document. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.BindXml(System.String,System.String)">
      <summary>
            Bind xml/xsl to document
            </summary>
      <param name="xmlFile">The xml file.</param>
      <param name="xslFile">The xsl file if XSLT is used.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.BindXml(System.IO.Stream,System.IO.Stream)">
      <summary>
            Bind xml/xsl to document
            </summary>
      <param name="xmlStream">The xml stream.</param>
      <param name="xslStream">The xsl stream if XSLT is used.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.BindXml(System.IO.Stream,System.IO.Stream,System.Xml.XmlReaderSettings)">
      <summary>
            Bind xml/xsl to document
            </summary>
      <param name="xmlStream">The xml stream.</param>
      <param name="xslStream">The xsl stream if XSLT is used.</param>
      <param name="settings">The xml reader settings.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.BindXml(System.IO.Stream)">
      <summary>
            Bind xml to document
            </summary>
      <param name="stream">The xml stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.GetXmpMetadata(System.IO.Stream)">
      <summary>
            Get XMP metadata from document.
            </summary>
      <param name="stream">Stream where metadata will be stored.</param>
    </member>
    <member name="M:Aspose.Pdf.Document.SetXmpMetadata(System.IO.Stream)">
      <summary>
            Set XMP metadata of document.
            </summary>
      <param name="stream">Stream which contains XMP metadata.</param>
    </member>
    <member name="P:Aspose.Pdf.Document.EnableObjectUnload">
      <summary>
            Get or sets flag which enables document partially be unloaded from memory. 
            This allow to decrease memory usage but may have negative effect on perofmance.
            
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Document.Check(System.Boolean)">
      <summary>
            Validates document.
            </summary>
      <param name="Repair">If true found issues will be repaired.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.Pdf.DocumentInfo">
      <summary>
            Represents meta information of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.Title">
      <summary>
            Gets or sets document title.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.Creator">
      <summary>
            Gets or sets document creator.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.Author">
      <summary>
            Gets or sets document author.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.Subject">
      <summary>
            Gets or sets the subject of the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.Keywords">
      <summary>
            Gets or set the keywords of the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.Producer">
      <summary>
            Gets or sets the document producer.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.CreationDate">
      <summary>
            Gets or sets the date of document creation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.CreationTimeZone">
      <summary>
            Time zone of creation date. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.ModTimeZone">
      <summary>
            Time zone of modification date. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.ModDate">
      <summary>
            Gets or sets the date of document modification.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.Trapped">
      <summary>
            Gets or sets the trapped flag.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.DocumentInfo.#ctor(Aspose.Pdf.Document)">
      <summary>
            Initialize DocumentInfo instance.
            </summary>
      <param name="document">The info of this document will be used for initialization.</param>
    </member>
    <member name="M:Aspose.Pdf.DocumentInfo.Clear">
      <summary>
            Clears the document info.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.DocumentInfo.Add(System.Object,System.Object)">
      <summary>
            Adds an element with the specified key and value into the collection.
            </summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add. The value can be null.</param>
    </member>
    <member name="M:Aspose.Pdf.DocumentInfo.Remove(System.Object)">
      <summary>
            Removes the element with the specified key from the collection.
            </summary>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="P:Aspose.Pdf.DocumentInfo.Item(System.Object)">
      <summary>
            Gets or sets the value associated with the specified key.
            </summary>
      <param name="key">The key whose value to get or set.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.DocumentInfo.ClearCustomData">
      <summary>
            Clears custom data only, leaves all other predefined values (Title, Author, etc.).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.DocumentInfo.IsPredefinedKey(System.String)">
      <summary>
            Determines if the key is predefined (Title, Author, etc.), not custom.
            </summary>
      <param name="key">Selected key</param>
      <returns>True in case the key is predefined.</returns>
    </member>
    <member name="T:Aspose.Pdf.Matrix">
      <summary>
            Class represents transformation matrix. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Matrix.A">
      <summary>
            A member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Matrix.B">
      <summary>
            B member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Matrix.C">
      <summary>
            C member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Matrix.D">
      <summary>
            D member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Matrix.E">
      <summary>
            E member of the transformation matrix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Matrix.F">
      <summary>
            F member of the transformation matrix.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Matrix.#ctor">
      <summary>
            Constructor
            creates stanrard 1 to 1 matrix:
            [ A B C D E F ] = [ 1, 0, 0, 1, 0, 0]
            </summary>
      <example>
        <code lang="C#">
            Matrix m = new Matrix();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Matrix.#ctor(System.Double[])">
      <summary>
            Constructor
            accepts a matrix with following array representation:
            [ A B C D E F ]
            </summary>
      <param name="matrixArray">Matrix data array.</param>
      <example>
        <code lang="C#">
            double[] c = new double[] { 1, 0, 0, 1, 10, 20 };
            Matrix m = new Matrix(c);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Matrix.#ctor(System.Single[])">
      <summary>
            Constructor
            accepts a matrix with following array representation:
            [ A B C D E F ]
            </summary>
      <param name="matrixArray">Matrix data array.</param>
    </member>
    <member name="P:Aspose.Pdf.Matrix.Elements">
      <summary>
            Elements of the matrix.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Matrix.#ctor(Aspose.Pdf.Matrix)">
      <summary>
            Constructor
            accepts a matrix to create a copy
            </summary>
      <param name="matrix">Matrix object.</param>
    </member>
    <member name="M:Aspose.Pdf.Matrix.ToString">
      <summary>
            Returns text reporesentation of the matrix. 
            </summary>
      <returns>String representation for the matrix</returns>
    </member>
    <member name="M:Aspose.Pdf.Matrix.Equals(System.Object)">
      <summary>
            Compares matrix agains other object.
            </summary>
      <param name="obj">Object to compare.</param>
      <returns>Returns true is other object is Matrix and all matrix member are equal to correspondim members of the matrix</returns>
    </member>
    <member name="M:Aspose.Pdf.Matrix.Rotation(System.Double)">
      <summary>
            Creates matrix for given rotation angle. 
            </summary>
      <param name="alpha">Rotation angle in radians.</param>
      <returns>Transformation matrix.</returns>
      <example>
        <code lang="C#">
            Matrix m = Matrix.Rotation(Math.PI / 2);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Matrix.Skew(System.Double,System.Double)">
      <summary>
            Creates matrix for given rotation angle. 
            </summary>
      <param name="alpha">Skew x angle in radians.</param>
      <param name="beta">Skew y angle in radians.</param>
      <returns>Transformation matrix.</returns>
      <example>
        <code lang="C#">
            Matrix m = Matrix.Skew(Math.PI / 2, Math.PI / 2);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Matrix.GetAngle(Aspose.Pdf.Rotation)">
      <summary>
            Transaltes rotation into angle (degrees)
            </summary>
      <param name="rotation">Rotation value.</param>
      <example>
        <code lang="C#">
            double angle = Matrix.GetAngle(Rotation.on90);
            Matrix m = Matrix.Rotation(angle);
            </code>
      </example>
      <returns>Angle value.</returns>
    </member>
    <member name="M:Aspose.Pdf.Matrix.Multiply(Aspose.Pdf.Matrix)">
      <summary>
            Multiplies the matrix by other matrix.
            </summary>
      <param name="other">Multiplier matrix.</param>
      <returns>Result of multiplication.</returns>
      <example>
        <code lang="C#">
            Matrix a = new Matrix(new double[] { 1, 0, 0, 1, 10, 20 });
            Matrix b = new Matrix(new double[] { 0, -1, 1, 0, 0, 0 } );
            Matrix c= a.Multiply(b);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Matrix.Add(Aspose.Pdf.Matrix)">
      <summary>
            Adds matrix to other matrix.
            </summary>
      <param name="other">Matrix to be added.</param>
      <returns>Result of matrix add.</returns>
    </member>
    <member name="M:Aspose.Pdf.Matrix.Transform(Aspose.Pdf.Point)">
      <summary>
            Transforms point using this matrix.
            </summary>
      <param name="p">Point which will be transformed.</param>
      <returns>Transformation result.</returns>
      <example>
        <code lang="C#">
            Aspose.Pdf.DOM.Matrix m = new Aspose.Pdf.DOM.Matrix(new double[] { 1, 0, 0, 1, 10, 20 } );
            Aspose.Pdf.Rectangle r = new Aspose.Pdf.Rectangle(0, 0, 100, 100);
            Aspose.Pdf.Rectangle r1 = m.Transform(r);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Matrix.Transform(Aspose.Pdf.Rectangle)">
      <summary>
            Transformes rectangle.
            If angle is not 90 * N degrees then bounding rectangle is returned.
            </summary>
      <param name="rect">Rectangle to be transformed.</param>
      <returns>Transformed rectangle.</returns>
      <example>
        <code lang="C#">
            Matrix m = new Matrix(new double[] { 1, 0, 0, 1, 10, 20 } );
            Rectangle r = new Rectangle(0, 0, 100, 100);
            Rectangle r1 = m.Transform(r1);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes transformation matrix with specified coefficients.
            </summary>
      <param name="a">A matrix value.</param>
      <param name="b">B matrix value.</param>
      <param name="c">C matrix value.</param>
      <param name="d">D matrix value.</param>
      <param name="e">E matrix value.</param>
      <param name="f">F matrix value.</param>
      <example>
        <code lang="C#">
            Matrix m = new Matrix(1, 0, 0, 1, 3, 3);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Matrix.Reverse">
      <summary>
            Calculates reverse matrix.
            </summary>
      <returns>Reverse matrix.</returns>
      <example>
        <code lang="C#">
            Matrix m = Matrix.Rotation(Math.PI / 2);
            Matrix m1 = m.Reverse();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Matrix.GetHashCode">
      <summary>
            Hash-code for object.
            </summary>
      <returns>Hash-code.</returns>
    </member>
    <member name="T:Aspose.Pdf.PageMode">
      <summary>
            Class descibes used components of the document page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageMode.UseNone">
      <summary>
            Dont use any components.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageMode.UseOutlines">
      <summary>
            Document outline visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageMode.UseThumbs">
      <summary>
            Thumbnail images visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageMode.FullScreen">
      <summary>
            FullScreenFull-screen mode, with no menu bar, window controls, or any other window visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageMode.UseOC">
      <summary>
            Optional content group panel visible.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageMode.UseAttachments">
      <summary>
            Attachments panel visible.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.EmbeddedFileCollection">
      <summary>
            Class representing embedded files collection. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.EmbeddedFileCollection.IsSynchronized">
      <summary>
             Gets a value indicating whether access to this collection is synchronized (thread safe).
             </summary>
    </member>
    <member name="P:Aspose.Pdf.EmbeddedFileCollection.SyncRoot">
      <summary>
             Gets an object that can be used to synchronize access to this collection.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.EmbeddedFileCollection.Count">
      <summary>
            Gets number of embedded files in collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.EmbeddedFileCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies array of FileSpecification object into colleciton. 
            </summary>
      <param name="array">Array of objects which will be copied.</param>
      <param name="index">Starting index from which copying will be started.</param>
    </member>
    <member name="M:Aspose.Pdf.EmbeddedFileCollection.GetEnumerator">
      <summary>
            Returns colleciton enumerator.
            </summary>
      <returns>Enumerator of colleciton.</returns>
    </member>
    <member name="M:Aspose.Pdf.EmbeddedFileCollection.Add(Aspose.Pdf.FileSpecification)">
      <summary>
            Adds embedded file specification into collection.
            </summary>
      <param name="file">FileSpecification which should be added into colleciton.</param>
    </member>
    <member name="M:Aspose.Pdf.EmbeddedFileCollection.Add(System.String,Aspose.Pdf.FileSpecification)">
      <summary>
            Adds file to embedded files with the specified key.
            </summary>
      <param name="key">Key in the embedded files.</param>
      <param name="file">File specification.</param>
    </member>
    <member name="M:Aspose.Pdf.EmbeddedFileCollection.DeleteByKey(System.String)">
      <summary>
            Deletes file from the collection by its key in the collection. 
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:Aspose.Pdf.EmbeddedFileCollection.Delete(System.String)">
      <summary>
            Delete embedded file by name.
            </summary>
      <param name="name">Name of the embedded file which should be deleted.</param>
    </member>
    <member name="M:Aspose.Pdf.EmbeddedFileCollection.Delete">
      <summary>
            Remove all embedded files from document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.EmbeddedFileCollection.Item(System.Int32)">
      <summary>
            Gets embedded file by its index.
            </summary>
      <param name="index">Index of embedded file. Numbering is started from 1.</param>
      <returns>Retreived embedded file specification</returns>
    </member>
    <member name="P:Aspose.Pdf.EmbeddedFileCollection.Item(System.String)">
      <summary>
            Gets embedded file by its name.
            </summary>
      <param name="name">Embedded file name.</param>
      <returns>Retreived embedded file specification.</returns>
    </member>
    <member name="T:Aspose.Pdf.FileParams">
      <summary>
            Defines an embedded file parameter dictionary that shall contain additional file-specific information.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileParams.Size">
      <summary>
            The size of the uncompressed embedded file, in bytes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileParams.CreationDate">
      <summary>
            The date and time when the embedded file was created.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileParams.ModDate">
      <summary>
            The date and time when the embedded file was last modified.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileParams.CheckSum">
      <summary>
            A 16-byte string that is the checksum of the bytes of the uncompressed embedded file. 
            The checksum is calculated by applying the standard MD5 message-digest algorithm 
            to the bytes of the embedded file stream.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.FileParams.#ctor(Aspose.Pdf.FileSpecification)">
      <summary>
            Constructor for FileParams class.
            </summary>
      <param name="spec">File specification.</param>
    </member>
    <member name="T:Aspose.Pdf.FileSpecification">
      <summary>
            Class representing embedded file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileSpecification.Encoding">
      <summary>
            Gets or sets encoding format.
            Possible values: Zip - file is compressed with ZIP, 
            None - file is not compressed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileSpecification.IncludeContents">
      <summary>
            If true, contents of the file will be included in the file specification. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileSpecification.Description">
      <summary>
            Gets or sets text associated with the file specification. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileSpecification.StreamContents">
      <summary>
            Gets contents of file as stream. 
            Contents is not loaded into memory which allows to decrease memory usage.
            But this stream does not support positioning and Length property. If you need this features please use Contents property instead.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileSpecification.Contents">
      <summary>
            Gets or sets contents file. 
            This property returns data loaded in memory which may cause Out of memory exception for large data.
            To decrease memory usage please use StreamContents.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileSpecification.Params">
      <summary>
            Gets file paramteres.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileSpecification.MIMEType">
      <summary>
            Gets subtype of the embedded file
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileSpecification.Name">
      <summary>
            Gets or sets file specification name. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileSpecification.UnicodeName">
      <summary>
            Gets or sets file specification unicode name. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.FileSpecification.#ctor(System.String)">
      <summary>
            Constructor for FileSpecification
            </summary>
      <param name="file">File path.</param>
    </member>
    <member name="M:Aspose.Pdf.FileSpecification.#ctor(System.IO.Stream,System.String)">
      <summary>
            Constructor for file specification.
            </summary>
      <param name="stream">Stream containing data file.</param>
      <param name="name">File specification.</param>
    </member>
    <member name="M:Aspose.Pdf.FileSpecification.#ctor(System.String,System.String)">
      <summary>
            Constructor for FileSpecification.
            </summary>
      <param name="file">File path.</param>
      <param name="description">File description. </param>
    </member>
    <member name="M:Aspose.Pdf.FileSpecification.#ctor(System.IO.Stream,System.String,System.String)">
      <summary>
            Constructor for FileSpecification.
            </summary>
      <param name="stream">Stream to be used in the document.</param>
      <param name="name">A file specification string.</param>
      <param name="description">File description.</param>
    </member>
    <member name="M:Aspose.Pdf.FileSpecification.#ctor(System.String,Aspose.Pdf.Annotations.Annotation)">
      <summary>
            Constructor for FileSpecification.
            </summary>
      <param name="fileName">File path.</param>
      <param name="annot">The annotation.</param>
    </member>
    <member name="M:Aspose.Pdf.FileSpecification.#ctor">
      <summary>
            Create new empty file specification. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FileSpecification.FileSystem">
      <summary>
            Gets or sets name of the file system.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HorizontalAlignment">
      <summary>
            Describes horizontal alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HorizontalAlignment.None">
      <summary>
            No alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HorizontalAlignment.Left">
      <summary>
            Align to left.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HorizontalAlignment.Center">
      <summary>
            Center alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HorizontalAlignment.Right">
      <summary>
            Align to right.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HorizontalAlignment.Justify">
      <summary>
            Justify alignment. Text will be aligned on both left and right margins.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HorizontalAlignment.FullJustify">
      <summary>
            Similar to 'Justify' alignment, except that the very last line will only be 
            left-aligned in 'Justify' mode, while in 'FullJustify' mode all lines will be
            left- and right-aligned.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Id">
      <summary>
            Represents file identifier structure.
            </summary>
      <example>
        <code lang="C#">
            Document doc = new Document("example.pdf");
            string original = doc.Id.Original;
            string modified = doc.Id.Modified;
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Id.Original">
      <summary>
            Permanent identifier based on the contents of the document at the time it was originally created.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Id.Modified">
      <summary>
            Changing identifier based on the document's contents at the time it was last updated.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ImageStamp">
      <summary>
            Reresents graphic stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageStamp.Image">
      <summary>
            Gets image stream used for stamping.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageStamp.Width">
      <summary>
            Gets or sets image width. Setting this property allos to scal image horizontally.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageStamp.Height">
      <summary>
            Gets or sets image height. Setting this image allows to scale image vertically.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageStamp.Quality">
      <summary>
            Gets or sets quality of image stamp in percent. Valid values are 0..100%. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.ImageStamp.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.ImageStamp" /> class.
            </summary>
      <param name="image">
            Stream which contains image data.
            </param>
    </member>
    <member name="M:Aspose.Pdf.ImageStamp.Put(Aspose.Pdf.Page)">
      <summary>
            Adds graphic stamp on the page.
            </summary>
      <param name="page">
            Page for stamping.
            </param>
    </member>
    <member name="M:Aspose.Pdf.ImageStamp.#ctor(System.String)">
      <summary>
            Creates image stamp by image in the specified file.
            </summary>
      <param name="fileName">Name of the file which contains image. </param>
    </member>
    <member name="T:Aspose.Pdf.IOperatorSelector">
      <summary>
            Defines Visitor for visiting different pdf operators.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.Fill)">
      <summary>
            Visit/select f operator.
            </summary>
      <param name="f">
            Fill path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ObsoleteFill)">
      <summary>
            Visit/select F operator.
            </summary>
      <param name="F">
            Fill path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.EOFill)">
      <summary>
            Visit/select operator f*.
            </summary>
      <param name="f_">
            Fill path operator (even-odd rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetGrayStroke)">
      <summary>
            Visit/select G operator.
            </summary>
      <param name="G">
            Set gray level operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetGray)">
      <summary>
            Visit/select g operator.
            </summary>
      <param name="g">
            Set gray level operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.GS)">
      <summary>
            Visit/select gs operator.
            </summary>
      <param name="gs">
            Set graphics state operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ClosePath)">
      <summary>
            Visit/select h operator.
            </summary>
      <param name="h">
            Close subpath operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetFlat)">
      <summary>
            Visit/select i operator.
            </summary>
      <param name="i">
            Set flatness tolerance operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ID)">
      <summary>
            Visit/select ID operator.
            </summary>
      <param name="ID">
            Begin inline image data operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetColorRenderingIntent)">
      <summary>
            Visit/select ri operator.
            </summary>
      <param name="ri">
            Set color rendering intent operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetLineCap)">
      <summary>
            Visit/select J operator.
            </summary>
      <param name="J">
            Set line cap style operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetMiterLimit)">
      <summary>
            Visit/select M operator.
            </summary>
      <param name="M">
            Set miter limit operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.MP)">
      <summary>
            Visit/select MP operator.
            </summary>
      <param name="MP">
            Define marked-content point operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.EndPath)">
      <summary>
            Visit/select n operator.
            </summary>
      <param name="n">
            End path operator (without filling or stroking).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.GSave)">
      <summary>
            Visit/select q operator.
            </summary>
      <param name="q">
            Save graphics state operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.GRestore)">
      <summary>
            Visit/select Q operator.
            </summary>
      <param name="Q">
            Restore graphics state operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.Re)">
      <summary>
            Visit/select re operator.
            </summary>
      <param name="re">
            Append rectangle to path operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetRGBColorStroke)">
      <summary>
            Visit/select RG operator.
            </summary>
      <param name="RG">
            Set RGB color operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetRGBColor)">
      <summary>
            Visit/select rg operator.
            </summary>
      <param name="rg">
            Set RGB color operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetCMYKColorStroke)">
      <summary>
            Visit/select K operator.
            </summary>
      <param name="K">
            Set CMYK color operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetCMYKColor)">
      <summary>
            Visit/select k operator.
            </summary>
      <param name="k">
            Set CMYK color operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.LineTo)">
      <summary>
            Visit/select l operator.
            </summary>
      <param name="l">
            Append straight line segment to path operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.MoveTo)">
      <summary>
            Visit/select m operator.
            </summary>
      <param name="m">
            Begin new subpath operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetWordSpacing)">
      <summary>
            Visit/select Tw operator.
            </summary>
      <param name="Tw">
            Set word spacing operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ClosePathStroke)">
      <summary>
            Visit/select s operator.
            </summary>
      <param name="s">
            Close and stroke path operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.MoveTextPositionSetLeading)">
      <summary>
            Visit/select TD operator.
            </summary>
      <param name="TD">
            Move text position and set leading operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SelectFont)">
      <summary>
            Visit/select Tf operator.
            </summary>
      <param name="Tf">
            Set text font and size operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ShowText)">
      <summary>
            Visit/select Tj operator.
            </summary>
      <param name="Tj">
            Show text operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetGlyphsPositionShowText)">
      <summary>
            Visit/select TJ operator.
            </summary>
      <param name="TJ">
            Show text operator (allowing individual glyph positioning).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetTextLeading)">
      <summary>
            Visit/select TL operator.
            </summary>
      <param name="TL">
            Set text leading operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetTextMatrix)">
      <summary>
            Visit/select Tm operator.
            </summary>
      <param name="Tm">
            Set text matrix and text line matrix operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetTextRenderingMode)">
      <summary>
            Visit/select Tr operator.
            </summary>
      <param name="Tr">
            Set text rendering mode operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetTextRise)">
      <summary>
            Visit/select Ts operator.
            </summary>
      <param name="Ts">
            Set text rise operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.Stroke)">
      <summary>
            Visit/select S operator.
            </summary>
      <param name="S">
            Stroke path operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetColorStroke)">
      <summary>
            Visit/select SC operator.
            </summary>
      <param name="SC">
            Set color operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetColor)">
      <summary>
            Visit/select sc operator.
            </summary>
      <param name="sc">
            Set color operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetAdvancedColorStroke)">
      <summary>
            Visit/select SCN operator.
            </summary>
      <param name="SCN">
            Set color operator (for stroking operations, ICCBasedand special colour spaces).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetAdvancedColor)">
      <summary>
            Visit/select scn operator.
            </summary>
      <param name="scn">
            Set color operator (for nonstroking operations, ICCBased and special colour spaces).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ShFill)">
      <summary>
            Visit/select sh operator.
            </summary>
      <param name="sh">
            Paint area defined by shading pattern operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.MoveToNextLine)">
      <summary>
            Visit/select T* operator.
            </summary>
      <param name="T_">
            Move to start of next text line operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetCharacterSpacing)">
      <summary>
            Visit/select Tc operator.
            </summary>
      <param name="Tc">
            Set character spacing operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.MoveTextPosition)">
      <summary>
            Visit/select Td operator.
            </summary>
      <param name="Td">
            Move text position operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.CurveTo2)">
      <summary>
            Visit/select y operator.
            </summary>
      <param name="y">
            Append curved segment to path operator (final point replicated).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.EOClip)">
      <summary>
            Visit/select W* operator.
            </summary>
      <param name="W_">
            Set clipping path operator (even-odd rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetHorizontalTextScaling)">
      <summary>
            Visit/select Tz operator.
            </summary>
      <param name="Tz">
            Set horizontal text scaling operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.CurveTo1)">
      <summary>
            Visit/select v operator.
            </summary>
      <param name="v">
            Append curved segment to path operator (initial point replicated).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.Clip)">
      <summary>
            Visit/select W operator.
            </summary>
      <param name="W">
            Set clipping path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetLineWidth)">
      <summary>
            Visit/select w operator.
            </summary>
      <param name="w">
            Set line width operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetLineJoin)">
      <summary>
            Visit/select j operator.
            </summary>
      <param name="j">
            Set line join style operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.EX)">
      <summary>
            Visit/select EX operator.
            </summary>
      <param name="EX">
            End compatibility section operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ET)">
      <summary>
            Visit/select ET operator.
            </summary>
      <param name="ET">
            End text object operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.EMC)">
      <summary>
            Visit/select EMC operator.
            </summary>
      <param name="EMC">
            End marked-content sequence operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.EI)">
      <summary>
            Visit/select EI operator.
            </summary>
      <param name="EI">
            End inline image object operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.DP)">
      <summary>
            Visit/select DP operator.
            </summary>
      <param name="DP">
            Define marked-content point operator (with property list).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.Do)">
      <summary>
            Visit/select Do operator.
            </summary>
      <param name="Do">
            Invoke named XObject operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetDash)">
      <summary>
            Visit/select d operator.
            </summary>
      <param name="d">
            Set line dash pattern operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetCharWidth)">
      <summary>
            Visit/select d0 operator.
            </summary>
      <param name="d0">
            Set glyph width in Type 3 font operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetCharWidthBoundingBox)">
      <summary>
            Visit/select d1 operator.
            </summary>
      <param name="d1">
            Set glyph width and bounding box in Type 3 font operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetColorSpaceStroke)">
      <summary>
            Visit/select CS operator.
            </summary>
      <param name="CS">
            Set color space operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetColorSpace)">
      <summary>
            Visit/select cs operator.
            </summary>
      <param name="cs">
            Set color space operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ConcatenateMatrix)">
      <summary>
            Visit/select cm operator.
            </summary>
      <param name="cm">
            Concatenate matrix to current transformation matrix operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.CurveTo)">
      <summary>
            Visit/select c operator.
            </summary>
      <param name="c">
            Append curved segment to path operator (three control points).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.BX)">
      <summary>
            Visit/select BX operator.
            </summary>
      <param name="BX">
            Begin compatibility section operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.BT)">
      <summary>
            Visit/select BT operator.
            </summary>
      <param name="BT">
            Begin text object operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.BMC)">
      <summary>
            Visit/select BMC operator.
            </summary>
      <param name="BMC">
            Begin marked-content sequence operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.BI)">
      <summary>
            Visit/select BI operator.
            </summary>
      <param name="BI">
            Begin inline image object operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.BDC)">
      <summary>
            Visit/select BDC operator.
            </summary>
      <param name="BDC">
            Begin marked-content sequence operator (with property list).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.FillStroke)">
      <summary>
            Visit/select B operator.
            </summary>
      <param name="B">
            Fill and stroke path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ClosePathFillStroke)">
      <summary>
            Visit/select b operator.
            </summary>
      <param name="b">
            Close, fill, and stroke path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.EOFillStroke)">
      <summary>
            Visit/select B* operator.
            </summary>
      <param name="B_">
            Fill and stroke path operator (even-odd rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.ClosePathEOFillStroke)">
      <summary>
            Visit/select b* operator.
            </summary>
      <param name="b_">
            Close, fill, and stroke path operator (even-odd rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.MoveToNextLineShowText)">
      <summary>
            Visit/select ' operator.
            </summary>
      <param name="_">
            Move to next line and show text operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.SetSpacingMoveToNextLineShowText)">
      <summary>
            Visit/select '' operator.
            </summary>
      <param name="__">
            Set word and character spacing, move to next line, and show text operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.IOperatorSelector.Visit(Aspose.Pdf.Operator.TextOperator)">
      <summary>
            Visit/select any text operator operator.
            </summary>
      <param name="textOperator">
            General text operator which is used to select the set of corresponding pdf operators.
            </param>
    </member>
    <member name="T:Aspose.Pdf.License">
      <summary>
            Provides methods to license the component.
            </summary>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.License.Embedded">
      <summary>
            License number was added as embedded resource.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.License.SetLicense(System.String)">
      <summary>
            Licenses the component.
            </summary>
      <remarks>
        <p>Tries to find the license in the following locations:</p>
        <p>1. Explicit path.</p>
        <p>2. The folder of the component assembly.</p>
        <p>3. The folder of the client's calling assembly.</p>
        <p>4. The folder of the entry assembly.</p>
        <p>5. An embedded resource in the client's calling assembly.</p>
        <p>
          <b>Note:</b>On the .NET Compact Framework, tries to find the license only in these locations:</p>
        <p>1. Explicit path.</p>
        <p>2. An embedded resource in the client's calling assembly.</p>
      </remarks>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As License = New License
            license.SetLicense("MyLicense.lic")
            </code><param name="licenseName">Can be a full or short file name or name of an embedded resource.
            Use an empty string to switch to evaluation mode.</param></example>
    </member>
    <member name="M:Aspose.Pdf.License.SetLicense(System.IO.Stream)">
      <summary>
            Licenses the component.
            </summary>
      <param name="stream">A stream that contains the license.</param>
      <remarks>
        <p>Use this method to load a license from a stream.</p>
      </remarks>
      <example>
        <code>
            [C#]
            
            License license = new License();
            license.SetLicense(myStream);
            
            
            [Visual Basic]
            
            Dim license as License = new License
            license.SetLicense(myStream)
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Metadata">
      <summary>
            Provides access to XMP metadata stream.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Metadata.RegisterNamespaceUri(System.String,System.String)">
      <summary>
            Registers namespace URI.
            </summary>
      <param name="prefix">The value of prefix.</param>
      <param name="namespaceUri">The value of namespace URI.</param>
    </member>
    <member name="M:Aspose.Pdf.Metadata.RegisterNamespaceUri(System.String,System.String,System.String)">
      <summary>
            Registers namespace URI.
            </summary>
      <param name="prefix">The value of prefix.</param>
      <param name="namespaceUri">The value of namespace URI.</param>
      <param name="schemaDescription">The value of schema description.</param>
    </member>
    <member name="M:Aspose.Pdf.Metadata.GetNamespaceUriByPrefix(System.String)">
      <summary>
            Returns  namespace URI by prefix.
            </summary>
      <param name="prefix">The value of prefix.</param>
      <returns>The value of namespace URI.</returns>
    </member>
    <member name="M:Aspose.Pdf.Metadata.GetPrefixByNamespaceUri(System.String)">
      <summary>
            Returns prefix by namespace URI.
            </summary>
      <param name="namespaceUri">Namespace URI.</param>
      <returns>The value of prefix.</returns>
    </member>
    <member name="M:Aspose.Pdf.Metadata.Add(System.Object,System.Object)">
      <summary>
            Adds value to metadata.
            </summary>
      <param name="key">The key to add.</param>
      <param name="value">Value which will be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Metadata.Add(System.String,Aspose.Pdf.XmpPdfAExtensionObject)">
      <summary>
            Adds pdf extension to metadata.
            </summary>
      <param name="prefix">The prefix of extension.</param>
      <param name="value">Value which will be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Metadata.Clear">
      <summary>
            Clears metadata.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Metadata.Contains(System.Object)">
      <summary>
            Checks does key is contained in metadata.
            </summary>
      <param name="key">The key of entry to find.</param>
      <returns>True if key is contained in the metadata.</returns>
    </member>
    <member name="M:Aspose.Pdf.Metadata.GetEnumerator">
      <summary>
            Returns dictionary enumerator.
            </summary>
      <returns>Enumerator.</returns>
    </member>
    <member name="P:Aspose.Pdf.Metadata.IsFixedSize">
      <summary>
            Checks if colleciton has fixed size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Metadata.IsReadOnly">
      <summary>
            Checks if collection is read-only.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Metadata.Keys">
      <summary>
            Gets collection of metadata keys.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Metadata.Remove(System.Object)">
      <summary>
            Removes entry from metadata. 
            </summary>
      <param name="key">The key of entry to remove.</param>
    </member>
    <member name="P:Aspose.Pdf.Metadata.Values">
      <summary>
            Gets values in the metadata.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Metadata.ExtensionFields">
      <summary>
            Gets the dictionary of extension fields.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Metadata.Item(System.Object)">
      <summary>
            Gets or sets data from metadata.
            </summary>
      <param name="key">The key name.</param>
      <returns>Metadata object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Metadata.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies elements of the collection into array.
            </summary>
      <param name="array">Destination array.</param>
      <param name="index">Starting index.</param>
    </member>
    <member name="P:Aspose.Pdf.Metadata.Count">
      <summary>
            Gets count of elements in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Metadata.IsSynchronized">
      <summary>
            Checks if collection is synchronized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Metadata.SyncRoot">
      <summary>
            Gets collection synchronization object.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Operator">
      <summary>
            Abstract class representing operator.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Operator.index">
      <summary>
            Index of operator in list.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.Index">
      <summary>
            Operator index in page operators list.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor IOperatorSelector which provides operators processing.
            </summary>
      <param name="visitor">Visitor object</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.ToString">
      <summary>
            Returns text of operator and its parameters.
            </summary>
      <returns>Operator text</returns>
    </member>
    <member name="M:Aspose.Pdf.Operator.IsTextShowOperator(Aspose.Pdf.Operator)">
      <summary>
            Determines if the operator is operator which responsible for text output (Tj, TJ, etc)
            </summary>
      <param name="op">Operator object</param>
      <returns>True if this is text output operator</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.ClosePathFillStroke">
      <summary>
            Class representing b operator (close, fill and stroke path with nonzer winding rule).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.ClosePathFillStroke.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.ClosePathFillStroke.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.ClosePathFillStroke.ToString">
      <summary>
            Returns string representation of operator.
            </summary>
      <returns>String representation</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.FillStroke">
      <summary>
            Class representing B operator (fill and stroke path using nonzero winding rule)
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.FillStroke.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.FillStroke.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.FillStroke.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.ClosePathEOFillStroke">
      <summary>
            Class representing b* operator (close, fill and stroke path using even-odd rule).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.ClosePathEOFillStroke.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.ClosePathEOFillStroke.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.ClosePathEOFillStroke.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.EOFillStroke">
      <summary>
            Class representing B* operator (fill and stroke path usign even-odd rule).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.EOFillStroke.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.BDC">
      <summary>
            class representing BDC operator (Begin marked-content sequence)
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.BDC.#ctor(System.String)">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.BDC.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="P:Aspose.Pdf.Operator.BDC.Tag">
      <summary>
            Gets or sets marked content tag
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.BDC.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.BI">
      <summary>
            Class representing BI operator (Begin inline image obect).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.BI.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.BI.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.BMC">
      <summary>
            Class representing BMC operator (Begin marked-content sequence).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.BMC.#ctor(System.String)">
      <summary>
            Initializes operator.
            </summary>
      <param name="tag">Marked content tag.</param>
    </member>
    <member name="P:Aspose.Pdf.Operator.BMC.Tag">
      <summary>
            Gets or sets marked content tag
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.BMC.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.BMC.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.TextOperator">
      <summary>
            Abstract base class for text-related operators (TJ, Tj, Tm, BT, ET, etc).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.TextOperator.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.TextOperator.#ctor(Aspose.Pdf.Facades.TextProperties)">
      <summary>
            Text operator which accepts text properties. 
            </summary>
      <param name="textProperties">Text properties.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.TextOperator.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.BlockTextOperator">
      <summary>
            Abstract base class for text block operators i.e.  Begin and End text operators (BT/ET)
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.BlockTextOperator.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.BlockTextOperator.#ctor(Aspose.Pdf.Facades.TextProperties)">
      <summary>
            Initializes BlockTextOperator which accepts TextProperties.
            </summary>
      <param name="textProperties">Text properties.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.TextShowOperator">
      <summary>
            Abvstract base class for all operators which used to out text (Tj, TJ, etc).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.TextShowOperator.Text">
      <summary>
            Gets text which operator out on the page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.TextShowOperator.#ctor">
      <summary>
            Initializes TextShowOperator. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.TextShowOperator.#ctor(Aspose.Pdf.Facades.TextProperties)">
      <summary>
            Initializes TextShowOperator which allows to pass TextProperties.
            </summary>
      <param name="textProperties">Text properties.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.TextStateOperator">
      <summary>
            Abstract base class for operators which changes current text state (Tc, Tf, TL, etc).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.TextStateOperator.#ctor">
      <summary>
            Initializes TextStateOperator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.TextStateOperator.#ctor(Aspose.Pdf.Facades.TextProperties)">
      <summary>
            Initializes TextStateoperator which allows to pass TextProperties.
            </summary>
      <param name="textProperties">Text properties.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.TextPlaceOperator">
      <summary>
            Abstract base class for operators which changes text position (Tm, Td, etc).
            
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.TextPlaceOperator.#ctor">
      <summary>
            Initializes TextPlaceOperator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.TextPlaceOperator.#ctor(Aspose.Pdf.Facades.TextProperties)">
      <summary>
            Initializes TextPlaceOperator which accepts TextProperties.
            </summary>
      <param name="textProperties">Text properties.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.BT">
      <summary>
            Class representing BT operator (Begin of text block).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.BT.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.BT.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.BT.ToString">
      <summary>
            Produces text code of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.BX">
      <summary>
            Class representing BX operator (begin compatibility section).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.BX.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.BX.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.BX.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.CurveTo">
      <summary>
            Class representing c operator (append curve to path).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.CurveTo.Points">
      <summary>
            Points of the curve.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.CurveTo.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes curve operator.
            </summary>
      <param name="x1">Abscissa of first point.</param>
      <param name="y1">Ordinate of first point.</param>
      <param name="x2">Abscissa of second point.</param>
      <param name="y2">Ordinate of second point.</param>
      <param name="x3">Abscissa of third point.</param>
      <param name="y3">Ordinate of third point.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.CurveTo.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.CurveTo.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.ConcatenateMatrix">
      <summary>
            Class representing cm operator (concatenate matrix to current transformation matrix).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.ConcatenateMatrix.Matrix">
      <summary>
            Matrix argument of the operator. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.ConcatenateMatrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes operator. 
            </summary>
      <param name="a">A coefficient</param>
      <param name="b">B coefficient</param>
      <param name="c">C coefficient</param>
      <param name="d">D coefficient</param>
      <param name="e">E coefficient</param>
      <param name="f">F coefficient</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.ConcatenateMatrix.#ctor(Aspose.Pdf.Matrix)">
      <summary>
            Initializes operator by matrix.
            </summary>
      <param name="m">Transfomation matrix.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.ConcatenateMatrix.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.ConcatenateMatrix.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of representation</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetColorSpaceStroke">
      <summary>
            Class representing CS operator (set color for stroking operations).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColorSpaceStroke.#ctor(System.String)">
      <summary>
            Initializes operator.
            </summary>
      <param name="name">Color space name.</param>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetColorSpaceStroke.Name">
      <summary>
            Gets or sets color space name.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColorSpaceStroke.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetColorSpace">
      <summary>
            Class representing cs operator (set colorspace for non-stroking operations)
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColorSpace.#ctor(System.String)">
      <summary>
            Initializes operator.
            </summary>
      <param name="name">Color space name.</param>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetColorSpace.Name">
      <summary>
            Gets or sets color space name.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColorSpace.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetDash">
      <summary>
            Class representing d operator (set line dash pattern).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetDash.Pattern">
      <summary>
            Dash pattern. Array’s elements shall be numbers that specify the lengths of alternating dashes and gaps.
            In case of one element array dash and gap lengths are equal.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetDash.Phase">
      <summary>
            Dash phase. Before beginning to stroke a path, the dash array shall be cycled through, adding up the lengths of dashes and gaps. 
            When the accumulated length equals the value specified by the dash phase, stroking of the path shall begin, 
            and the dash array shall be used cyclically from that point onward.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetDash.#ctor(System.Int32[],System.Int32)">
      <summary>
            Creates set dash pattern operator.
            </summary>
      <param name="pattern">Array which defines dash pattern.</param>
      <param name="phase">Dash phase.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetDash.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetDash.ToString">
      <summary>
            Gets operator string representation.
            </summary>
      <returns>
            [x1 x2] y d, where x1 - dash length, x2 - gap length, y - phase.
            </returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetCharWidth">
      <summary>
            Class representing d0 operator (set glyph width).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetCharWidth.Wx">
      <summary>
            Horizontal displacement of glyph coordinate.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetCharWidth.Wy">
      <summary>
            Vertical displacement of glyph coordinate.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetCharWidth.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetCharWidth.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of representation</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetCharWidthBoundingBox">
      <summary>
            Class representing d1 operator (set glyph and bounding box).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetCharWidthBoundingBox.Wx">
      <summary>
            Horizontal displacement of glyph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetCharWidthBoundingBox.Wy">
      <summary>
            Vertical displacement of glyph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetCharWidthBoundingBox.Llx">
      <summary>
            Lower-left horizontal coordinate of bounding rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetCharWidthBoundingBox.Lly">
      <summary>
            Lower-left vertical coordinate of bounding rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetCharWidthBoundingBox.Urx">
      <summary>
            Upper-right horizontal coordinate of bounding rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetCharWidthBoundingBox.Ury">
      <summary>
            Upper-right vertical coordinate of bounding rectangle.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetCharWidthBoundingBox.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetCharWidthBoundingBox.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of representation</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.Do">
      <summary>
            Class representing Do operator (Invoke XObject).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.Do.Name">
      <summary>
            Name of XObject argument of the operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.Do.#ctor(System.String)">
      <summary>
            Constructs new Do operator. 
            </summary>
      <param name="name">Name of invoked XObject.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.Do.#ctor">
      <summary>
            Constructs new Do operator. 
            Used for retrieving all Do operators, i.e. without checking their argument names.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.Do.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.Do.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.DP">
      <summary>
            Class represeting DP operator (designamte marked content point).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.DP.#ctor(System.String)">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.DP.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="P:Aspose.Pdf.Operator.DP.Tag">
      <summary>
            Gets or sets marked content tag
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.DP.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.EI">
      <summary>
            Class representing EI operator (End inline image object).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.EI.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.EI.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.EMC">
      <summary>
            Clsss representing EMC oeprator (End of marked-content sequence).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.EMC.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.EMC.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.EMC.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of the operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.ET">
      <summary>
            Class representing operator ET (End of text block).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.ET.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.ET.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.ET.ToString">
      <summary>
            Produces text code of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.EX">
      <summary>
            Class representing EX operator (End of compatibility section).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.EX.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.EX.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.Fill">
      <summary>
            Class representing f operator (fill path with nonzero winding number rule).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.Fill.#ctor">
      <summary>
            Initilizes new f operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.Fill.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.Fill.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.ObsoleteFill">
      <summary>
            Class representing F oeprator (fill path using nonzero winding rule).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.ObsoleteFill.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.ObsoleteFill.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.EOFill">
      <summary>
            Class representing f* operator (fill path using even-odd rule).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.EOFill.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.EOFill.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetGrayStroke">
      <summary>
            Class representing gray level for stroking operations.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetGrayStroke.getColor">
      <summary>
            Returns color specified by operator.
            </summary>
      <returns>Color specified by operator.</returns>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetGrayStroke.#ctor(System.Double)">
      <summary>
            Initializes operator with the specified color.
            </summary>
      <param name="gray">The level of gray value.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetGrayStroke.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetGrayStroke.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetGray">
      <summary>
            Set gray level for non-stroking operations. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetGray.getColor">
      <summary>
            Returns color specified by operator.
            </summary>
      <returns>Color specified by operator.</returns>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetGray.#ctor(System.Double)">
      <summary>
            Initializes operator.
            </summary>
      <param name="gray">The level of gray value.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetGray.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetGray.ToString">
      <summary>
            Returns string represnetation of operator.
            </summary>
      <returns>String representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.GS">
      <summary>
            Class representing gs operator (set parameters from graphic state parameter dictionary).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.GS.Name">
      <summary>
            Gets or sets name of graphic state resource.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.GS.#ctor(System.String)">
      <summary>
            Initializes gs operator.
            </summary>
      <param name="name">Name of graphic state.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.GS.ToString">
      <summary>
            Returns string represnetation of operator.
            </summary>
      <returns>String representation of operator.</returns>
    </member>
    <member name="M:Aspose.Pdf.Operator.GS.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.ClosePath">
      <summary>
            Class representing h operator (close path).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.ClosePath.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.ClosePath.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetFlat">
      <summary>
            Class representing i operator (set flatness tolerance).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetFlat.#ctor(System.Double)">
      <summary>
            Initializes operator.
            </summary>
      <param name="flatness">The value of flatness.</param>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetFlat.Flatness">
      <summary>
            Gets or sets the flatness.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetFlat.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.ID">
      <summary>
            Class representing ID operator (Begin inline image data).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.ID.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetLineJoin">
      <summary>
            Class representing j operator (set line join style).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetLineJoin.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetLineCap">
      <summary>
            Class representing J operator (set line cap style).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetLineCap.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetCMYKColorStroke">
      <summary>
            Class representing K operator (set CMYK color for stroking operations).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetCMYKColorStroke.getColor">
      <summary>
            Returns the RGB color 
            </summary>
      <returns>Color specified by operator.</returns>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetCMYKColorStroke.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes operator.
            </summary>
      <param name="c">The level of cyan from 0.0 to 1.0</param>
      <param name="m">The level of magenta from 0.0 to 1.0</param>
      <param name="y">The level of yellow from 0.0 to 1.0</param>
      <param name="k">The level of black from 0.0 to 1.0</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetCMYKColorStroke.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetCMYKColor">
      <summary>
            Class representing k operator (set CMYK color for non-stroknig operations).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetCMYKColor.getColor">
      <summary>
            Returns color.
            </summary>
      <returns>Color specified by operator.</returns>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetCMYKColor.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes operator.
            </summary>
      <param name="c">The level of cyan from 0.0 to 1.0</param>
      <param name="m">The level of magenta from 0.0 to 1.0</param>
      <param name="y">The level of yellow from 0.0 to 1.0</param>
      <param name="k">The level of black from 0.0 to 1.0</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetCMYKColor.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.LineTo">
      <summary>
            Class representing l operator (add line to the path).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.LineTo.X">
      <summary>
            X coordinate of line point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.LineTo.Y">
      <summary>
            Y coordinate of line point.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.LineTo.#ctor(System.Double,System.Double)">
      <summary>
            Initializes line operator.
            </summary>
      <param name="x">X coordinate.</param>
      <param name="y">Y coordinate.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.LineTo.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.LineTo.ToString">
      <summary>
            Returns text representation of the operator.
            </summary>
      <returns>Text representation of the operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.MoveTo">
      <summary>
            Class representing m operator (move to and begin new subpath).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.MoveTo.X">
      <summary>
            X coordinate 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.MoveTo.Y">
      <summary>
            Y coordinate
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.MoveTo.#ctor(System.Double,System.Double)">
      <summary>
            Inintalizes new <see cref="!:Operator.m" /> (move to) operator.
            </summary>
      <param name="x">The x-coordinate.</param>
      <param name="y">The y-coordinate.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.MoveTo.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.MoveTo.ToString">
      <summary>
            Returns text representation of the operator.
            </summary>
      <returns>Text representation of the operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetMiterLimit">
      <summary>
            Class representing M operator (set miter limit).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetMiterLimit.#ctor(System.Double)">
      <summary>
            Initializes operator.
            </summary>
      <param name="miterLimit">Mitel limit.</param>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetMiterLimit.MiterLimit">
      <summary>
            Gets or sets the miter limit.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetMiterLimit.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.MP">
      <summary>
            Class representing MP operator (define marked-content point).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.MP.#ctor(System.String)">
      <summary>
            Initializes operator.
            </summary>
      <param name="tag">Marked content tag.</param>
    </member>
    <member name="P:Aspose.Pdf.Operator.MP.Tag">
      <summary>
            Gets or sets marked content tag
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.MP.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.EndPath">
      <summary>
            Class representing n operator (end path without filling or stroking).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.EndPath.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.EndPath.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.EndPath.ToString">
      <summary>
            Text representation of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.GSave">
      <summary>
            Class representing q operator (save graphics state).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.GSave.#ctor">
      <summary>
            Initializes q operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.GSave.ToString">
      <summary>
            Returns text of the operator.
            </summary>
      <returns>Text representation of the operator.</returns>
    </member>
    <member name="M:Aspose.Pdf.Operator.GSave.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.GRestore">
      <summary>
            Class representing Q operator (restore graphics state).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.GRestore.#ctor">
      <summary>
            Initializes Q operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.GRestore.ToString">
      <summary>
            Returns text of the operator.
            </summary>
      <returns>Text representation of the operator.</returns>
    </member>
    <member name="M:Aspose.Pdf.Operator.GRestore.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.Re">
      <summary>
            Class representing re operator (add rectangle to the path).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.Re.X">
      <summary>
            X coordinate of most left side of rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.Re.Y">
      <summary>
            Y corrdinate of bottom side of rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.Re.Width">
      <summary>
            Width of the rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.Re.Height">
      <summary>
            Height of the rectangle.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.Re.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.Re.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes operator.
            </summary>
      <param name="x">The x-coordinate of the bottom-left corner of the rectangle.</param>
      <param name="y">The y-coordinate of the bottom-left corner of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.Re.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.Re.ToString">
      <summary>
            Returns text representation of the operator.
            </summary>
      <returns>Text representation of the operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetColorOperator">
      <summary>
            Class representing set color operation. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColorOperator.getColor">
      <summary>
            Retirns color specified by the operator.
            </summary>
      <returns>Color specified by operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetRGBColorStroke">
      <summary>
            Class representing RG operator (set RGB color for stroking operators).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetRGBColorStroke.getColor">
      <summary>
            Returns color specified by operator.
            </summary>
      <returns>Color specified by operator.</returns>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetRGBColorStroke.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes operator.
            </summary>
      <param name="r">The level of red from 0.0 to 1.0</param>
      <param name="g">The level of green from 0.0 to 1.0</param>
      <param name="b">The level of blue from 0.0 to 1.0</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetRGBColorStroke.#ctor(System.Drawing.Color)">
      <summary>
            Initializes operator with color.
            </summary>
      <param name="color">Operator color.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetRGBColorStroke.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetRGBColorStroke.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetRGBColor">
      <summary>
            Class representing rg operator (set RGB color for non-stroknig operators).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetRGBColor.getColor">
      <summary>
            Returns color specified by operator.
            </summary>
      <returns>Color specified by operator.</returns>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetRGBColor.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes operator.
            </summary>
      <param name="r">The level of red from 0.0 to 1.0</param>
      <param name="g">The level of green from 0.0 to 1.0</param>
      <param name="b">The level of blue from 0.0 to 1.0</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetRGBColor.#ctor(System.Drawing.Color)">
      <summary>
            Initializes operator with color.
            </summary>
      <param name="color">Specfied color.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetRGBColor.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetRGBColor.ToString">
      <summary>
            Returns text representation of the operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetColorRenderingIntent">
      <summary>
            Class representing ri operator (set color rendering intent).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColorRenderingIntent.#ctor(System.String)">
      <summary>
            Set Color Rendering Intent operator constructor.
            </summary>
      <param name="intentName">Color Rendering Intent.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColorRenderingIntent.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetColorRenderingIntent.IntentName">
      <summary>
            Gets or sets color rendering intent name.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Operator.ClosePathStroke">
      <summary>
            Class representing s operator (Close and stroke path).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.ClosePathStroke.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.ClosePathStroke.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.ClosePathStroke.ToString">
      <summary>
            Returns text representation of the operator.
            </summary>
      <returns>Text representation of the operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.Stroke">
      <summary>
            Class representing S operator (stroke path).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.Stroke.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.Stroke.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.Stroke.ToString">
      <summary>
            Returns text representation of the operator.
            </summary>
      <returns>Text representation of the operator.</returns>
    </member>
    <member name="P:Aspose.Pdf.Operator.BasicSetColorOperator.R">
      <summary>
            Gets red component of color
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.BasicSetColorOperator.G">
      <summary>
            Gets green component of color
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.BasicSetColorOperator.B">
      <summary>
            Gets red component of color
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.BasicSetColorOperator.C">
      <summary>
            Gets cyan compoent of CMYK color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.BasicSetColorOperator.M">
      <summary>
            Gets magenta compoent of CMYK color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.BasicSetColorOperator.Y">
      <summary>
            Gets yellow compoent of CMYK color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.BasicSetColorOperator.K">
      <summary>
            Gets black compoent of CMYK color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.BasicSetColorOperator.Grey">
      <summary>
            Gets black compoent of gray color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.BasicSetColorOperator.Color">
      <summary>
            Gets array of color components.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetColorStroke">
      <summary>
            Class representing SC operator set color for stroking color operators.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColorStroke.getColor">
      <summary>
            Returns color specified by operator.
            </summary>
      <returns>Color specified by operator.</returns>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColorStroke.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColorStroke.#ctor(System.Double)">
      <summary>
            Set color for stroking operators for DeviceGrey, CalGrey and Indexed color spaces. 
            </summary>
      <param name="g">Colro value.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColorStroke.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Set color for stroking operator for DeviceRGB, CalRGB, and Lab color spaces
            </summary>
      <param name="r">Red component.</param>
      <param name="g">Green component.</param>
      <param name="b">Blue component.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColorStroke.#ctor(System.Double[])">
      <summary>
            Constructor which allows to set color components.
            </summary>
      <param name="color">Array of color components.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColorStroke.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Set color for strokinbg operator for CMYK colro space
            </summary>
      <param name="c">cyan component.</param>
      <param name="m">Magenta component.</param>
      <param name="y">Yellow component.</param>
      <param name="k">Black component.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColorStroke.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetColor">
      <summary>
            Represents class for sc operator (set color for non-stroknig operations).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColor.getColor">
      <summary>
            Returns color specified by the operator.
            </summary>
      <returns>Operator color.</returns>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColor.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColor.#ctor(System.Double)">
      <summary>
            Set color for stroking operators for DeviceGrey, CalGrey and Indexed color spaces. 
            </summary>
      <param name="g">Color value.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColor.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Set color for stroking operator for DeviceRGB, CalRGB, and Lab color spaces
            </summary>
      <param name="r">Red component.</param>
      <param name="g">Green component.</param>
      <param name="b">Blue component.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColor.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Set color for non-stroking operator for CMYK colro space
            </summary>
      <param name="c">Cyan component.</param>
      <param name="m">Magenta component.</param>
      <param name="y">Yellow component.</param>
      <param name="k">Black component.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColor.#ctor(System.Double[])">
      <summary>
            Constructor which allows to specify color components.
            </summary>
      <param name="color">Array of color components.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColor.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetColor.ToString">
      <summary>
            String represenation.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.Pdf.Operator.BasicSetColorAndPatternOperator.PatternName">
      <summary>
            Gets Pattern Name.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetAdvancedColorStroke">
      <summary>
            Class representing SCN operator (set color for stroking operations).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetAdvancedColorStroke.getColor">
      <summary>
            Returns color specified by operator.
            </summary>
      <returns>Color specifid by operator.</returns>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetAdvancedColorStroke.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetAdvancedColorStroke.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetAdvancedColorStroke.#ctor(System.Double)">
      <summary>
            Constructor for scn operator 
            </summary>
      <param name="g">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetAdvancedColorStroke.#ctor(System.Double,System.String)">
      <summary>
            Constructor for scn operator.  
            </summary>
      <param name="g">Gray color value.</param>
      <param name="patternName">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetAdvancedColorStroke.#ctor(System.Double,System.Double,System.Double,System.String)">
      <summary>
            Constructor for scn operator.
            </summary>
      <param name="r">Red component of the color/</param>
      <param name="g">Green component of the color.</param>
      <param name="b">Blue component of the color.</param>
      <param name="patternName">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetAdvancedColorStroke.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
      <summary>
            Constructor for scn operator.
            </summary>
      <param name="c">Cyan component of the color.</param>
      <param name="m">Magenta component of the color.</param>
      <param name="y">Yellow component of the color. </param>
      <param name="k">Black component of the color</param>
      <param name="patternName">Name of the pattern.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetAdvancedColor">
      <summary>
            Class representing scn operator (set color for non-stroking operations).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetAdvancedColor.getColor">
      <summary>
            Retuns color specified by operator.
            </summary>
      <returns>Color set by operator.</returns>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetAdvancedColor.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetAdvancedColor.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetAdvancedColor.#ctor(System.Double,System.String)">
      <summary>
            Constructor for scn operartor.
            </summary>
      <param name="g">Color value.</param>
      <param name="patternName">Pattern name.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetAdvancedColor.#ctor(System.Double)">
      <summary>
            Constructor for scn operartor
            </summary>
      <param name="g">Color value.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetAdvancedColor.#ctor(System.Double,System.Double,System.Double,System.String)">
      <summary>
            Constructor for scn operator.
            </summary>
      <param name="r">Red component of the color.</param>
      <param name="g">Green component of the color.</param>
      <param name="b">Blue component of the color.</param>
      <param name="patterName">
      </param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetAdvancedColor.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
      <summary>
            Constructor for scn operator.
            </summary>
      <param name="c">Cyan component of the color.</param>
      <param name="m">Magenta component of the color.</param>
      <param name="y">Yellow component of the color.</param>
      <param name="k">Black component of the color.</param>
      <param name="patternName">
      </param>
    </member>
    <member name="T:Aspose.Pdf.Operator.ShFill">
      <summary>
            Class representing sh operator (paint area with shadeing pattern).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.ShFill.Name">
      <summary>
            Gets or sets the shading name.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.ShFill.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.ShFill.#ctor(System.String)">
      <summary>
      </summary>
      <param name="shadingName">
      </param>
    </member>
    <member name="T:Aspose.Pdf.Operator.MoveToNextLine">
      <summary>
            Class  representing T* operator (Move to start of the next line).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.MoveToNextLine.#ctor">
      <summary>
            Initializes operator. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.MoveToNextLine.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.MoveToNextLine.ToString">
      <summary>
            Returns text of the operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetCharacterSpacing">
      <summary>
            Class representing Tc operator (set character spacing).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetCharacterSpacing.#ctor(System.Double)">
      <summary>
            Initializes operator.
            </summary>
      <param name="charSpacing">Character spacing.</param>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetCharacterSpacing.CharSpacing">
      <summary>
            Gets or sets the character spacing.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetCharacterSpacing.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.MoveTextPosition">
      <summary>
            Class representing Td operator (move text position).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.MoveTextPosition.X">
      <summary>
            X coordinate of text position.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.MoveTextPosition.Y">
      <summary>
            Y coordinate of text position.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.MoveTextPosition.#ctor(System.Double,System.Double)">
      <summary>
            Initializes operator.
            </summary>
      <param name="x">X coordinate of text position.</param>
      <param name="y">Y coordinate of text position.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.MoveTextPosition.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.MoveTextPosition.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.MoveTextPositionSetLeading">
      <summary>
            Class representing TD operator (move position and set leading).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.MoveTextPositionSetLeading.X">
      <summary>
            X coordinate of text position.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.MoveTextPositionSetLeading.Y">
      <summary>
            Y coordinate of text position.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.MoveTextPositionSetLeading.#ctor(System.Double,System.Double)">
      <summary>
            Initializes operator.
            </summary>
      <param name="x">X coordinate of text position.</param>
      <param name="y">Y coordinate of text position.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.MoveTextPositionSetLeading.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.SelectFont">
      <summary>
            Class representing Tf operator (set text font and size).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.SelectFont.Name">
      <summary>
            Name of font.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.SelectFont.Size">
      <summary>
            Size of text.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SelectFont.#ctor(System.String,System.Double)">
      <summary>
            Initializes operator.
            </summary>
      <param name="resName">The name of font resource, e.g. F1, F2 etc.</param>
      <param name="size">Size of the font.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SelectFont.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SelectFont.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.ShowText">
      <summary>
            Class representing Tj operator (show text).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.ShowText.Text">
      <summary>
            Text of operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.ShowText.#ctor(System.Int32,System.String)">
      <summary>
            Initializes Tj opearor. 
            </summary>
      <param name="index">Index of operator in operators list.</param>
      <param name="text">argument of the operator.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.ShowText.#ctor(System.String)">
      <summary>
            Initializes Tj operator. 
            </summary>
      <param name="text">argument of the operator.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.ShowText.#ctor(System.String,Aspose.Pdf.Text.Font)">
      <summary>
            Initializes Tj opearor.
            </summary>
      <param name="text">text to add.</param>
      <param name="font">font that is used to draw the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.ShowText.#ctor">
      <summary>
            Initializes Tj operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.ShowText.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.ShowText.ToString">
      <summary>
            Produces text code of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.GlyphPosition">
      <summary>
            Class describes text and position to use with operator TJ (set glyph with position)
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetGlyphsPositionShowText">
      <summary>
            Class representing TJ operator (show text with glyph positioning).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetGlyphsPositionShowText.Text">
      <summary>
            Gets text from operator argument (glyph positioning is ignored).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetGlyphsPositionShowText.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetGlyphsPositionShowText.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetTextLeading">
      <summary>
            Class represenging TL operator (set text leading).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetTextLeading.#ctor(System.Double)">
      <summary>
            Initializes text leading operator. 
            </summary>
      <param name="leading">Text leading.</param>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetTextLeading.Leading">
      <summary>
            Gets or sets the text leading.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetTextLeading.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetTextLeading.ToString">
      <summary>
            Produces text code of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetTextMatrix">
      <summary>
            Class representig Tm operator (set text matrix).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetTextMatrix.Matrix">
      <summary>
            Matrix argument of the operator. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetTextMatrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes operator.
            </summary>
      <param name="a">A coefficient</param>
      <param name="b">B coefficient</param>
      <param name="c">C coefficient</param>
      <param name="d">D coefficient</param>
      <param name="e">E coefficient</param>
      <param name="f">F coefficient</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetTextMatrix.#ctor(Aspose.Pdf.Matrix)">
      <summary>
            Initializes operator by matrix.
            </summary>
      <param name="m">Transfomation matrix.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetTextMatrix.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetTextMatrix.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetTextRenderingMode">
      <summary>
            Class representing Tr operator (set text rendering mode).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetTextRenderingMode.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetTextRise">
      <summary>
            Class representing Ts operator (set text rise).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetTextRise.#ctor(System.Double)">
      <summary>
            Initializes operator.
            </summary>
      <param name="textRise">Text rise.</param>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetTextRise.TextRise">
      <summary>
            Gets or sets the text rise.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetTextRise.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetWordSpacing">
      <summary>
            Class representing Tw operator (set word spacing).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetWordSpacing.#ctor(System.Double)">
      <summary>
            Initializes operator.
            </summary>
      <param name="wordSpacing">Word spacing.</param>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetWordSpacing.WordSpacing">
      <summary>
            Gets or sets the word spacing.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetWordSpacing.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetHorizontalTextScaling">
      <summary>
            Class representing Tz operator (set horizontal text scaling).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetHorizontalTextScaling.#ctor(System.Double)">
      <summary>
            Initializes operator.
            </summary>
      <param name="horizintalScaling">Horizontal scaling.</param>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetHorizontalTextScaling.HorizontalScaling">
      <summary>
            Gets or sets the horizontal scaling.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetHorizontalTextScaling.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.CurveTo1">
      <summary>
            Class representing v operator (append curve to path, initial point replicated).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.CurveTo1.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes curve operator.
            </summary>
      <param name="x2">Abscissa of second point.</param>
      <param name="y2">Ordinate of second point.</param>
      <param name="x3">Abscissa of third point.</param>
      <param name="y3">Ordinate of third point.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.CurveTo1.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts operator selector.
            </summary>
      <param name="visitor">Visitor object</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetLineWidth">
      <summary>
            Class representing w operator (set line width).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetLineWidth.Width">
      <summary>
            Gets or sets width of the line. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetLineWidth.#ctor(System.Double)">
      <summary>
            Initializes operator with width value.
            </summary>
      <param name="width">Line width.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetLineWidth.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetLineWidth.ToString">
      <summary>
            Returns text representation of operator.
            </summary>
      <returns>Text representation.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.Clip">
      <summary>
            Class representing W operator (set clipping path using non-zero winding rule).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.Clip.#ctor">
      <summary>
            Initializes operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.Clip.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.Clip.ToString">
      <summary>
            Returns text representation of operators.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="T:Aspose.Pdf.Operator.EOClip">
      <summary>
            Class representing W* operator (set clipping path using even-odd rule).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.EOClip.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.CurveTo2">
      <summary>
            Class representing y operator (append curve to path, final point replicated).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.CurveTo2.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes curve operator.
            </summary>
      <param name="x1">Abscissa of second point.</param>
      <param name="y1">Ordinate of second point.</param>
      <param name="x3">Abscissa of third point.</param>
      <param name="y3">Ordinate of third point.</param>
    </member>
    <member name="M:Aspose.Pdf.Operator.CurveTo2.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.MoveToNextLineShowText">
      <summary>
            Class representing ' operator (move to next line and show text).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.MoveToNextLineShowText.Text">
      <summary>
            Gets operator text.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.MoveToNextLineShowText.#ctor">
      <summary>
            Initializesoperator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.MoveToNextLineShowText.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.Operator.SetSpacingMoveToNextLineShowText">
      <summary>
            Class representing " operator (set word and character spacing, move to the next line and show text).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetSpacingMoveToNextLineShowText.Aw">
      <summary>
            Gets word spacing.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetSpacingMoveToNextLineShowText.Ac">
      <summary>
            Get character spacing. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Operator.SetSpacingMoveToNextLineShowText.Text">
      <summary>
            Gets text of operator.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Operator.SetSpacingMoveToNextLineShowText.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts visitor object to process operator.
            </summary>
      <param name="visitor">Visitor object.</param>
    </member>
    <member name="T:Aspose.Pdf.OperatorCollection">
      <summary>
            Class represents collection of operators
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OperatorCollection.Count">
      <summary>
            Gets count of operators in the collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OperatorCollection.IsSynchronized">
      <summary>
            Returns true if object is synchronized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OperatorCollection.IsFastTextExtractionMode">
      <summary>
            Indicates wheather collection is limited to fast text extraction
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OperatorCollection.SyncRoot">
      <summary>
            Gets synchronization object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies operators into operators list.
            </summary>
      <param name="array">Array with operators which must to be copied. This array must be Object[] or Operator[].</param>
      <param name="index">Starting index from which operators will be copied</param>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.GetEnumerator">
      <summary>
            Returns enumerator for collection
            </summary>
      <returns>Collection enumerator</returns>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Accept(Aspose.Pdf.IOperatorSelector)">
      <summary>
            Accepts IOperatorSelector visitor object to process operators.
            </summary>
      <param name="visitor">Visitor object</param>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Add(Aspose.Pdf.Operator)">
      <summary>
            Adds new operator into collection.
            </summary>
      <param name="op">Operator which must be added</param>
      <example>
            Example demonstrates how to add operators to the end of page.contents.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            doc.Pages[1].Contents.Add(new Aspose.Pdf.Operator.q());
            doc.Pages[1].Contents.Add(new Aspose.Pdf.Operator.Q());
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Delete(System.Int32)">
      <summary>
            Deletes operator from collection.
            </summary>
      <param name="index">Index of operator which must be deleted. Operators numbering starts from 1.</param>
      <example>
            Example demonstrates how to delete operator by its index.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            OperatorCollection oc = doc.Pages[1].Contents;
            oc.Delete(3);
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Insert(System.Int32,Aspose.Pdf.Operator)">
      <summary>
            Inserts operator into collection.
            </summary>
      <param name="index">Index where new operator must be added</param>
      <param name="op">Operator which will be insterted</param>
      <example>
            Example demonstrates how to insert operator to the page contents.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            OperatorCollection oc = doc.Pages[1].Contents;
            oc.Insert(1, new Aspose.Pdf.Operator.q());
            oc.Add(new Aspose.Pdf.Operator.Q());
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Replace(System.Collections.IList)">
      <summary>
            Replace operators in collection with other operators.
            </summary>
      <param name="operators">Operators list which will replace operators currently contained in the collection. Eash operator from the list must have correct index in range [1..N] where N is count of operators in the collection</param>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Add(Aspose.Pdf.Operator[])">
      <summary>
            Add operators at the end of the contents operators.
            </summary>
      <param name="ops">Array of operators to be added. Each operator can have any index (by default -1) because they come to the end of the contents operators i.e. indices are assigned automatically.</param>
      <example>
            Example demonstrates how to add  operator to the end of page contents.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            OperatorCollection oc = doc.Pages[1].Contents;
            oc.Add(new Operator[] { new Aspose.Pdf.Operator.q(), new Aspose.Pdf.Operator.Q() } );
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Insert(System.Int32,Aspose.Pdf.Operator[])">
      <summary>
            Insert operators at the the given position.
            </summary>
      <param name="at">Index from which operators are being started to insert.</param>
      <param name="ops">Array of operators to be inserted. Each operator can have any index (by default -1) because their indices adjusted automatically starting from <paramref name="at" />.</param>
      <example>
            Example demonstrates how to insert operator to the page contents.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            OperatorCollection oc = doc.Pages[1].Contents;
            oc.Insert(1, new Operator[] { new Aspose.Pdf.Operator.q(), new Aspose.Pdf.Operator.Q() } );
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.OperatorCollection.Item(System.Int32)">
      <summary>
            Gets operator by its index.
            </summary>
      <param name="index">Index of operator. Numbering is starts from 1.</param>
      <returns>Operator from requested index</returns>
      <example>
            Example demonstrates how to get operator of page contents by index.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            OperatorCollection oc = doc.Pages[1].Contents;
            Operator first = oc[1];
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Delete(Aspose.Pdf.Operator[])">
      <summary>
            Deletes operators from collection.
            </summary>
      <param name="ops">Array of operators to delete</param>
      <example>
            Example demonstrates how to remove operator from page contents.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            OperatorCollection oc = doc.Pages[1].Contents;
            oc.Delete(new Operator[] { oc[1] } );
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Delete(System.Collections.IList)">
      <summary>
            Deletes operators from collection.
            </summary>
      <param name="list">The list of operators to delete</param>
      <example>
            Example demonstrates how to remove operator from page contents.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            OperatorCollection oc = doc.Pages[1].Contents;
            List&lt;Operator&gt; opList = new List&lt;Operator&gt;();
            opList.Add(oc[1]);
            oc.Delete(opList);
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Insert(System.Int32,System.Collections.IList)">
      <summary>
            Insert operators at the the given position.
            </summary>
      <param name="at">Index from which operators are being started to insert.</param>
      <param name="ops">Array of operators to be inserted.</param>
      <example>
            Example demonstrates how to insert operators to page contents.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            OperatorCollection oc = doc.Pages[1].Contents;
            List&lt;Operator&gt; opList = new List&lt;Operator&gt;();
            opList.Add(new Operator.q());
            opList.Add(new Operator.Q());
            oc.Insert(1, opList);
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Clear">
      <summary>
            Removes all operators from list.
            </summary>
      <example>
            Example demonstrates how to clear page contents.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            doc.Pages[1].Clear();
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.ToString">
      <summary>
            Returns text representation of the operator.
            </summary>
      <returns>Text representation of operator.</returns>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.Add(System.Collections.ICollection)">
      <summary>
            Adds to collection all operators from other collection.
            </summary>
      <param name="ops">collection whitch contains operators which will be added.</param>
      <example>
            Example demonstrates how to add operator collection to the page contents.
            <code lang="C#">
            Document doc = new Document("input.pdf");
            OperatorCollection oc = doc.Pages[1].Contents;
            List&lt;Operator&gt; opList = new List&lt;Operator&gt;();
            opList.Add(new AOperator.q());
            opList.Add(new Operator.Q());
            oc.Add(opList);
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.SuppressUpdate">
      <summary> 
            Suppresses update contents data.
            The contents stream is not updated until ResumeUpdate is called.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.ResumeUpdate">
      <summary>
            Resumes document update.
            Updates contents stream in case there are any pending changes.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.OperatorCollection.CancelUpdate">
      <summary>
            Cancels last update.
            This method may be called when the change should not raise contents update.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.OperatorSelector">
      <summary>
             This class is used for selecting operators using Visitor template idea.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.#ctor(Aspose.Pdf.Operator)">
      <summary>
            Initializes new <see cref="T:Aspose.Pdf.OperatorSelector" />.
            </summary>
      <param name="op">
            The operator to visit/select.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetLineJoin)">
      <summary>
            Visit/select j operator.
            </summary>
      <param name="j">
            Set line join style operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.EX)">
      <summary>
            Visit/select EX operator.
            </summary>
      <param name="EX">
            End compatibility section operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ET)">
      <summary>
            Visit/select ET operator.
            </summary>
      <param name="ET">
            End text object operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.EMC)">
      <summary>
            Visit/select EMC operator.
            </summary>
      <param name="EMC">
            End marked-content sequence operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.EI)">
      <summary>
            Visit/select EI operator.
            </summary>
      <param name="EI">
            End inline image object operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.DP)">
      <summary>
            Visit/select DP operator.
            </summary>
      <param name="DP">
            Define marked-content point operator (with property list).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.Do)">
      <summary>
            Visit/select Do operator.
            </summary>
      <param name="Do">
            Invoke named XObject operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetCharWidthBoundingBox)">
      <summary>
            Visit/select d1 operator.
            </summary>
      <param name="d1">
            Set glyph width and bounding box in Type 3 font operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetCharWidth)">
      <summary>
            Visit/select d0 operator.
            </summary>
      <param name="d0">
            Set glyph width in Type 3 font operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetDash)">
      <summary>
            Visit/select d operator.
            </summary>
      <param name="d">
            Set line dash pattern operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetColorSpaceStroke)">
      <summary>
            Visit/select CS operator.
            </summary>
      <param name="CS">
            Set color space operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetColorSpace)">
      <summary>
            Visit/select cs operator.
            </summary>
      <param name="cs">
            Set color space operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ConcatenateMatrix)">
      <summary>
            Visit/select cm operator.
            </summary>
      <param name="cm">
            Concatenate matrix to current transformation matrix operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.CurveTo)">
      <summary>
            Visit/select c operator.
            </summary>
      <param name="c">
            Append curved segment to path operator (three control points).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.BX)">
      <summary>
            Visit/select BX operator.
            </summary>
      <param name="BX">
            Begin compatibility section operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.BT)">
      <summary>
            Visit/select BT operator.
            </summary>
      <param name="BT">
            Begin text object operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.BMC)">
      <summary>
            Visit/select BMC operator.
            </summary>
      <param name="BMC">
            Begin marked-content sequence operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.BI)">
      <summary>
            Visit/select BI operator.
            </summary>
      <param name="BI">
            Begin inline image object operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.BDC)">
      <summary>
            Visit/select BDC operator.
            </summary>
      <param name="BDC">
            Begin marked-content sequence operator (with property list).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.FillStroke)">
      <summary>
            Visit/select B operator.
            </summary>
      <param name="B">
            Fill and stroke path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ClosePathFillStroke)">
      <summary>
            Visit/select b operator.
            </summary>
      <param name="b">
            Close, fill, and stroke path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.EOFillStroke)">
      <summary>
            Visit/select B* operator.
            </summary>
      <param name="B_">
            Fill and stroke path operator (even-odd rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ClosePathEOFillStroke)">
      <summary>
            Visit/select b* operator.
            </summary>
      <param name="b_">
            Close, fill, and stroke path operator (even-odd rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.MoveToNextLineShowText)">
      <summary>
            Visit/select ' operator.
            </summary>
      <param name="_">
            Move to next line and show text operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetSpacingMoveToNextLineShowText)">
      <summary>
            Visit/select '' operator.
            </summary>
      <param name="__">
            Set word and character spacing, move to next line, and show text operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.EOFill)">
      <summary>
            Visit/select operator f*.
            </summary>
      <param name="f_">
            Fill path operator (even-odd rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.Fill)">
      <summary>
            Visit/select f operator.
            </summary>
      <param name="f">
            Fill path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ObsoleteFill)">
      <summary>
            Visit/select F operator.
            </summary>
      <param name="F">
            Fill path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetGray)">
      <summary>
            Visit/select g operator.
            </summary>
      <param name="g">
            Set gray level operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetGrayStroke)">
      <summary>
            Visit/select G operator.
            </summary>
      <param name="G">
            Set gray level operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.GS)">
      <summary>
            Visit/select gs operator.
            </summary>
      <param name="gs">
            Set graphics state operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ClosePath)">
      <summary>
            Visit/select h operator.
            </summary>
      <param name="h">
            Close subpath operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetFlat)">
      <summary>
            Visit/select i operator.
            </summary>
      <param name="i">
            Set flatness tolerance operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ID)">
      <summary>
            Visit/select ID operator.
            </summary>
      <param name="ID">
            Begin inline image data operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetLineCap)">
      <summary>
            Visit/select J operator.
            </summary>
      <param name="J">
            Set line cap style operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetCMYKColor)">
      <summary>
            Visit/select k operator.
            </summary>
      <param name="k">
            Set CMYK color operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetCMYKColorStroke)">
      <summary>
            Visit/select K operator.
            </summary>
      <param name="K">
            Set CMYK color operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.LineTo)">
      <summary>
            Visit/select l operator.
            </summary>
      <param name="l">
            Append straight line segment to path operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.MoveTo)">
      <summary>
            Visit/select m operator.
            </summary>
      <param name="m">
            Begin new subpath operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetMiterLimit)">
      <summary>
            Visit/select M operator.
            </summary>
      <param name="M">
            Set miter limit operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.MP)">
      <summary>
            Visit/select MP operator.
            </summary>
      <param name="MP">
            Define marked-content point operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.EndPath)">
      <summary>
            Visit/select n operator.
            </summary>
      <param name="n">
            End path operator (without filling or stroking).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.GSave)">
      <summary>
            Visit/select q operator.
            </summary>
      <param name="q">
            Save graphics state operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.GRestore)">
      <summary>
            Visit/select Q operator.
            </summary>
      <param name="Q">
            Restore graphics state operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.Re)">
      <summary>
            Visit/select re operator.
            </summary>
      <param name="re">
            Append rectangle to path operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetRGBColor)">
      <summary>
            Visit/select rg operator.
            </summary>
      <param name="rg">
            Set RGB color operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetRGBColorStroke)">
      <summary>
            Visit/select RG operator.
            </summary>
      <param name="RG">
            Set RGB color operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetColorRenderingIntent)">
      <summary>
            Visit/select ri operator.
            </summary>
      <param name="ri">
            Set color rendering intent operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ClosePathStroke)">
      <summary>
            Visit/select s operator.
            </summary>
      <param name="s">
            Close and stroke path operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.Stroke)">
      <summary>
            Visit/select S operator.
            </summary>
      <param name="S">
            Stroke path operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetColor)">
      <summary>
            Visit/select sc operator.
            </summary>
      <param name="sc">
            Set color operator (for nonstroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetColorStroke)">
      <summary>
            Visit/select SC operator.
            </summary>
      <param name="SC">
            Set color operator (for stroking operations).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetAdvancedColor)">
      <summary>
            Visit/select scn operator.
            </summary>
      <param name="scn">
            Set color operator (for nonstroking operations, ICCBased and special colour spaces).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetAdvancedColorStroke)">
      <summary>
            Visit/select SCN operator.
            </summary>
      <param name="SCN">
            Set color operator (for stroking operations, ICCBasedand special colour spaces).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ShFill)">
      <summary>
            Visit/select sh operator.
            </summary>
      <param name="sh">
            Paint area defined by shading pattern operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.MoveToNextLine)">
      <summary>
            Visit/select T* operator.
            </summary>
      <param name="T_">
            Move to start of next text line operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetCharacterSpacing)">
      <summary>
            Visit/select Tc operator.
            </summary>
      <param name="Tc">
            Set character spacing operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.MoveTextPosition)">
      <summary>
            Visit/select Td operator.
            </summary>
      <param name="Td">
            Move text position operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.MoveTextPositionSetLeading)">
      <summary>
            Visit/select TD operator.
            </summary>
      <param name="TD">
            Move text position and set leading operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SelectFont)">
      <summary>
            Visit/select Tf operator.
            </summary>
      <param name="Tf">
            Set text font and size operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.ShowText)">
      <summary>
            Visit/select Tj operator.
            </summary>
      <param name="Tj">
            Show text operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetGlyphsPositionShowText)">
      <summary>
            Visit/select TJ operator.
            </summary>
      <param name="TJ">
            Show text operator (allowing individual glyph positioning).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetTextLeading)">
      <summary>
            Visit/select TL operator.
            </summary>
      <param name="TL">
            Set text leading operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetTextMatrix)">
      <summary>
            Visit/select Tm operator.
            </summary>
      <param name="Tm">
            Set text matrix and text line matrix operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetTextRenderingMode)">
      <summary>
            Visit/select Tr operator.
            </summary>
      <param name="Tr">
            Set text rendering mode operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetTextRise)">
      <summary>
            Visit/select Ts operator.
            </summary>
      <param name="Ts">
            Set text rise operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetWordSpacing)">
      <summary>
            Visit/select Tw operator.
            </summary>
      <param name="Tw">
            Set word spacing operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetHorizontalTextScaling)">
      <summary>
            Visit/select Tz operator.
            </summary>
      <param name="Tz">
            Set horizontal text scaling operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.CurveTo1)">
      <summary>
            Visit/select v operator.
            </summary>
      <param name="v">
            Append curved segment to path operator (initial point replicated).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.EOClip)">
      <summary>
            Visit/select W* operator.
            </summary>
      <param name="W_">
            Set clipping path operator (even-odd rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.SetLineWidth)">
      <summary>
            Visit/select w operator.
            </summary>
      <param name="w">
            Set line width operator.
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.Clip)">
      <summary>
            Visit/select W operator.
            </summary>
      <param name="W">
            Set clipping path operator (nonzero winding number rule).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.CurveTo2)">
      <summary>
            Visit/select y operator.
            </summary>
      <param name="y">
            Append curved segment to path operator (final point replicated).
            </param>
    </member>
    <member name="M:Aspose.Pdf.OperatorSelector.Visit(Aspose.Pdf.Operator.TextOperator)">
      <summary>
            Visit/select any text operator operator.
            </summary>
      <param name="textOperator">
            General text operator which is used to select the set of corresponding pdf operators.
            </param>
    </member>
    <member name="T:Aspose.Pdf.OutlineCollection">
      <summary>
            Represents document outline hierarchy.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineCollection.Count">
      <summary>
            Gets the total number of outline items (bookmarks) at all levels of the document outline.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineCollection.First">
      <summary>
            Gets an outline item representing the first top-level item in the outline.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineCollection.Last">
      <summary>
            Gets an outline item representing the last top-level item in the outline.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to this collection is synchronized (thread safe).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to this collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.OutlineCollection.Add(Aspose.Pdf.OutlineItemCollection)">
      <summary>
            Adds outline item to collection.
            </summary>
      <param name="outline">The outline item to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.OutlineCollection.Delete">
      <summary>
            Deletes all outline items from the document outline.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.OutlineCollection.Delete(System.String)">
      <summary>
            Deletes the outline item with specified title from the document outline.
            </summary>
      <param name="name">The title of outline item to be deleted</param>
    </member>
    <member name="M:Aspose.Pdf.OutlineCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the outline items to an System.Array, starting at a particular System.Array index.
            </summary>
      <param name="array">The one-dimensional System.Array that is the destination. Must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Aspose.Pdf.OutlineCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>An System.Collections.IEnumerator object that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:Aspose.Pdf.OutlineCollection.Item(System.Int32)">
      <summary>
            Gets outline item from collection by index.
            </summary>
      <param name="index">Index of requested item.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.Pdf.OutlineItemCollection">
      <summary>
            Represents outline entry in outline hierarchy of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Title">
      <summary>
            Gets or sets the title for this outline item.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Destination">
      <summary>
            Gets or sets the destination for this outline item.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Action">
      <summary>
            Gets or sets the action for this outline item.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Color">
      <summary>
            Gets or sets the color for the title text of this outline item.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Italic">
      <summary>
            Gets or sets italic flag for the title text of this outline item
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Bold">
      <summary>
            Gets or sets bold flag for the title text of this outline item
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.First">
      <summary>
            Gets the outline item representing the first top-level item in the outline hierarchy.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Last">
      <summary>
            Gets the outline item representing the last top-level item in the outline hierarchy.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Prev">
      <summary>
            Gets the outline item representing previous item relatively this item in the outline hierarchy.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Next">
      <summary>
            Gets the outline item representing next item relatively this item in the outline hierarchy.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Parent">
      <summary>
            Gets the parent object of this outline item in the outline hierarchy.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Count">
      <summary>
            Gets the total number of outline items at all levels in the document outline hierarchy.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.IsSynchronized">
      <summary>
            Gets the value indicating whether access to this collection is synchronized (thread safe).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.SyncRoot">
      <summary>
            Gets the object that can be used to synchronize access to this collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Open">
      <summary>
            Get or sets open status (true/false) for outline item.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.OutlineItemCollection.Delete">
      <summary>
            Deletes this outline item from the document outline hierarchy.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.OutlineItemCollection.#ctor(Aspose.Pdf.OutlineCollection)">
      <summary>
            Initializes outline item instance using root hierarchy object.
            </summary>
      <param name="outlines">Outlune collection.</param>
    </member>
    <member name="M:Aspose.Pdf.OutlineItemCollection.Delete(System.String)">
      <summary>
            Deletes outline entry with specified name from the document outline hierarchy.
            </summary>
      <param name="name">Title of outline entry will be deleted.</param>
    </member>
    <member name="M:Aspose.Pdf.OutlineItemCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the outline entries to an System.Array, starting at a particular System.Array index.
            </summary>
      <param name="array">The one-dimensional System.Array that is the destination. Must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Aspose.Pdf.OutlineItemCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>An System.Collections.IEnumerator object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Aspose.Pdf.OutlineItemCollection.Add(Aspose.Pdf.OutlineItemCollection)">
      <summary>
            Adds outline item to collection.
            </summary>
      <param name="outline">The outline item to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.OutlineItemCollection.Insert(System.Int32,Aspose.Pdf.OutlineItemCollection)">
      <summary>
            Inserts the outline item into collection at the specified place.
            </summary>
      <param name="index">The index specifying place for inserting.</param>
      <param name="outline">The outline item should be inserted.</param>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Item(System.Int32)">
      <summary>
            Gets outline item from the collection using index.
            </summary>
      <param name="index">Index within the collection.</param>
      <returns>OutlineItemCollection object.</returns>
    </member>
    <member name="P:Aspose.Pdf.OutlineItemCollection.Level">
      <summary>
            Gets hierarchy level of outline item.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Page">
      <summary>
            Class representing page of PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.TocInfo">
      <summary>
            Gets or sets table of contents info.
            </summary>
      <value>The table of contents info - default null. If it set this page will contain table of contents.</value>
    </member>
    <member name="P:Aspose.Pdf.Page.Header">
      <summary>
            Gets or sets page header.
            </summary>
      <value>The page header.</value>
    </member>
    <member name="P:Aspose.Pdf.Page.Layers">
      <summary>
            Gets or sets layers collection.
            </summary>
      <value>The layers collection.</value>
    </member>
    <member name="P:Aspose.Pdf.Page.Footer">
      <summary>
            Gets or sets page footer.
            </summary>
      <value>The page footer.</value>
    </member>
    <member name="P:Aspose.Pdf.Page.Paragraphs">
      <summary>
            Gets the paragraphs.
            </summary>
      <value>The paragraphs.</value>
    </member>
    <member name="P:Aspose.Pdf.Page.PageInfo">
      <summary>
            Gets or sets the page info.(for generator only)
            </summary>
      <value>The page info.</value>
    </member>
    <member name="T:Aspose.Pdf.Page.BeforePageGenerate">
      <summary>
            Procedure for customize header and footer.
            </summary>
            /// <param name="page">The current page.</param></member>
    <member name="E:Aspose.Pdf.Page.OnBeforePageGenerate">
      <summary>
            Event for customize header and footer.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.Rect">
      <summary>
            Gets or sets rectangle of the page. Page crop box is returned if specified, otherwise page media box is returned.
            Please note that this property don't consider page rotation. To get page rectangle considering rotation please use ActualRect.
            </summary>
      <example>
            Example demonstrates how to get page rectangle:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Page page = document.Pages[1];
            Rectangle pageRect = page.Rect;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.ColorType">
      <summary>
            Sets color type of the pages based on information getting from operators SetColor,
            images and forms.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.NoteLineStyle">
      <summary>
            Gets or sets the line style for notes.(for generator only)
            </summary>
      <value>The note style.</value>
    </member>
    <member name="M:Aspose.Pdf.Page.IsBlank(System.Double)">
      <summary>
            Gets the flag whether page is blank or not.
            </summary>
      <value>The fill threshold value that manages the sensitivity of detection. Should be equal or greater than 0.01.</value>
    </member>
    <member name="M:Aspose.Pdf.Page.GetPageRect(System.Boolean)">
      <summary>
            Returns rectangle of the page. 
            </summary>
      <param name="considerRotation">If true then rotation of the page will be considered in rect calculation.</param>
      <returns>Rectangle of the page.</returns>
    </member>
    <member name="M:Aspose.Pdf.Page.CalculateContentBBox">
      <summary>
            Calculates bbox value - rectangle containing contents without visible margins.
            </summary>
      <returns>Bbox value - rectangle containing contents without visible margins</returns>
    </member>
    <member name="P:Aspose.Pdf.Page.TabOrder">
      <summary>
            Gets or sets tab order of the page. 
            Possible values: Row, Column. Default, Manual
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.Duration">
      <summary>
            Gets of set page display duration. This is time in seconds that page shall be displayed during presentation.
            Returs -1 if duration is not defined. 
            </summary>
      <example>
            Example demonstrates how to get page duration
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Page page = document.Pages[1];
            int pageRect = page.Duration;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.Contents">
      <summary>
            Gets collection of operators in the content stream of the page.
            <see cref="T:Aspose.Pdf.OperatorCollection" /></summary>
      <example>
            Example is demonstrates how to scan operators stream of page.
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Operators contents = document.Pages[1].Contents;
            foreach(Operator op in contents)
            {
                Console.WriteLine(op);
            }
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.Group">
      <summary>
            Gets or sets a group attributes class specifying the attributes of the page’s page group for use in the transparent imaging model.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.Annotations">
      <summary>
            Gets collection of page annotations.
            <see cref="P:Aspose.Pdf.Page.Annotations" /></summary>
    </member>
    <member name="P:Aspose.Pdf.Page.Resources">
      <summary>
            Gets page resources. Resources object contains collections of images, forms and fonts.
            <see cref="P:Aspose.Pdf.Page.Resources" /></summary>
      <example>
            Example demonstrates scan through page images:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            DocumentActions actions = document.Actions;
            Resources resources = document.Pages[1].Resources;
            foreach(XImage image in resources.Images)
            {
              Console.WriteLine(image.Width + ":" + image.Height);
            }
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.Rotate">
      <summary>
            Gets or sets rotation of the page.
            </summary>
      <example>
            Example demonstrates how to determine page rotation.
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Console.WriteLine(document.Pages[1].Rotate);
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.TrimBox">
      <summary>
            Gets or sets trim box of the page. 
            </summary>
      <example>
            Example demonstrates how to get trim box of the page:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Rectangle trimBox = document.Pages[1].TrimBox;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.ArtBox">
      <summary>
            Gets or sets art box of the page. 
            </summary>
      <example>
            Example demonstrates how to get art box of the page:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Rectangle artBox = document.Pages[1].ArtBox;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.BleedBox">
      <summary>
            Gets or sets bleed box of the page. 
            </summary>
      <example>
            Example demonstrates how to get bleed box of the page:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Rectangle bleedBox = document.Pages[1].BleedBox;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.CropBox">
      <summary>
            Gets or sets crop box of the page. 
            </summary>
      <example>
            Example demonstrates how to get crop box of the page:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Rectangle cropBox = document.Pages[1].CropBox;
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.Page.MediaBox">
      <summary>
            Gets or sets media box of the page. 
            </summary>
      <example>
            Example demonstrates how to get media box of the page:
            <code lang="C#">
            Document document = new Document("sample.pdf");
            Rectangle mediaBox = document.Pages[1].MediaBox;
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.Page.SendTo(Aspose.Pdf.Devices.PageDevice,System.IO.Stream)">
      <summary>
            Sends page to process with given page device.
            </summary>
      <param name="device">
            The device to process page.
            </param>
      <param name="output">
            Result stream which is used with device to save its output.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Page.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts <see cref="T:Aspose.Pdf.Annotations.AnnotationSelector" /> visitor object that provides functionality to work with annotations.
            </summary>
      <param name="visitor">Annotation selector sobject.</param>
    </member>
    <member name="M:Aspose.Pdf.Page.RotationToInt(Aspose.Pdf.Rotation)">
      <summary>
            Translates rotation enumeration member into integer value.
            </summary>
      <param name="rotation">Rotation enumeratioom member.</param>
      <returns>Corresponding integer value</returns>
    </member>
    <member name="M:Aspose.Pdf.Page.IntToRotation(System.Int32)">
      <summary>
            Translates integer value into corresponding rotation enumeration member.
            </summary>
      <param name="rotation">Integer value to convert</param>
      <returns>Rotation enumeration member</returns>
    </member>
    <member name="M:Aspose.Pdf.Page.AddStamp(Aspose.Pdf.Stamp)">
      <summary>
            Put stamp into page. Stamp can be page number, image or simple text, e.g. some logo.
            </summary>
      <param name="stamp">
            Stamp to add on the page. 
            Each stamp has its coordinates and corresponding properties regarding to the kind of stamp, 
            i.e. image or text value.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Page.AddImage(System.IO.Stream,Aspose.Pdf.Rectangle)">
      <summary>
            Adds image onto the page and locates it in the middle of specified rectangle saving image's proportion.
            </summary>
      <param name="imageStream">The stream of the image.</param>
      <param name="imageRect">The position of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Page.AddImage(System.String,System.IO.Stream,Aspose.Pdf.Rectangle)">
      <summary>
            Adds searchable image onto the page and locates it in the middle of specified rectangle saving image's proportion.
            </summary>
      <param name="hocr">The hocr of the image.</param>
      <param name="imageStream">The stream of the image.</param>
      <param name="imageRect">The position of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Page.AddImage(System.IO.Stream,Aspose.Pdf.Rectangle,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Adds image on page and places it depend on image rectangle position.
            </summary>
      <param name="imageStream">The stream of the image.</param>
      <param name="imageRect">The default position of the image on page.</param>
      <param name="imageWidth">The width of the image.</param>
      <param name="imageHeight">The height of the image.</param>
      <param name="saveImageProportions">If the flag set to true than image placed in rectangle position; otherwise, the size of rectange is becoming equal to image size.</param>
    </member>
    <member name="M:Aspose.Pdf.Page.AddImage(System.String,Aspose.Pdf.Rectangle)">
      <summary>
            Adds image onto the page and locates it in the middle of specified rectangle saving image's proportion.
            </summary>
      <param name="imagePath">The path to image.</param>
      <param name="rectangle">The position of the image.</param>
    </member>
    <member name="M:Aspose.Pdf.Page.SendTo(Aspose.Pdf.Devices.PageDevice,System.String)">
      <summary>
            Sends page to process with given page device.
            </summary>
      <param name="device">
            The device to process page.
            </param>
      <param name="outputFileName">
            File which is used with device to save its output.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Page.Flatten">
      <summary>
            Removes all fields located on the page and place their values instead.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Page.Accept(Aspose.Pdf.Text.TextFragmentAbsorber)">
      <summary>
            Accepts <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> visitor object that provides functionality to work with text objects.
            </summary>
      <param name="visitor">Text absorber object.</param>
    </member>
    <member name="M:Aspose.Pdf.Page.Accept(Aspose.Pdf.ImagePlacementAbsorber)">
      <summary>
            Accepts <see cref="T:Aspose.Pdf.ImagePlacementAbsorber" /> visitor object that provides functionality to work with image placement objects.
            </summary>
      <param name="visitor">Image placement absorber object.</param>
    </member>
    <member name="M:Aspose.Pdf.Page.Accept(Aspose.Pdf.Text.TextAbsorber)">
      <summary>
            Accepts <see cref="T:Aspose.Pdf.Text.TextAbsorber" /> visitor object that provides functionality to work with text objects.
            </summary>
      <param name="visitor">Text absorber object.</param>
    </member>
    <member name="M:Aspose.Pdf.Page.SetPageSize(System.Double,System.Double)">
      <summary>
            Sets page size for page. 
            </summary>
      <param name="width">Page width.</param>
      <param name="height">Page size.</param>
    </member>
    <member name="P:Aspose.Pdf.Page.Number">
      <summary>
            Get number of the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.RotationMatrix">
      <summary>
            Gets transofmation matrix for the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.Background">
      <summary>
            Gets or sets the background color of the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.Watermark">
      <summary>
            Gets or sets the watermark of the page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Page.Dispose">
      <summary>
            Frees up memory
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.Artifacts">
      <summary>
            Gets collection of artifacts on the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Page.Actions">
      <summary>
            Gets collection of page properties.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Page.MakeGrayscale">
      <summary>
            Converts images on page as grayscaled.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Page.FreeMemory">
      <summary>
            Clears cached data
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Page.GetNotifications">
      <summary>
            Returns notifications about inside operations with page content. (Only notifications about paragraph events in text adding scenarios are supported now.)
            </summary>
      <returns>String representing notifications about inside operations with page content.</returns>
    </member>
    <member name="M:Aspose.Pdf.Page.AsByteArray(Aspose.Pdf.Devices.Resolution)">
      <summary>
            Converts current page as bitmap and than returns array of bytes.
            </summary>
      <param name="resolution">The resolution.</param>
      <returns>Converted array of image bytes.</returns>
    </member>
    <member name="M:Aspose.Pdf.Page.AsXml">
      <summary>
            Converts current page as xml in utf8 encoding.
            </summary>
      <returns>Converted xml string.</returns>
    </member>
    <member name="P:Aspose.Pdf.Page.FieldsInTabOrder">
      <summary>
            Gets list of Field object in Tab order on this page.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PageCollection">
      <summary>
            Collection of PDF document pages.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageCollection.Count">
      <summary>
            Gets count of pages in the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageCollection.IsSynchronized">
      <summary>
            Returns true of object is synchorinzed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageCollection.SyncRoot">
      <summary>
            Gets synchronization object of the collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Add(Aspose.Pdf.Page)">
      <summary>
            Adds page to collection. 
            </summary>
      <param name="entity">Page which should be added.</param>
      <returns>Added page.</returns>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Clear">
      <summary>
            Clear page collection. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Delete(System.Int32)">
      <summary>
            Delete specified page.
            </summary>
      <param name="index">Number of page that will be deleted. Pages numbers start from 1.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Delete">
      <summary>
            Deletes all pages from collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.IndexOf(Aspose.Pdf.Page)">
      <summary>
            Returns index of the specified page.
            </summary>
      <remarks>
            Pages numbers start from 1.
            Returns 0 in case collection doesn't contain the page.
            </remarks>
      <param name="entity">Page object. Pages numbers start from 1.</param>
      <returns>Index of the page in collection.</returns>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copyies pages into document. 
            </summary>
      <param name="array">Array containing Pages object to insert into document. It must be Object[] or Page[].</param>
      <param name="index">Starting index where pages will be inserted</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.GetEnumerator">
      <summary>
            Returns enumerator of pages.
            </summary>
      <returns>Enumerator of pages</returns>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Accept(Aspose.Pdf.Annotations.AnnotationSelector)">
      <summary>
            Accepts <see cref="T:Aspose.Pdf.Annotations.AnnotationSelector" /> visitor object that provides functionality to work with annotations.
            </summary>
      <param name="visitor">AnnotationSelector Visitor</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Delete(System.Int32[])">
      <summary>
            Delete pages specified which numbers are specified in array.
            </summary>
      <param name="pages">Array of pages to be deleted.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Insert(System.Int32)">
      <summary>
            Insert empty apge into collection at the specified position.
            </summary>
      <param name="pageNumber">Position of the new page.</param>
      <returns>Inserted page.</returns>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Add">
      <summary>
            Adds empty page
            </summary>
      <returns>Added page.</returns>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Add(System.Collections.ICollection)">
      <summary>
            Adds to collection all pages from list.
            </summary>
      <param name="pages">List which contains all pages which must be added.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Insert(System.Int32,Aspose.Pdf.Page)">
      <summary>
            Inserts page into page collection at specified place. 
            </summary>
      <param name="pageNumber">Required page index in collection.</param>
      <param name="entity">Page to be inserted.</param>
      <returns>Inserted page.</returns>
    </member>
    <member name="P:Aspose.Pdf.PageCollection.Item(System.Int32)">
      <summary>
            Gets page by index.
            </summary>
      <param name="index">Index of page.</param>
      <returns>Retreived page.</returns>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Accept(Aspose.Pdf.ImagePlacementAbsorber)">
      <summary>
            Accepts <see cref="T:Aspose.Pdf.ImagePlacementAbsorber" /> visitor object that provides functionality to work with image placement objects.
            </summary>
      <param name="visitor">Image placement object.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Accept(Aspose.Pdf.Text.TextFragmentAbsorber)">
      <summary>
            Accepts <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" /> visitor object that provides functionality to work with text objects.
            </summary>
      <param name="visitor">Text fragment absorber object.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Accept(Aspose.Pdf.Text.TextAbsorber)">
      <summary>
            Accepts <see cref="T:Aspose.Pdf.Text.TextAbsorber" /> visitor object that provides functionality to work with text objects.
            </summary>
      <param name="visitor">Text absorber object.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Add(Aspose.Pdf.Page[])">
      <summary>
            Adds to collection all pages from array.
            </summary>
      <param name="pages">Array of pages which will be added.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Insert(System.Int32,System.Collections.ICollection)">
      <summary>
            Inserts pages from the collection into document. 
            </summary>
      <param name="pageNumber">Starting position of the new pages.</param>
      <param name="pages">Pages collection.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Insert(System.Int32,Aspose.Pdf.Page[])">
      <summary>
            Inserts pages of the array into document.
            </summary>
      <param name="pageNumber">Starting number of the new pages. </param>
      <param name="pages">Array of pages which will be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.Flatten">
      <summary>
            Removes all fields located on the pages and place their values instead.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageCollection.FreeMemory">
      <summary>
            Clears cached data
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PageLayout">
      <summary>
            Descibes page layout.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageLayout.SinglePage">
      <summary>
            Single page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageLayout.OneColumn">
      <summary>
            Display the pages in one column.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageLayout.TwoColumnLeft">
      <summary>
            Display the pages in two columns, with odd-numbered pages on the left.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageLayout.TwoColumnRight">
      <summary>
            Display the pages in two columns, with odd-numbered pages on the right.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageLayout.TwoPageLeft">
      <summary>
            Display the pages two at a time, with odd-numbered pages on the left.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageLayout.TwoPageRight">
      <summary>
            Display the pages two at a time, with odd-numbered pages on the right.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageLayout.Default">
      <summary>
            Default layout.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PageNumberStamp">
      <summary>
            Represents page number stamp and used to number pages. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageNumberStamp.Format">
      <summary>
            String value for stamping page numbers. 
            Value must include char '#' which is replaced with the page number in the process of stamping.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageNumberStamp.StartingNumber">
      <summary>
            Gets or sets value of the number of starting page. Other pages will be numbered starting from this value.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageNumberStamp.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.PageNumberStamp" /> class.
            </summary>
      <param name="format">
            String value used for stamping. See <see cref="P:Aspose.Pdf.PageNumberStamp.Format" /> property for details.
            </param>
    </member>
    <member name="M:Aspose.Pdf.PageNumberStamp.Put(Aspose.Pdf.Page)">
      <summary>
            Adds page number.
            </summary>
      <param name="page">
            Page for stamping.
            </param>
    </member>
    <member name="M:Aspose.Pdf.PageNumberStamp.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.PageNumberStamp" /> class. Format is set to "#".
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageNumberStamp.#ctor(Aspose.Pdf.Facades.FormattedText)">
      <summary>
            Creates PageNumberStamp by formatted text.
            </summary>
      <param name="formattedText">Formatted text which used to create Page Number Stamp.</param>
    </member>
    <member name="P:Aspose.Pdf.PageNumberStamp.NumberingStyle">
      <summary>
            Numbering style which used by this stamp. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PdfPageStamp">
      <summary>
            Class represents stamp which uses PDF page as stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfPageStamp.PdfPage">
      <summary>
            Gets or sets page which will be used as stamp.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PdfPageStamp.#ctor(Aspose.Pdf.Page)">
      <summary>
            Constructor of PdfPageStamp.
            </summary>
      <param name="pdfPage">Page which is used for stamping.</param>
    </member>
    <member name="M:Aspose.Pdf.PdfPageStamp.Put(Aspose.Pdf.Page)">
      <summary>
            Put stamp on the specified page.
            </summary>
      <param name="page">Page where stamp will be placed.</param>
    </member>
    <member name="M:Aspose.Pdf.PdfPageStamp.#ctor(System.String,System.Int32)">
      <summary>
            Creates Pdf page stamp from specifed page of the document in specified file.
            </summary>
      <param name="fileName">Name and page of PDF file.</param>
      <param name="pageIndex">Index of the page.</param>
    </member>
    <member name="M:Aspose.Pdf.PdfPageStamp.#ctor(System.IO.Stream,System.Int32)">
      <summary>
            Creates Pdf page stamp from specifed page in the document from the stream.
            </summary>
      <param name="stream">Stream which contains PDF </param>
      <param name="pageIndex">Index of the page.</param>
    </member>
    <member name="T:Aspose.Pdf.Permissions">
      <summary>
            This enum represents user's permissions for a pdf.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Permissions.PrintDocument">
      <summary>
            (Security handlers of revision 2) Print the document.
            (Security handlers of revision 3 or greater) Print the document 
            (possibly not at the highest quality level, 
            depending on whether <see cref="F:Aspose.Pdf.Permissions.PrintingQuality" /> is also set).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Permissions.ModifyContent">
      <summary>
            Modify the contents of the document by operations other 
            than those controlled by  <see cref="F:Aspose.Pdf.Permissions.ModifyTextAnnotations" />, 
            <see cref="F:Aspose.Pdf.Permissions.FillForm" />, and 11.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Permissions.ExtractContent">
      <summary>
            (Security handlers of revision 2) Copy or otherwise extract 
            text and graphics from the document, including extracting 
            text and graphics (in support of accessibility to users 
            with disabilities or for other purposes).
            (Security handlers of revision 3 or greater) Copy or otherwise 
            extract text and graphics from the document by operations 
            other than that controlled by <see cref="F:Aspose.Pdf.Permissions.ExtractContentWithDisabilities" />.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Permissions.ModifyTextAnnotations">
      <summary>
            Add or modify text annotations, fill in interactive form fields, 
            and, if <see cref="F:Aspose.Pdf.Permissions.ModifyContent" /> is also set, create or modify interactive form 
            fields (including signature fields).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Permissions.FillForm">
      <summary>
            (Security handlers of revision 3 or greater) Fill in existing 
            interactive form fields (including signature fields), even if 
            <see cref="F:Aspose.Pdf.Permissions.ModifyTextAnnotations" /> is clear.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Permissions.ExtractContentWithDisabilities">
      <summary>
            (Security handlers of revision 3 or greater) Extract text and 
            graphics (in support of accessibility to users with disabilities 
            or for other purposes).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Permissions.AssembleDocument">
      <summary>
            (Security handlers of revision 3 or greater) Assemble the document 
            (insert, rotate, or delete pages and create bookmarks or thumbnail 
            images), even if <see cref="F:Aspose.Pdf.Permissions.ModifyContent" /> is clear.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Permissions.PrintingQuality">
      <summary>
            (Security handlers of revision 3 or greater) Print the document to 
            a representation from which a faithful digital copy of the PDF content 
            could be generated. When this bit is clear (and bit 3 is set), 
            printing is limited to a low-level representation of the appearance, 
            possibly of degraded quality.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Point">
      <summary>
            Represent point with fractional coordinates.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Point.X">
      <summary>
            X coordinate value.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Point.Y">
      <summary>
            Y coordinate value.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Point.#ctor(System.Double,System.Double)">
      <summary>
            Initializes new instance of the <see cref="T:Aspose.Pdf.Point" />.
            </summary>
      <param name="x">
            x coordinate value.
            </param>
      <param name="y">
            y coordinate value.
            </param>
    </member>
    <member name="P:Aspose.Pdf.Point.Trivial">
      <summary>
            Gets point with zero coordinates.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Point.ToPoint">
      <summary>
            Converts point into System.Drawing.PointF object.
            </summary>
      <returns>PointF structure.</returns>
    </member>
    <member name="T:Aspose.Pdf.Rectangle">
      <summary>
            Class represents rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.Width">
      <summary>
            Width of rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.Height">
      <summary>
            Height of rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.LLX">
      <summary>
            X-coordinate of lower - left corner.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.LLY">
      <summary>
            Y - coordinate of lower-left corner.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.URX">
      <summary>
            X - coordinate of upper-right corner.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.URY">
      <summary>
            Y - coordinate of upper-right corner.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Constructor of Rectangle.
            </summary>
      <param name="llx">X of lower left corner.</param>
      <param name="lly">Y of lower left corner.</param>
      <param name="urx">X of upper right corner.</param>
      <param name="ury">Y of upper right corner.</param>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.ToRect">
      <summary>
            Converts rectangle to instance of System.Drawing.Rectangle. Floating-point positions and size are truncated.
            </summary>
      <returns>Result of conversion.</returns>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.FromRect(System.Drawing.Rectangle)">
      <summary>
            Initializes new rectangle from given instance of System.Drawing.Rectangle.
            </summary>
      <param name="src">Source rectangle which position and size will be set to new rectangle.</param>
      <returns>New rectangle.</returns>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.ToString">
      <summary>
            Gets rectangle string representation.
            </summary>
      <returns>
            String has format llx,lly,urx,ury.
            </returns>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.Parse(System.String)">
      <summary>
            Try to parse string and extract from it rectangle components llx, lly, urx, ury.
            </summary>
      <param name="value">
            String to parse.
            </param>
      <returns>
            Rectangle object.
            </returns>
    </member>
    <member name="F:Aspose.Pdf.Rectangle.Empty">
      <summary>
            Empty rectangle
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.Trivial">
      <summary>
            Initializes trivial rectangle i.e. rectangle with zero position and size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.IsTrivial">
      <summary>
            Checks if rectangle is trivial i.e. has zero size and position.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.IsEmpty">
      <summary>
            Checks if rectangle is empty.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.IsPoint">
      <summary>
            Checks if rectangle is point i.e. LLX is equal URX and LLY is equal URY.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.Equals(Aspose.Pdf.Rectangle)">
      <summary>
            Check if rectangles are equal i.e. have same position and sizes.
            </summary>
      <param name="other">Rectangle which will be compared.</param>
      <returns>True if rectangles are eqals, false otherwise.</returns>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.NearEquals(Aspose.Pdf.Rectangle,System.Double)">
      <summary>
            Check if rectangles are near equal i.e. have near same (up to delta) position and sizes.
            </summary>
      <param name="other">Rectangle which will be compared.</param>
      <param name="delta">Value of comparation tollerance.</param>
      <returns>True if rectangles are eqals, false otherwise.</returns>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.Intersect(Aspose.Pdf.Rectangle)">
      <summary>
            Intersects to rectangles. 
            </summary>
      <param name="otherRect">Rectangle to which this recatangle be intersected.</param>
      <returns>Intersection of rectangles; null if rectangles are not intersected.</returns>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.Join(Aspose.Pdf.Rectangle)">
      <summary>
            Joins rectangles.
            </summary>
      <param name="otherRect">Rectangle to which this recatangle be joined.</param>
      <returns>Described rectangle.</returns>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.IsIntersect(Aspose.Pdf.Rectangle)">
      <summary>
            Determines whether this rectangle intersects with other rectangle.
            </summary>
      <param name="otherRect">Intersection will be tested with specified rectangle.</param>
      <returns>True if this rectangle intersects with specified rectangle. Otherwise false.</returns>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.Contains(Aspose.Pdf.Point)">
      <summary>
            Determinces whether given point is inside of the rectangle.
            </summary>
      <param name="point">Point to check.</param>
      <returns>True if point is inside of the recatngle.</returns>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.Center">
      <summary>
            Returncs coordinates of center of the rectangle.
            </summary>
      <returns>Point which is center of the rectangle.</returns>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.Rotate(Aspose.Pdf.Rotation)">
      <summary>
            Rotate rectangle by the specified angle.
            </summary>
      <param name="angle">Angle of rotation. Member of Rotation enumeration.</param>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.Rotate(System.Int32)">
      <summary>
            Rotate rectangle by the specified angle.
            </summary>
      <param name="angle">Angle of rotation in degrees between 0 and 360.</param>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.Clone">
      <summary>
            Clones the Rectangle object.
            </summary>
      <returns>Clone object.</returns>
    </member>
    <member name="T:Aspose.Pdf.Resources">
      <summary>
            Class representing page resources.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Resources.Forms">
      <summary>
            Gets <see cref="P:Aspose.Pdf.Resources.Forms" /> forms collection
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Resources.Images">
      <summary>
            Gets <see cref="P:Aspose.Pdf.Resources.Images" /> images collection
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Resources.GetFonts(System.Boolean)">
      <summary>
            Returns fonts collection. If resources don't contain fonts entry it will be created in depends of CreateIfAbsent flag.
            </summary>
      <param name="CreateIfAbsent">If this flag is true then fonts will be created if this entry is absent.</param>
      <returns>Fonts collection.</returns>
    </member>
    <member name="P:Aspose.Pdf.Resources.Fonts">
      <summary>
            Gets <see cref="P:Aspose.Pdf.Resources.Fonts" /> resources collection
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Rotation">
      <summary>
            Enumeration of possible rotation values.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Rotation.None">
      <summary>
            Non-rotated.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Rotation.on90">
      <summary>
            Rotated on 90 degrees clockwise.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Rotation.on180">
      <summary>
            Rotated on 180 degrees.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Rotation.on270">
      <summary>
            Rotated on 270 degrees clockwise.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Selector">
      <summary>
             Base abstract class for selecting routines which are defined in concrete descendants.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.Selector.Selected">
      <summary>
             The list of selected objects.
             </summary>
    </member>
    <member name="M:Aspose.Pdf.Selector.#ctor">
      <summary>
             Initializes new instance of the <see cref="T:Aspose.Pdf.Selector" /> class.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.Stamp">
      <summary>
            An abstract class for various kinds of stamps which come as descendants.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Stamp._horizontalAlignment">
      <summary>
            Horizontal alignment of the stamp.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Stamp._verticalAlignment">
      <summary>
            Vertical alignemtn of the stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.Background">
      <summary>
            Sets or gets a bool value that indicates the content is stamped as background.
            If the value is true, the stamp content is layed at the bottom.
            By defalt, the value is false, the stamp content is layed at the top.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.Opacity">
      <summary>
            Gets or sets a value to indicate the stamp opacity. The value is from 0.0 to 1.0.
            By default the value is 1.0.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.OutlineOpacity">
      <summary>
            Gets or sets a value to indicate the stamp outline opacity. The value is from 0.0 to 1.0.
            By default the value is 1.0.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.OutlineWidth">
      <summary>
            Gets or sets a value of the stamp outline width.
            By default the value is 1.0.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.Rotate">
      <summary>
            Sets or gets the rotation of stamp content according <see cref="T:Aspose.Pdf.Rotation" /> values.
            Note. This property is for set angles which are multiples of 90 degrees (0, 90, 180, 270 degrees).
            To set arbitrary angle use RotateAngle property. 
            If angle set by ArbitraryAngle is not multiple of 90 then Rotate property returns Rotation.None.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.XIndent">
      <summary>
            Horizontal stamp coordinate, starting from the left.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.YIndent">
      <summary>
            Vertical stamp coordinate, starting from the bottom.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.HorizontalAlignment">
      <summary>
            Gets or sets Horizontal alignment of stamp on the page. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.VerticalAlignment">
      <summary>
            Gets or sets vertical alignment of stamp on page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.LeftMargin">
      <summary>
            Gets or sets left margin of stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.RightMargin">
      <summary>
            Gets or sets right margin of stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.BottomMargin">
      <summary>
            Gets or sets bottom margin of stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.TopMargin">
      <summary>
            Gets or sets top margin of stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.ZoomX">
      <summary>
            Horizontal zooming factor of the stamp. Allows to scale stamp horizontally.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.Width">
      <summary>
            Desired width of the stamp on the page. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.Height">
      <summary>
            Desired height of the stamp on the page. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.ZoomY">
      <summary>
            Vertical zooming factor of the stamp. Allows to scale stamp vertically.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.Zoom">
      <summary>
            Zooming factor of the stamp. Allows to scale stamp.
            Please note that pair of properties ZoomX and ZoomY allows to set zoom factor for every axe separately. 
            Setting of this property changes both ZoomX and ZoomY properties. 
            If ZoomX and ZoomY are different then Zoom property returns ZoomX value.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Stamp.RotateAngle">
      <summary>
            Gets or sets rotate angle of stamp in degrees.
            This property allows to set arbitrary rotate angle. 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Stamp.Put(Aspose.Pdf.Page)">
      <summary>
            Adds stamp on the page.
            </summary>
      <param name="page">
            The page to add stamp.
            </param>
    </member>
    <member name="M:Aspose.Pdf.Stamp.getPoint(Aspose.Pdf.Page)">
      <summary>
            Returns point if the stamp on the page.
            </summary>
      <param name="page">Page where the stamp is placed.</param>
      <returns>Point of the stamp.</returns>
    </member>
    <member name="M:Aspose.Pdf.Stamp.addExtGState(Aspose.Pdf.Page)">
      <summary>
            Add G state on the page for stamp.
            </summary>
      <param name="page">Page where </param>
      <returns>Name of added GState.</returns>
    </member>
    <member name="M:Aspose.Pdf.Stamp.getPageRotationMatrix(Aspose.Pdf.Page)">
      <summary>
            Returns transformation matrix for page.
            </summary>
      <param name="page">Page where stamp is placed.</param>
      <returns>Rotation matrix of the stamp.</returns>
    </member>
    <member name="M:Aspose.Pdf.Stamp.getScaleMatrix">
      <summary>
            Returns scaling matrix of the stamp.
            </summary>
      <returns>Scale matrix of the stamp.</returns>
    </member>
    <member name="M:Aspose.Pdf.Stamp.setStampId(System.Int32)">
      <summary>
            Sets stamp Id.
            </summary>
      <param name="value">New value of Stamp ID.</param>
    </member>
    <member name="M:Aspose.Pdf.Stamp.getStampId">
      <summary>
            Returns stamp ID.
            </summary>
      <returns>Identifier of the stamp.</returns>
    </member>
    <member name="T:Aspose.Pdf.ImagePlacement">
      <summary>
            Represents characteristics of an image placed to Pdf document page.
            </summary>
      <remarks>
            When an image is placed to a page it may have dimensions other than physical dimensions defined in <see cref="T:Aspose.Pdf.Resources" />.
            The object <see cref="T:Aspose.Pdf.ImagePlacement" /> is intended to provide such information like dimensions, resolution and so on.
            </remarks>
      <example>
            The example demonstrates how to find images on the first PDF document page and get images as bitmaps with visible dimensions.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create ImagePlacementAbsorber object to perform image placement search
            ImagePlacementAbsorber abs = new ImagePlacementAbsorber();
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(abs);
            
            // Retrieve images with visible dimensions
            foreach (ImagePlacement imagePlacement in abs.ImagePlacements)
            {
                Bitmap scaledImage;
                using (MemoryStream imageStream = new MemoryStream())
                {
                    // Retrieve image from resources
                    imagePlacement.Image.Save(imageStream, ImageFormat.Png);
                    Bitmap resourceImage = (Bitmap) Bitmap.FromStream(imageStream);
                    // Create new bitmap with actual dimensions
                    scaledImage = new Bitmap(resourceImage, (int)imagePlacement.Rectangle.Width, (int)imagePlacement.Rectangle.Height);
                }
            } 
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacement.Matrix">
      <summary>
            Current transformation matrix for this image. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacement.Rectangle">
      <summary>
            Gets rectangle of the Image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacement.Rotation">
      <summary>
            Gets rotation angle of the Image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacement.Resolution">
      <summary>
            Gets resolution of the Image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacement.Image">
      <summary>
            Gets related XImage resource object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacement.Page">
      <summary>
            Gets the page containing the image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacement.CompositingParameters">
      <summary>
            Gets compositing parameters of graphics state active for the image placed to the page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.ImagePlacement.Save(System.IO.Stream)">
      <summary>
            Saves image with corresponding transformations: scaling, rotation and resolution.
            </summary>
      <param name="stream">Stream where image will be saved</param>
    </member>
    <member name="M:Aspose.Pdf.ImagePlacement.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves image with corresponding transformations: scaling, rotation and resolution.
            </summary>
      <param name="stream">Stream where image will be saved</param>
      <param name="format">Format which will be used for image enconding. <see cref="T:System.Drawing.Imaging.ImageFormat" /></param>
    </member>
    <member name="T:Aspose.Pdf.ImagePlacementCollection">
      <summary>
            Represents an image placements collection
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacementCollection.Count">
      <summary>
             Gets the number of <see cref="T:Aspose.Pdf.ImagePlacement" /> object elements actually contained in the collection. 
             </summary>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacementCollection.SyncRoot">
      <summary>
             Gets an object that can be used to synchronize access to the collection.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacementCollection.IsSynchronized">
      <summary>
             Gets a value indicating whether access to the collection is synchronized (thread safe). 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.ImagePlacementCollection.GetEnumerator">
      <summary>
             Returns an enumerator for the entire collection.
            </summary>
      <returns>Enumerator object.</returns>
    </member>
    <member name="M:Aspose.Pdf.ImagePlacementCollection.CopyTo(System.Array,System.Int32)">
      <summary>
             Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
            </summary>
      <param name="array">Array of objects which will be copied.</param>
      <param name="index">Starting index from which copying will be started.</param>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacementCollection.Item(System.Int32)">
      <summary>
            Gets the text fragment element at the specified index.
            </summary>
      <param name="index">Index of image placement.</param>
      <returns>ImagePlacement object.</returns>
    </member>
    <member name="T:Aspose.Pdf.ImagePlacementAbsorber">
      <summary>
            Represents an absorber object of image placement objects.
            Performs search of image usages and provides access to search results via <see cref="P:Aspose.Pdf.ImagePlacementAbsorber.ImagePlacements" /> collection.
            </summary>
      <remarks>
            The <see cref="T:Aspose.Pdf.ImagePlacementAbsorber" /> object is basically used in images search scenario.
            When the search is completed the occurrences are represented with <see cref="T:Aspose.Pdf.ImagePlacement" /> objects that the <see cref="P:Aspose.Pdf.ImagePlacementAbsorber.ImagePlacements" /> collection contains.
            The <see cref="T:Aspose.Pdf.ImagePlacement" /> object provides access to the image placement properties: dimensions, resolution etc.
            </remarks>
      <example>
            The example demonstrates how to find images on the first PDF document page and get the image placement properties.
            <code lang="C#"> 
            // Open document
            Document doc = new Document(@"D:\Tests\input.pdf");
            
            // Create ImagePlacementAbsorber object to perform image placement search
            ImagePlacementAbsorber abs = new ImagePlacementAbsorber();
            
            // Accept the absorber for first page
            doc.Pages[1].Accept(abs);
            
            // Display image placement properties for all placements
            foreach (ImagePlacement imagePlacement in abs.ImagePlacements)
            {     
                Console.Out.WriteLine("image width:" + imagePlacement.Rectangle.Width);
                Console.Out.WriteLine("image height:" + imagePlacement.Rectangle.Height);
                Console.Out.WriteLine("image LLX:" + imagePlacement.Rectangle.LLX);
                Console.Out.WriteLine("image LLY:" + imagePlacement.Rectangle.LLY);
                Console.Out.WriteLine("image horizontal resolution:" + imagePlacement.Resolution.X);
                Console.Out.WriteLine("image vertical resolution:" + imagePlacement.Resolution.Y);
            }
            </code></example>
    </member>
    <member name="P:Aspose.Pdf.ImagePlacementAbsorber.ImagePlacements">
      <summary>
            Gets collection of image placement occurrences that are presented with <see cref="T:Aspose.Pdf.ImagePlacement" /> objects.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.ImagePlacementAbsorber.Visit(Aspose.Pdf.Page)">
      <summary>
            Performs search on the specified page.
            </summary>
      <param name="page">Pdf pocument page object.</param>
    </member>
    <member name="M:Aspose.Pdf.ImagePlacementAbsorber.Visit(Aspose.Pdf.Document)">
      <summary>
            Performs search on the specified document.
            </summary>
      <param name="pdf">Pdf pocument object.</param>
    </member>
    <member name="T:Aspose.Pdf.Cell">
      <summary>
            Represents a cell of the table's row.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.IsNoBorder">
      <summary>
            Gets or sets the cell have border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.Margin">
      <summary>
            Gets or sets the padding.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.Border">
      <summary>
            Gets or sets the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.BackgroundColor">
      <summary>
            Gets or sets the background color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.BackgroundImageFile">
      <summary>
            Gets or sets the background image file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.Alignment">
      <summary>
            Gets or sets the alignment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.DefaultCellTextState">
      <summary>
            Gets or sets the default cell text state.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.Paragraphs">
      <summary>
            Gets or sets the cell's formatted text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.IsWordWrapped">
      <summary>
            Gets or sets the cell's text word wrapped.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.VerticalAlignment">
      <summary>
            Gets or sets the vertical alignment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.ColSpan">
      <summary>
            Gets or sets the column span.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.RowSpan">
      <summary>
            Gets or sets the row span.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.Width">
      <summary>
            Gets or sets the column width.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Cell.#ctor(Aspose.Pdf.Rectangle)">
      <summary>
            Initializes a new instance of the Cell class.
            </summary>
      <param name="rect">The rectangle of the cell in page's coordinates.</param>
    </member>
    <member name="M:Aspose.Pdf.Cell.#ctor">
      <summary>
            Initializes a new instance of the Cell class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Cell.Clone">
      <summary>
            Clone the cell.
            </summary>
      <returns>The cloned object</returns>
    </member>
    <member name="T:Aspose.Pdf.Cells">
      <summary>
            Represents a cells collection of row.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Cells.Add">
      <summary>
             Add cell to collection.
             </summary>
      <returns>The new cell</returns>
    </member>
    <member name="M:Aspose.Pdf.Cells.Add(System.String,Aspose.Pdf.Text.TextState)">
      <summary>
            Add cell to collection.
            </summary>
      <param name="text">The text for cell.</param>
      <param name="ts">The text state.</param>
      <returns>The new cell</returns>
    </member>
    <member name="M:Aspose.Pdf.Cells.Add(System.String)">
      <summary>
            Add cell to collection.
            </summary>
      <param name="text">The text for cell.</param>
      <returns>The new cell</returns>
    </member>
    <member name="M:Aspose.Pdf.Cells.Add(Aspose.Pdf.Cell)">
      <summary>
            Add cell to collection.
            </summary>
      <param name="cell">The cell to collection.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.Cells.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Remove cell set from collection.
            </summary>
      <param name="index">The collection index.</param>
      <param name="count">The rows count.</param>
    </member>
    <member name="M:Aspose.Pdf.Cells.Remove(System.Object)">
      <summary>
            Remove cell set from collection.
            </summary>
      <param name="obj">The object.</param>
    </member>
    <member name="M:Aspose.Pdf.Cells.Remove(Aspose.Pdf.Cell)">
      <summary>
            Remove cell set from collection.
            </summary>
      <param name="cell">The cell object.</param>
    </member>
    <member name="M:Aspose.Pdf.Cells.Insert(System.Int32,Aspose.Pdf.Cell)">
      <summary>
            Insert cell to collection.
            </summary>
      <param name="index">The selected index.</param>
      <param name="cell">The selected cell.</param>
    </member>
    <member name="P:Aspose.Pdf.Cells.Count">
      <summary>
            The items count.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cells.Item(System.Int32)">
      <summary>
            Gets or sets cells.
            </summary>
      <returns>
      </returns>
      <param name="index">The cell index.</param>
    </member>
    <member name="T:Aspose.Pdf.Row">
      <summary>
            Represents a row of the table.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Row.Clone">
      <summary>
            Clone the row.
            </summary>
      <returns>The cloned object</returns>
    </member>
    <member name="P:Aspose.Pdf.Row.BackgroundColor">
      <summary>
            Gets or sets the background color.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.Border">
      <summary>
            Gets or sets the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.Cells">
      <summary>
            Gets the cells of the row.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.DefaultCellBorder">
      <summary>
            Gets default cell border;
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.MinRowHeight">
      <summary>
            Gets height for row;
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.FixedRowHeight">
      <summary>
            Gets fixed row height - row may have fixed height;
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.IsInNewPage">
      <summary>
            Gets fixed row is in new page - page with this property should be printed to next page Default false;
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.IsRowBroken">
      <summary>
            Gets is row can be broken between two pages
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.DefaultCellTextState">
      <summary>
            Gets or sets default text state for row cells
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.DefaultCellPadding">
      <summary>
            Gets or sets default margin for row cells
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.VerticalAlignment">
      <summary>
            Gets or sets the vertical alignment.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Rows">
      <summary>
            Represents a rows collection of table.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Rows.Add">
      <summary>
            Add row to collection.
            </summary>
      <returns>The new row</returns>
    </member>
    <member name="M:Aspose.Pdf.Rows.Add(Aspose.Pdf.Row)">
      <summary>
            Add row to cellection.
            </summary>
      <param name="row">The new row.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.Rows.IndexOf(Aspose.Pdf.Row)">
      <summary>
            Returns index of row in collection.
            </summary>
      <param name="row">The existing row.</param>
      <returns>The row index</returns>
    </member>
    <member name="M:Aspose.Pdf.Rows.Remove(Aspose.Pdf.Row)">
      <summary>
            Remove row from collection.
            </summary>
      <param name="row">The existing row.</param>
    </member>
    <member name="M:Aspose.Pdf.Rows.RemoveAt(System.Int32)">
      <summary>
            Remove row at position from collection.
            </summary>
      <param name="index">The collection index.</param>
    </member>
    <member name="M:Aspose.Pdf.Rows.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Remove row set from collection.
            </summary>
      <param name="index">The collection index.</param>
      <param name="count">The rows count.</param>
    </member>
    <member name="P:Aspose.Pdf.Rows.Count">
      <summary>
            The items count.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rows.Item(System.Int32)">
      <summary>
            Gets or sets row.
            </summary>
      <param name="index">The row index.</param>
    </member>
    <member name="T:Aspose.Pdf.TableBroken">
      <summary>
            Enumerates the table broken.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TableBroken.None">
      <summary>
            No broken.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TableBroken.Vertical">
      <summary>
            Vertical broken.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TableBroken.VerticalInSamePage">
      <summary>
            Vertical broken in same page.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.RenderingOptions">
      <summary>
            Represents rendering options.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RenderingOptions.BarcodeOptimization">
      <summary>
            Gets or sets barcode optimization mode. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RenderingOptions.SystemFontsNativeRendering">
      <summary>
            Gets or sets a mode where system fonts are rendered natively. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RenderingOptions.UseNewImagingEngine">
      <summary>
            Gets or sets a flag determines whether new imaging engine is used or not.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RenderingOptions.WidthExtraUnits">
      <summary>
            Gets or sets a value used to increase or decrease the width of rectangle for AppendRectangle operator.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RenderingOptions.ConvertFontsToUnicodeTTF">
      <summary>
            Indicates that all fonts will be converted to TTF unicode versions. That is useful for compatibility 
             reasons and to optimize font usage, cause every new TTF font will have not all the symbols 
             from source font, but only symbols which are used in text.
             </summary>
    </member>
    <member name="P:Aspose.Pdf.RenderingOptions.UseFontHinting">
      <summary>
            Usage of this flag turn on font hinting mechanism. Font hinting is the use of mathematical instructions to adjust the display 
            of an outline font. In some cases turning this flag on may solve problems with text legibility. 
            At current moment usage of this flag could give effect only for TTF fonts, if these fonts are used in source document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RenderingOptions.ScaleImagesToFitPageWidth">
      <summary>
            Gets or sets a values used to scale all images on the page to fit page's width. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RenderingOptions.InterpolationHighQuality">
      <summary>
            Gets or sets hiqh quality mode for interpolation.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RenderingOptions.MaxFontsCacheSize">
      <summary>
            Maximum count of fonts in fonts cache. Default value is 10.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RenderingOptions.MaxSymbolsCacheSize">
      <summary>
            Maximum count of symbols in symbol cache. Default value is 100.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.TextStamp">
      <summary>
            Reresents textual stamp.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.Draw">
      <summary>
            This property determines how stamp is drawn on page. If Draw = true stamp is drawn as graphic operators and if draw = false then stamp is drawn as text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.TreatYIndentAsBaseLine">
      <summary>
            Defines coordinate origin for placing text.
            If TreatYIndentAsBaseLine = true (default when Draw = true) YIndent value will be treated as text base line.
            If TreatYIndentAsBaseLine = false (default when Draw = false) YIndent value will be treated as bottom (descent line) of text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.WordWrap">
      <summary>
            Defines word wrap. If this property set to true and Width value specified, text will be broken in the several lines to fit into specified width. Default value: false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.Justify">
      <summary>
            Defines text justification. If this property is set to true, both left and right edges of the text are aligned. Default value: false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.Scale">
      <summary>
            Defines scaling of the text. If this property is set to true and Width value specified, text will be scaled in order to fit to specified width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.Value">
      <summary>
            Gets or sets string value which is used as stamp on the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.TextState">
      <summary>
            Gets text properties of the stamp. See <see cref="P:Aspose.Pdf.TextStamp.TextState" /> for details.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.TextAlignment">
      <summary>
            Alignment of the text inside the stamp.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.TextStamp.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.TextStamp" /> class.
            </summary>
      <param name="value">
            Stamp value.
            </param>
    </member>
    <member name="M:Aspose.Pdf.TextStamp.#ctor(System.String,Aspose.Pdf.Text.TextState)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.TextStamp" /> class.
            </summary>
      <param name="value">Stamp value.</param>
      <param name="textState">Stamp text state.</param>
    </member>
    <member name="M:Aspose.Pdf.TextStamp.Put(Aspose.Pdf.Page)">
      <summary>
            Adds textual stamp on the page.
            </summary>
      <param name="page">
            Page for stamping.
            </param>
    </member>
    <member name="M:Aspose.Pdf.TextStamp.#ctor(Aspose.Pdf.Facades.FormattedText)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.TextStamp" /> class with formattedText object
            </summary>
      <param name="formattedText">FormattedText object which contains text of the stamp.</param>
    </member>
    <member name="M:Aspose.Pdf.TextStamp.createXForm(Aspose.Pdf.Page)">
      <summary>
            Creates XForm which contains operators for text output. 
            </summary>
      <param name="page">Page where stamp should be placed.</param>
      <returns>Created XForm.</returns>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.Width">
      <summary>
            Desired width of the stamp on the page. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.Height">
      <summary>
            Desired height of the stamp on the page. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextStamp.MaxRowWidth">
      <summary>
            Max row height for WordWrap option. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.VerticalAlignment">
      <summary>
            Enumeration of possible vertical alignment values.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.VerticalAlignment.None">
      <summary>
            No alignment (use specified position).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.VerticalAlignment.Top">
      <summary>
            Align to top.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.VerticalAlignment.Center">
      <summary>
            Center alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.VerticalAlignment.Bottom">
      <summary>
            Align to bottom.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.XfaConverter.NamespaceDoc">
      <summary>
            The <b>Aspose.Pdf.XfaConverter</b> namespace provides classes that allow to convert XFA.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.XfaConverter.XfaParserOptions">
      <summary>
            class to handle related data incapsulation
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XfaConverter.XfaParserOptions.#ctor(System.Drawing.SizeF)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.XfaConverter.XfaParserOptions" /> class.
            </summary>
      <param name="pageSize">Size of the page.</param>
    </member>
    <member name="P:Aspose.Pdf.XfaConverter.XfaParserOptions.UriResolver">
      <summary>
            Gets or sets the URI resolver.
            </summary>
      <value>
            The URI resolver.
            </value>
    </member>
    <member name="P:Aspose.Pdf.XfaConverter.XfaParserOptions.PageSize">
      <summary>
            Gets or sets the size of the page.
            </summary>
      <value>
            The size of the page.
            </value>
    </member>
    <member name="P:Aspose.Pdf.XfaConverter.XfaParserOptions.Signed">
      <summary>
            If this property is true then document will be converted with using of xfa form stream (if it exists).
            If it is false then xfa form stream will be ignored.
            This property was inrtoduced because it's not clear how to calculate check sum that used for checking sygnature.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XfaConverter.XfaParserOptions.EmulateRequierdGroups">
      <summary>
            If this property is true then additional red rectangles will be drawn for required Xfa "excluded groups"
            This property was introduced because absences of analogues of excluded groups during conversion Xfa representation of forms 
            to standard.
            It is false by default.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XfaConverter.XfaParserOptions.BasePath">
      <summary>
            Gets or sets the base path.
            </summary>
      <value>
            The base path.
            </value>
    </member>
    <member name="T:Aspose.Pdf.XForm">
      <summary>
            Class represent XForm
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XForm.BBox">
      <summary>
            Gets or sets form bounding box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XForm.Name">
      <summary>
            Gets or sets form name. Form name is name which used to reference form in XObejct ductionary in page resources.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XForm.Contents">
      <summary>
            Gets operators of the form.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XForm.Opi">
      <summary>
            Gets The Open Prepress Interface (OPI).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XForm.Matrix">
      <summary>
            Gets or sets matrix of the form.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XForm.Resources">
      <summary>
            Gets Form XObject resources.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XForm.CreateNewForm(Aspose.Pdf.Page,Aspose.Pdf.Document)">
      <summary>
            Creates XForm which duplicates contents of the page. 
            </summary>
      <param name="source">Source page</param>
      <param name="document">Document where new XForm will be added.</param>
      <returns>Newly created XForm.</returns>
    </member>
    <member name="P:Aspose.Pdf.XForm.Rectangle">
      <summary>
            Gets or sets rectangel of the form.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XForm.FreeMemory">
      <summary>
            Clears cached data
            </summary>
    </member>
    <member name="T:Aspose.Pdf.XFormCollection">
      <summary>
            Class represents collection of XFormCollection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XFormCollection.Count">
      <summary>
            Gets count of XForms in collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XFormCollection.IsSynchronized">
      <summary>
            Returns true if object is synchronized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XFormCollection.SyncRoot">
      <summary>
            Synchronization object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XFormCollection.Add(Aspose.Pdf.XForm)">
      <summary>
            Adds new XForm into collection.
            </summary>
      <param name="xform">XForm to add into collection</param>
    </member>
    <member name="M:Aspose.Pdf.XFormCollection.Delete(System.Int32)">
      <summary>
            Delete XForm from collectin
            </summary>
      <param name="index">Index of XForm which must be deleted</param>
    </member>
    <member name="M:Aspose.Pdf.XFormCollection.Delete">
      <summary>
            Deletes all XForms from collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XFormCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies XFormCollection into collection. 
            </summary>
      <param name="array">Array of XForm to be copied</param>
      <param name="index">Index where XFormCollection will be copied</param>
    </member>
    <member name="M:Aspose.Pdf.XFormCollection.GetEnumerator">
      <summary>
            Retunrs collection enumerator.
            </summary>
      <returns>Enumerator for collection</returns>
    </member>
    <member name="M:Aspose.Pdf.XFormCollection.Delete(System.String)">
      <summary>
            Deletes XForm from collection by form name.
            </summary>
      <param name="name">Name of XForm to be deleted.</param>
    </member>
    <member name="P:Aspose.Pdf.XFormCollection.Item(System.Int32)">
      <summary>
            Returns XForm by index.
            </summary>
      <param name="index">Index of XFormCollection. XForms numbering is started from 1</param>
      <returns>Retreived XForm</returns>
    </member>
    <member name="P:Aspose.Pdf.XFormCollection.Item(System.String)">
      <summary>
            Returns XForm by its name. Exception is thrown if XForm with specified name is not found.
            </summary>
      <param name="name">Name of XForm</param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.Pdf.ImageFilterType">
      <summary>
            Enumeration representing image filter type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.XImage">
      <summary>
            Class representing image X-Object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XImage.ContainsTransparency">
      <summary>
            If the image contains transparancy than return true; otherwise, false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XImage.Grayscaled">
      <summary>
            Gets grayscaled version of image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XImage.Width">
      <summary>
            Gets width of the image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XImage.Height">
      <summary>
            Gets height of the image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XImage.Name">
      <summary>
            Gets or sets image name.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XImage.Save(System.IO.Stream)">
      <summary>
            Saves image data into stream as JPEG image.
            </summary>
      <param name="stream">Stream where image data will be saved.</param>
    </member>
    <member name="M:Aspose.Pdf.XImage.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Saves image into stream with requested format. 
            </summary>
      <param name="stream">Stream where image will be saved</param>
      <param name="format">Format which will be used for image enconding. <see cref="T:System.Drawing.Imaging.ImageFormat" /></param>
    </member>
    <member name="M:Aspose.Pdf.XImage.Save(System.IO.Stream,System.Int32)">
      <summary>
            Saves image data into stream as JPEG image with specified resolution.
            </summary>
      <param name="stream">Stream where image data will be saved.</param>
      <param name="resolution">Image resolution</param>
    </member>
    <member name="M:Aspose.Pdf.XImage.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Int32)">
      <summary>
            Saves image into stream with requested format with specified resolution. 
            </summary>
      <param name="stream">Stream where image will be saved</param>
      <param name="format">Format which will be used for image enconding. <see cref="T:System.Drawing.Imaging.ImageFormat" /></param>
      <param name="resolution">Image resolution</param>
    </member>
    <member name="M:Aspose.Pdf.XImage.GetColorType">
      <summary>
            Returns color type of image.
            </summary>
      <returns>The color type value.</returns>
    </member>
    <member name="M:Aspose.Pdf.XImage.IsTheSameObject(Aspose.Pdf.XImage)">
      <summary>
            Returns true if both images references to the same object.
            </summary>
      <param name="image">Image to be compared with "this" image.</param>
      <returns>Boolean value which is true if images references to the same object. </returns>
    </member>
    <member name="M:Aspose.Pdf.XImage.GetNameInCollection">
      <summary>
            Returns name of the image in ints collection.
            </summary>
      <returns>Image key (name).</returns>
    </member>
    <member name="T:Aspose.Pdf.XImageCollection">
      <summary>
            Class representing XImage collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XImageCollection.Count">
      <summary>
            Count of images in collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XImageCollection.IsSynchronized">
      <summary>
            Returns true if object is synchronized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XImageCollection.SyncRoot">
      <summary>
            Returns synchronization object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XImageCollection.Names">
      <summary>
            Gets array of image names.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.Add(Aspose.Pdf.XImage)">
      <summary>
            Adds new image to Image list. This method adds image as reference to the same PdfObject (which allows to decrease file size)
            </summary>
      <param name="image">XImage to be added.</param>
      <returns>Name of the added image. </returns>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.Add(System.IO.Stream)">
      <summary>
            Adds entity to the end of the collection, so entity can be accessed by the last index.
            </summary>
      <param name="image">Stream containing image data (in JPEG format).</param>
      <returns>Name of the added image.</returns>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.Add(System.IO.Stream,Aspose.Pdf.ImageFilterType)">
      <summary>
            Adds entity to the end of the collection, so entity can be accessed by the last index.
            </summary>
      <param name="image">Stream containing image data.</param>
      <param name="filterType">The image filter type.</param>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.Add(System.IO.Stream,System.Int32)">
      <summary>
            Adds entity to the end of the collection, so entity can be accessed by the last index.
            </summary>
      <param name="image">Stream containing image data (in JPEG format).</param>
      <param name="quality">JPEG quality.</param>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.Delete(System.Int32)">
      <summary>
            Removes index from collection by index.
            </summary>
      <param name="index">Image index.</param>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.Delete(System.String)">
      <summary>
            Removes index from collection by name.
            </summary>
      <param name="name">Name of image which must to be deleted.</param>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.Delete">
      <summary>
            Deletes images from collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.GetEnumerator">
      <summary>
            Returns collection enumerator.
            </summary>
      <returns>Enumerator of collection</returns>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies array of images into collection.
            </summary>
      <param name="array">Array to be copied.</param>
      <param name="index">Index where images will be copied into collection.</param>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.Replace(System.Int32,System.IO.Stream)">
      <summary>
            Replace image in collection with another image. 
            </summary>
      <param name="index">Index of collection item which will be replaced.</param>
      <param name="stream">Stream containing image data (in JPEG format).</param>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.Replace(System.Int32,System.IO.Stream,System.Int32)">
      <summary>
            Replace image in collection with another image. 
            </summary>
      <param name="index">Index of collection item which will be replaced.</param>
      <param name="stream">Stream containing image data (in JPEG format).</param>
      <param name="quality">JPEG quality.</param>
    </member>
    <member name="P:Aspose.Pdf.XImageCollection.Item(System.Int32)">
      <summary>
            Gets image from collection by its index.
            </summary>
      <param name="index">Image index</param>
      <returns>Retreived image.</returns>
    </member>
    <member name="P:Aspose.Pdf.XImageCollection.Item(System.String)">
      <summary>
            Gets image from collection by its name.
            </summary>
      <param name="name">Image name.</param>
      <returns>Retreived image.</returns>
    </member>
    <member name="M:Aspose.Pdf.XImageCollection.GetImageName(Aspose.Pdf.XImage)">
      <summary>
            Returns name in images list which is key of the given image. 
            </summary>
      <param name="image">Image to search.</param>
      <returns>Name (key) of the found image; null if images was not found.</returns>
    </member>
    <member name="T:Aspose.Pdf.XmpPdfAExtensionField">
      <summary>
            This schema describes a field in a structured type. It is very similar to the PDF/A Property Value Type 
            schema, but defines a field in a structure instead of a property.
            Schema namespace URI: http://www.aiim.org/pdfa/ns/field#
            Required schema namespace prefix: pdfaField.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XmpPdfAExtensionField.Name">
      <summary>
            Field name. Field names must be valid XML element names.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XmpPdfAExtensionField.ValueType">
      <summary>
            Field value type, drawn from XMP Specification 2004, or an embedded PDF/A value type extension
            schema. Predefined XMP type names or names of custom types.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionField.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Initializes object.
            </summary>
      <param name="name">The field name.</param>
      <param name="value">The field value.</param>
      <param name="valueType">The field value type.</param>
      <param name="description">The field description.</param>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionField.GetXml(System.Xml.XmlDocument)">
      <summary>
            Returns the list of xml elements that represent field in xml tree.
            </summary>
      <param name="xmlDocument">The source xml document.</param>
      <returns>The list of fields.</returns>
    </member>
    <member name="T:Aspose.Pdf.XmpPdfAExtensionObject">
      <summary>
            Represents the base class for field, property, value type instances.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XmpPdfAExtensionObject.Description">
      <summary>
            Gets the description.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XmpPdfAExtensionObject.Value">
      <summary>
            Gets or sets the value.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionObject.GetXml(System.Xml.XmlDocument)">
      <summary>
            Returns the list of xml elements that represent object in xml tree.
            </summary>
      <param name="xmlDocument">The source xml document.</param>
      <returns>&gt;The list of xml elements.</returns>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionObject.#ctor(System.String,System.String)">
      <summary>
            Initializes new object.
            </summary>
      <param name="value">The value.</param>
      <param name="description">The description.</param>
    </member>
    <member name="T:Aspose.Pdf.XmpPdfAExtensionProperty">
      <summary>
            Describes a single property. Schema namespace URI: http://www.aiim.org/pdfa/ns/property#
            Required schema namespace prefix: pdfaProperty
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XmpPdfAExtensionProperty.Category">
      <summary>
            Gets the property category.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionProperty.#ctor(System.String,System.String,System.String,Aspose.Pdf.XmpPdfAExtensionCategoryType,System.String)">
      <summary>
            Initializes new object.
            </summary>
      <param name="name">The property name.</param>
      <param name="value">The property value.</param>
      <param name="valueType">The property value type.</param>
      <param name="category">The property category.</param>
      <param name="description">The property description.</param>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionProperty.GetXml(System.Xml.XmlDocument)">
      <summary>
            Returns the list of xml elements that represent property in xml tree.
            </summary>
      <param name="xmlDocument">The source xml document.</param>
      <returns>The list of xml elements.</returns>
    </member>
    <member name="T:Aspose.Pdf.XmpPdfAExtensionCategoryType">
      <summary>
            Property category: internal or external.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.XmpPdfAExtensionCategoryType.Internal">
      <summary>
            Internal properties are created automatically from document content.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.XmpPdfAExtensionCategoryType.External">
      <summary>
            External properties are based on user input.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.XmpPdfAExtensionSchema">
      <summary>
            Describes the XMP extension schema which is provided by PDF/A-1.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.XmpPdfAExtensionSchema.DefaultExtensionNamespacePrefix">
      <summary>
            Default extension namespace prefix.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.XmpPdfAExtensionSchema.DefaultExtensionNamespaceUri">
      <summary>
            Default extension namespace uri.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.XmpPdfAExtensionSchema.DefaultSchemaNamespacePrefix">
      <summary>
            Default schema namespace prefix.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.XmpPdfAExtensionSchema.DefaultSchemaNamespaceUri">
      <summary>
            Default schema namespace uri.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.XmpPdfAExtensionSchema.DefaultPropertyNamespacePrefix">
      <summary>
            Default property namespace prefix.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.XmpPdfAExtensionSchema.DefaultPropertyNamespaceUri">
      <summary>
            Default property namespace uri.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.XmpPdfAExtensionSchema.DefaultValueTypeNamespacePrefix">
      <summary>
            Default valie type namespace prefix.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.XmpPdfAExtensionSchema.DefaultValueNamespaceUri">
      <summary>
            Default value namespace uri.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.XmpPdfAExtensionSchema.DefaultFieldNamespacePrefix">
      <summary>
            Default field namespace prefix.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.XmpPdfAExtensionSchema.DefaultFieldNamespaceUri">
      <summary>
            Default extension namespace uri.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.XmpPdfAExtensionSchema.RdfPrefix">
      <summary>
            Default rdf namespace prefix.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.XmpPdfAExtensionSchema.RdfNamespaceURI">
      <summary>
            Default rdf namespace uri.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XmpPdfAExtensionSchema.Description">
      <summary>
            Gets the schema description.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XmpPdfAExtensionSchema.Objects">
      <summary>
            Gets the list of objects (properties, value types).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionSchema.#ctor(Aspose.Pdf.XmpPdfAExtensionSchemaDescription)">
      <summary>
            Initializes new object.
            </summary>
      <param name="description">The schema description.</param>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionSchema.Add(Aspose.Pdf.XmpPdfAExtensionObject)">
      <summary>
            Adds new object into schema.
            </summary>
      <param name="obj">The new object.</param>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionSchema.Contains(Aspose.Pdf.XmpPdfAExtensionObject)">
      <summary>
            Determines whether obj exists in schema.
            </summary>
      <param name="obj">The obj to find.</param>
      <returns>True - object exists in schema; otherwise, false.</returns>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionSchema.Remove(Aspose.Pdf.XmpPdfAExtensionObject)">
      <summary>
            Removes the object from schema.
            </summary>
      <param name="obj">The object to remove.</param>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionSchema.GetSchemaXml(System.Xml.XmlDocument)">
      <summary>
            Returns the xml element (tag - li) that represents schema in xml tree.
            </summary>
      <param name="xmlDocument">The source xml document.</param>
      <returns>The xml element.</returns>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionSchema.GetValuesXml(System.Xml.XmlDocument,System.Xml.XmlElement)">
      <summary>
            Gets the values of properties as xml tree representation.
            </summary>
      <param name="xmlDocument">The source xml document.</param>
      <param name="rootElement">The root node of properties values list.</param>
    </member>
    <member name="T:Aspose.Pdf.XmpPdfAExtensionSchemaDescription">
      <summary>
            Represents the description of XMP extension schema which is provided by PDF/A-1.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XmpPdfAExtensionSchemaDescription.Prefix">
      <summary>
            Gets the prefix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XmpPdfAExtensionSchemaDescription.NamespaceURI">
      <summary>
            Gets the namespace URI.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XmpPdfAExtensionSchemaDescription.Description">
      <summary>
            Gets the optional description.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionSchemaDescription.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes new object.
            </summary>
      <param name="prefix">The prefix.</param>
      <param name="namespaceURI">The namespace URI.</param>
      <param name="description">The optional desciption.</param>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionSchemaDescription.GetXml(System.Xml.XmlDocument)">
      <summary>
            Returns the list of xml elements that represent schema description in xml tree.
            </summary>
      <param name="xmlDocument">The source xml document.</param>
      <returns>The list of xml elements.</returns>
    </member>
    <member name="T:Aspose.Pdf.XmpPdfAExtensionValueType">
      <summary>
            The PDF/A ValueType schema is required for all property value types which are not defined in the XMP 2004 specification, i.e. for value types outside of the following list:
            - Array types (these are container types which may contain one or more fields): Alt, Bag, Seq
            - Basic value types: Boolean, (open and closed) Choice, Date, Dimensions, Integer, Lang Alt, Locale, MIMEType, ProperName, Real, Text, Thumbnail, URI, URL, XPath
            - Media Management value types: AgentName, RenditionClass, ResourceEvent, ResourceRef, Version
            - Basic Job/Workflow value type: Job
            - EXIF schema value types: Flash, CFAPattern, DeviceSettings, GPSCoordinate, OECF/SFR, Rational
            Schema namespace URI: http://www.aiim.org/pdfa/ns/type#
            Required schema namespace prefix: pdfaType
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XmpPdfAExtensionValueType.Type">
      <summary>
            Gets the value type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XmpPdfAExtensionValueType.NamespaceUri">
      <summary>
            Gets the namespace URI.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XmpPdfAExtensionValueType.Prefix">
      <summary>
            Gets the prefix.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XmpPdfAExtensionValueType.Fields">
      <summary>
            Gets the list of fields.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionValueType.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Initializes new object.
            </summary>
      <param name="type">The value type.</param>
      <param name="namespaceUri">The namespace URI.</param>
      <param name="prefix">The prefix.</param>
      <param name="description">The description.</param>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionValueType.Add(Aspose.Pdf.XmpPdfAExtensionField)">
      <summary>
            Add new field.
            </summary>
      <param name="field">The field to add.</param>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionValueType.AddRange(Aspose.Pdf.XmpPdfAExtensionField[])">
      <summary>
            Adds the range of fields.
            </summary>
      <param name="fields">The fields to add.</param>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionValueType.Remove(Aspose.Pdf.XmpPdfAExtensionField)">
      <summary>
            Removes the field from the list of fields.
            </summary>
      <param name="field">The field to remove.</param>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionValueType.Clear">
      <summary>
            Clears all fields.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XmpPdfAExtensionValueType.GetXml(System.Xml.XmlDocument)">
      <summary>
            Returns the list of xml elements that represent value type in xml tree.
            </summary>
      <param name="xmlDocument">The source xml document.</param>
      <returns>The list of xml elements.</returns>
    </member>
    <member name="T:Aspose.Pdf.DocSaveOptions">
      <summary>
            Save options for export to Doc format
            </summary>
    </member>
    <member name="T:Aspose.Pdf.DocSaveOptions.RecognitionMode">
      <summary>
            Allows to control how a PDF document is converted into a word processing document.
            </summary>
      <remarks>
        <para>Use the <see cref="F:Aspose.Pdf.DocSaveOptions.RecognitionMode.Textbox" /> mode when the resulting document is not goining 
            to be heavily edited futher. Textboxes are easy to modify when there is not a lot to do.</para>
        <para>Use the <see cref="F:Aspose.Pdf.DocSaveOptions.RecognitionMode.Flow" /> mode when the output document needs further editing. 
            Paragraphs and texlines in the flow mode allow easy modification of text, but unupported
            formatting objects will look worse than in the <see cref="F:Aspose.Pdf.DocSaveOptions.RecognitionMode.Textbox" /> mode.</para>
      </remarks>
    </member>
    <member name="F:Aspose.Pdf.DocSaveOptions.RecognitionMode.Textbox">
      <summary>
        <para>This mode is fast and good for maximally preserving original look of the PDF file, 
            but editability of the resulting document could be limited.</para>
        <para>Every visually grouped block of text int the original PDF file is converted into a textbox 
            in the resulting document. This achieves maximal resemblance of the output document to the original 
            PDF file. The output document will look good, but it will consist entirely of textboxes and it 
            could makes further editing of the document in Microsoft Word quite hard.</para>
        <para>This is the default mode.</para>
      </summary>
    </member>
    <member name="F:Aspose.Pdf.DocSaveOptions.RecognitionMode.Flow">
      <summary>
            Full recognition mode, the engine performs grouping and multi-level analysis to restore
            the original document author's intent and produce a maximally editable document.
            The downside is that the output document might look different from the original PDF file.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.DocSaveOptions.DocFormat">
      <summary>
            Allows to specify .doc or .docx file format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.DocSaveOptions.DocFormat.Doc">
      <summary>
            [MS-DOC]: Word (.doc) Binary File Format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.DocSaveOptions.DocFormat.DocX">
      <summary>
            Office Open XML (.docx) File Format
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocSaveOptions.Mode">
      <summary>
            Recognition mode.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocSaveOptions.RelativeHorizontalProximity">
      <summary>
                In Pdf words may be innerly represented with operators that prints words
              by independently printing their letters or syllables. So, to detect words sometimes we need detect groups
              of independent chars that are in fact words.
                This setting defines width of space between text elements(letters, syllables) 
              that must be treated as distance between words during recognition of words in source PDF.
              (presence of empty space at least with this width between letters means that 
               textual elements pertain to different words).
              It's normed to font size -  1.0 means 100% of supposed word's font size.
             ATTENTION!It's used only in cases when source PDF contains specific rarely used fonts
             for which optimal value cannot be calculated from font. 
               So, in vast majority of cases this parameter changes nothing in result document.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:Aspose.Pdf.DocSaveOptions.MaxDistanceBetweenTextLines" -->
    <member name="P:Aspose.Pdf.DocSaveOptions.RecognizeBullets">
      <summary>
            Switch on the recognition of bullets
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocSaveOptions.AddReturnToLineEnd">
      <summary>
            Use paragraph or line breaks
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocSaveOptions.ImageResolutionX">
      <summary>
            Converted images X resolution.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocSaveOptions.ImageResolutionY">
      <summary>
            Converted images Y resolution.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocSaveOptions.Format">
      <summary>
            Output format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.DocSaveOptions.CustomProgressHandler">
      <summary>
              This handler can be used to handle conversion progress events
              f.e. it can be used to show progress bar or messages about current amount
              of processed  pages, example of handler's code that shows progress on console is :
             </summary>
      <example>
        <code>
              public static void ConvertWithShowingProgress()
            {
                (new Aspose.Pdf.License()).SetLicense(@"F:\_Sources\Aspose_5\trunk\testdata\License\Aspose.Total.lic");
                Document doc = new Document(@"F:\ExternalTestsData\Booklet.pdf");
                HtmlSaveOptions saveOptions = new HtmlSaveOptions();
                saveOptions.CustomProgressHandler = new HtmlSaveOptions.ConversionProgressEventHandler(ShowProgressOnConsole);
                doc.Save(@"F:\ExternalTestsData\Booklet.doc", saveOptions);
                Console.ReadLine();
            }
            public static void ShowProgressOnConsole(HtmlSaveOptions.ProgressEventHandlerInfo eventInfo)
            {
                switch (eventInfo.EventType)
                {
                    case HtmlSaveOptions.ProgressEventType.TotalProgress:
                        Console.WriteLine(string.Format("{0}  - Conversion progress : {1}% .", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString()));
                        break;
                    case HtmlSaveOptions.ProgressEventType.SourcePageAnalized:
                        Console.WriteLine(string.Format("{0}  - Source page {1} of {2} analyzed.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString()));
                        break;
                    case HtmlSaveOptions.ProgressEventType.ResultPageCreated:
                        Console.WriteLine(string.Format("{0}  - Result page's {1} of {2} layout created.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString()));
                        break;
                    case HtmlSaveOptions.ProgressEventType.ResultPageSaved:
                        Console.WriteLine(string.Format("{0}  - Result page {1} of {2} exported.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString()));
                        break;
                    default:
                        break;
                }
             }
             </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.PdfSaveOptions">
      <summary>
            Save options for export to Pdf format
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PdfSaveOptions.DefaultFontName">
      <summary>
            Font name used by default for fonts which are absent on computer.
            When the PDF document that is saved into PDF contains fonts, that are not available 
            in the document itself and on the device, API replaces this fonts with the 
            default font(if font with <see cref="P:Aspose.Pdf.PdfSaveOptions.DefaultFontName" /> is found on device)
            </summary>
    </member>
    <member name="T:Aspose.Pdf.SaveFormat">
      <summary>
             Specifies format 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveFormat.Pdf">
      <summary>
             means saving without change of format, i.e. as PDF
             use it please instead of 'SaveFormat.None', that is obsolete one
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveFormat.None">
      <summary>
             means saving without change of format, i.e. as PDF
             It's obsolete one and will be deleted eventually,
             please use instead 'SaveFormat.Pdf'
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveFormat.Doc">
      <summary>
             means saving in DOC format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveFormat.Xps">
      <summary>
             means saving in XPS format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveFormat.Html">
      <summary>
             means saving in HTML format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveFormat.Xml">
      <summary>
             means saving in XML format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveFormat.TeX">
      <summary>
             means saving in TEX format i.e. format suitable for Latex text editor
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveFormat.DocX">
      <summary>
             means saving in DOCX format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveFormat.Svg">
      <summary>
             means saving in SVG format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveFormat.MobiXml">
      <summary>
             means saving in MobiXML format(special format of e-books)
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveFormat.Excel">
      <summary>
             means saving in MsExcel format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveFormat.Epub">
      <summary>
             means saving in EPUB format(special format of e-books)
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveFormat.Pptx">
      <summary>
             means saving in PPTX format
            </summary>
    </member>
    <member name="T:Aspose.Pdf.SaveOptions">
      <summary>
             SaveOptions type hold level of abstraction on individual save options
            </summary>
    </member>
    <member name="T:Aspose.Pdf.SaveOptions.HtmlBorderLineType">
      <summary>
             Represents line types that can be used in result document for drawing borders or another lines
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.HtmlBorderLineType.None">
      <summary>
             No line will be shown
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.HtmlBorderLineType.Dotted">
      <summary>
             dotted line will be shown
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.HtmlBorderLineType.Dashed">
      <summary>
             dashed line will be shown
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.HtmlBorderLineType.Solid">
      <summary>
             solid line will be shown
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.HtmlBorderLineType.Double">
      <summary>
             double line will be shown
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.HtmlBorderLineType.Groove">
      <summary>
             grove line will be shown
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.HtmlBorderLineType.Ridge">
      <summary>
             ridhe line will be shown
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.HtmlBorderLineType.Inset">
      <summary>
             inset line will be shown
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.HtmlBorderLineType.Outset">
      <summary>
             outset line will be shown
            </summary>
    </member>
    <member name="T:Aspose.Pdf.SaveOptions.BorderPartStyle">
      <summary>
             Represents information of one part of border(top, botom, left side or right side)
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.BorderPartStyle.Color">
      <summary>
             Represents border line's line color
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.BorderPartStyle.LineType">
      <summary>
             Represents border line's type - f.e. Dashed or Solid
            </summary>
    </member>
    <member name="P:Aspose.Pdf.SaveOptions.BorderPartStyle.WidthInPoints">
      <summary>
             Represents border line's width in points. Must be number greater then zero.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.SaveOptions.BorderInfo">
      <summary>
              Instance of this class represents information about border 
              That can be drown on some result document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.SaveOptions.BorderInfo.#ctor">
      <summary>
              Creates instance of BorderInfo class
            </summary>
    </member>
    <member name="M:Aspose.Pdf.SaveOptions.BorderInfo.#ctor(Aspose.Pdf.SaveOptions.BorderPartStyle)">
      <summary>
              Creates instance of BorderInfo class and initializes
              all elements of border(Top, Left, Right, Bottom)
              with attributes copied from supplied border style
            </summary>
      <param name="commonStyle">style of border parts that will be used for all elements of border(left, right, top, bottom)</param>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.BorderInfo.TopStyleIfAny">
      <summary>
              Represents top part(if any) of border
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.BorderInfo.LeftStyleIfAny">
      <summary>
              Represents left part(if any) of border
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.BorderInfo.RightStyleIfAny">
      <summary>
              Represents right part(if any) of border
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.BorderInfo.BottomStyleIfAny">
      <summary>
              Represents bottom part(if any) of border
            </summary>
    </member>
    <member name="T:Aspose.Pdf.SaveOptions.NodeLevelResourceType">
      <summary>
             enumerates possible types of saved external resources
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.NodeLevelResourceType.Image">
      <summary>
            Means that supplied resource is image
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.NodeLevelResourceType.Font">
      <summary>
            Means that supplied resource is font
            </summary>
    </member>
    <member name="T:Aspose.Pdf.SaveOptions.ResourceSavingInfo">
      <summary>
              This class represents set of data 
              that related to external resource file's saving that 
              occures during conversion of PDF to some other format (f.e. HTML)
            </summary>
    </member>
    <member name="P:Aspose.Pdf.SaveOptions.ResourceSavingInfo.ResourceType">
      <summary>
             Set by converter.
             Supposed file name that goes from converter to code of custom method
             Can be use in custom code to decide how to process or where save that file
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.ResourceSavingInfo.SupposedFileName">
      <summary>
             Set by converter.
             Supposed file name that goes from converter to code of custom method
             Can be use in custom code to decide how to process or where save that file
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.ResourceSavingInfo.ContentStream">
      <summary>
               Set by converter.
               Represents binary content of saved file. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveOptions.ResourceSavingInfo.CustomProcessingCancelled">
      <summary>
               this flag must set to "true" in custom code if for some reasons
               proposed file should be processed not with custom code but 
               with converter's code itself in standard for converter way. 
               So, it' setting set to true  means that custom code did not process referenced file and 
               converter must handle it itself (in both sences - for saving somewhere and for naming in referencing file).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.SaveOptions.WarningHandler">
      <summary>
            Callback to handle any warnings generated. 
            The WarningHandler returns ReturnAction enum item specifying either Continue or Abort. 
            Continue is the default action and the Save operation continues, however the user may also return Abort in which case the Save operation should cease.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.SaveOptions.SaveFormat">
      <summary>
            Format of data save.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.SaveOptions.CloseResponse">
      <summary>
            Gets or sets boolean value which indicates will Response object be closed after document saved into response.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.CgmLoadOptions">
      <summary>
            Contains options for loading/importing CGM file into pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.CgmLoadOptions.PageSize">
      <summary>
            Gets or sets output page size for import.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.CgmLoadOptions.#ctor">
      <summary>
            Creates default load options for converting CGM file into pdf document. 
            Default pdf page size - A4 300dpi 2480 X 3508.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.CgmLoadOptions.#ctor(System.Drawing.SizeF)">
      <summary>
            Creates load options with defined <see cref="!:pageSize" />.
            </summary>
      <param name="pageSize">
            Defines pdf page width and height.
            </param>
    </member>
    <member name="T:Aspose.Pdf.ContentDisposition">
      <summary>
            MIME protocol Content-Disposition header.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ContentDisposition.Inline">
      <summary>
            Result is shown inline.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ContentDisposition.Attachment">
      <summary>
            Result is saved as attachment.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HtmlLoadOptions">
      <summary>
            Represents options for loading/importing html file into pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlLoadOptions.HtmlMediaType">
      <summary>
            Gets or sets possible media types used during rendering.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlLoadOptions.InputEncoding">
      <summary>
            Gets or sets the attribute specifying the encoding used for this document at the time of the parsing. If this attribute is null the encoding will determine from document character set atribute.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlLoadOptions.BasePath">
      <summary>
            The base path/url for the html file.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.HtmlLoadOptions.#ctor">
      <summary>
            Creates load options for converting html into pdf document with empty base path.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HtmlLoadOptions.ExternalResourcesCredentials">
      <summary>
             If loading of external data referenced in HTML 
             requirs credentials, You can put them into this parameter - they will be used
             during loading of external resources
            </summary>
    </member>
    <member name="M:Aspose.Pdf.HtmlLoadOptions.#ctor(System.String)">
      <summary>
            Creates load options for converting html into pdf document with defined base path.
            </summary>
      <param name="basePath">
            The base path/url for the html file.
            </param>
    </member>
    <member name="F:Aspose.Pdf.HtmlLoadOptions.CustomLoaderOfExternalResources">
      <summary>
             Sometimes it's necessary to avoid usage of internal loader of external resources(like images or CSSes)
             and supply custom method that will get requested resources from somewhere. For example, during usage 
             of Aspose.PDF in cloude direct access to referenced files impossible: in such case some custome code put
             into special method should be used, and delegate that refers that method should be assygned to this attribute.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlLoadOptions.PageInfo">
      <summary>
            Gets or sets document page info
            </summary>
    </member>
    <member name="T:Aspose.Pdf.MhtLoadOptions">
      <summary>
            Represents options for loading/importing of .mht-file into pdf document.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.LoadFormat">
      <summary>
            Specifies load format.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadFormat.CGM">
      <summary>
             means loading of document in CGM format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadFormat.HTML">
      <summary>
             means loading of document in HTML format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadFormat.EPUB">
      <summary>
             means loading of document in EPUB format(special format of e-books)
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadFormat.XML">
      <summary>
             means loading of document in XML format(special XML that represent logical structure of PDF document)
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadFormat.XSLFO">
      <summary>
             means loading of document in XSLFO format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadFormat.PCL">
      <summary>
             means loading of document in PCL format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadFormat.XPS">
      <summary>
             means loading of document in XPS format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadFormat.TEX">
      <summary>
             means loading of document in TEX format - format of Latex text editor 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadFormat.SVG">
      <summary>
             means loading of document in SVG format - format of Latex text editor 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadFormat.MHT">
      <summary>
             means loading of document in MHT format(that is packed HTML format) 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadFormat.PS">
      <summary>
             means loading of document in PS format(format of PostScript document) 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.WarningType">
      <summary>
            Enum represented warning type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.WarningType.SourceFileCorruption">
      <summary>
            The file is corrupted.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.WarningType.DataLoss">
      <summary>
            Text/chart/image or other data is completely missing from either the documet tree following load, or the created document following save. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.WarningType.MajorFormattingLoss">
      <summary>
            Major formatting losses compared to the original document. This is for occasions when the formatting loss is substantial but the data is still there.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.WarningType.MinorFormattingLoss">
      <summary>
            Minor formatting losses compared to the original document. This is for minor losses of fidelity.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.WarningType.CompatibilityIssue">
      <summary>
            Known issue that will prevent the document being opened by certain user agents, or previous versions of user agents.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.WarningType.InvalidInputStreamType">
      <summary>
            Invalid input stream type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.WarningType.UnexpectedContent">
      <summary>
            The file has unexpected content.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.WarningInfo">
      <summary>
            Immutable object for encapsulating warning information.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.WarningInfo.#ctor(Aspose.Pdf.WarningType,System.String)">
      <summary>
            Constructs instance for gathering information.
            </summary>
      <param name="type">
            the warning type to set
            </param>
      <param name="message">
            the warning message to set
            </param>
    </member>
    <member name="P:Aspose.Pdf.WarningInfo.WarningMessage">
      <summary>
              Returns string representation of warning message.
            </summary>
      <returns> 
            the warning message
            </returns>
    </member>
    <member name="P:Aspose.Pdf.WarningInfo.WarningTypeProperty">
      <summary>
              Returns warning type.
            </summary>
      <returns> 
            the warning type
            </returns>
    </member>
    <member name="T:Aspose.Pdf.IWarningCallback">
      <summary>
            Interface for user's callback mechanism support.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.IWarningCallback.Warning(Aspose.Pdf.WarningInfo)">
      <summary>
            The callback method for some program notifications. 
            </summary>
      <param name="warning">
            the warning information for some happened warning
            </param>
      <returns>
            the result of further program workflow
            </returns>
    </member>
    <member name="T:Aspose.Pdf.ReturnAction">
      <summary>
            Enum represented a program workflow action in case of invoking the
            <see cref="M:Aspose.Pdf.IWarningCallback.Warning(Aspose.Pdf.WarningInfo)" /> method.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ReturnAction.Continue">
      <summary>
            Used for continue flow.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ReturnAction.Abort">
      <summary>
            Used for abort flow.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.LoadOptions">
      <summary>
             LoadOptions type holds level of abstraction on individual load options
            </summary>
    </member>
    <member name="T:Aspose.Pdf.LoadOptions.MarginsAreaUsageModes">
      <summary>
             Represents mode of usage of margins area during conversion  
             (like HTML, EPUB etc), defines treatement of instructions of imported format 
              related to usage of margins.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadOptions.MarginsAreaUsageModes.PutContentOnMarginAreaIfNecessary">
      <summary>
             In this mode converter obeyes format of imported document (f.e. CSS of imported HTML)
             in usage of margins area.So, if format of imported document requires usage 
             of margins area for rendering , converter will allow that
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadOptions.MarginsAreaUsageModes.NeverPutContentOnMarginArea">
      <summary>
             This mode strictly forbids usage of margins area,
             so, converter will never use area of margins for rendering,
             even if CSS or format of source document allows or requirs that
            </summary>
    </member>
    <member name="T:Aspose.Pdf.LoadOptions.PageSizeAdjustmentModes">
      <summary>
              ATTENTION! The feature implemented but did not put yet to public API since blocker issue in 
              OSHARED layer revealed for sample document.
              
             
              Represents mode of usage of page size during conversion.
             Formats (like HTML, EPUB etc), usually have float design, so, it allows to fit required
             pagesize. But sometimes content has specifies horizontal positions or size that 
             does not allow put content into required page size.
               In such case we can define what should be done in this case (i.e when size of content does not fit 
             required initial page size of result PDF document).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadOptions.PageSizeAdjustmentModes.NoAjustmentAllwaysUsePredefinedSize">
      <summary>
             In this mode result pages will have required pagesize defined in LoadOptions,
             no matter whether content after conversion goes out of page boundaries or no.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadOptions.PageSizeAdjustmentModes.EnlargeRequiredViewportWidthAndDoConversionAgain">
      <summary>
              This mode defines such behaviour: after getting of conversion result ,
             and detecting of fact that some content has been truncated,
             width of portview is enlarged to fit content and conversion is repeated.
               This mode allows getting of less pages in result in such case but requires repeated
             rendering(and therefore more processing time).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LoadOptions.WarningHandler">
      <summary>
            Callback to handle any warnings generated. 
            The WarningHandler returns ReturnAction enum item specifying either Continue or Abort. 
            Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LoadOptions.LoadFormat">
      <summary>
            Represents file format which <see cref="T:Aspose.Pdf.LoadOptions" /> describes.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.LoadOptions.ResourceLoadingResult">
      <summary>
              Result of custom loading of resource
            </summary>
    </member>
    <member name="M:Aspose.Pdf.LoadOptions.ResourceLoadingResult.#ctor(System.Byte[])">
      <summary>
              Creates instance of loading result
            </summary>
      <param name="data"> reult of custom loading must be allways provided, it can be zero-length array if it's impossible to get any result </param>
    </member>
    <member name="P:Aspose.Pdf.LoadOptions.ResourceLoadingResult.Data">
      <summary>
              Bynary data that loaded with custom loader - it must be set after loading
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadOptions.ResourceLoadingResult.EncodingIfKnown">
      <summary>
              Sometimes encoding of resource is known after or during loading.
              In such case  custom code can provide converter with that knowledge via 
              this parameter. You can leave null in this parameter if encoding is unknown or does not matter.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadOptions.ResourceLoadingResult.ExceptionOfLoadingIfAny">
      <summary>
               Sometimes it's impossible to load requested resource for some reason.
             Unavailability of resource often does not lead to crash of conversiov and
             result document can be created anyway(but maybe in a bit worse quality, without images etc.).
               If exception occured during loading, just catch it and put in this parameter - 
              sometimes that information is usefull for converter for rendering of result.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadOptions.ResourceLoadingResult.MIMETypeIfKnown">
      <summary>
             Sometimes knowledge about MIME type of loaded resource is usefull for converter
             You can provide MIME type(if it'd known after loading) in this parameter. Please
             leave parameter equal to null when MIME type unknown or it's not necessary to supply it. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.LoadOptions.ResourceLoadingResult.LoadingCancelled">
      <summary>
             Sometimes for some reasons loading should not occure custom code. In such case 
             please set this flag as True. In such case converter will try use internal default
             resource loader to get that result(as it behave in situation when custom strategy not supplied).
            </summary>
    </member>
    <member name="T:Aspose.Pdf.LoadOptions.ResourceLoadingStrategy">
      <summary>
             Sometimes it's necessary to avoid usage of internal loader of external resources(like images or CSSes)
             and supply custom method, that will get requested resources from somewhere. For example during usage 
             of Aspose.Pdf in cloud direct access to referenced files impossible, and some custome code put into special
              method should be used.
               This delegate defines signature of such custom method.
            </summary>
      <param name="resourceURI">Resource URI.</param>
      <returns>ResourceLoadingResult object.</returns>
    </member>
    <member name="T:Aspose.Pdf.PasswordType">
      <summary>
            This enum represents  known password types used for password protected pdf documents.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PasswordType.None">
      <summary>
            Pdf document is not password protected.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PasswordType.User">
      <summary>
            Pdf document was opened using document open password (restricted access).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PasswordType.Owner">
      <summary>
            Pdf document was opened using change permissions password (full access).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PasswordType.Inaccessible">
      <summary>
            Pdf document is password protected but both user and owner passwords are not empty and 
            none of the passwords was defined or supplied password was incorrect. So it impossible to deduce the type of the password.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Structure.NamespaceDoc">
      <summary>
            The <b>Aspose.Pdf.Structure</b> namespace provides classes which help to work with a logical structure of a document which presents 
            the organization of the document into chapters and sections or the identification of special elements such as figures, tables, and footnotes.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Structure.Element">
      <summary>
            Class representing base element of logical structure.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Structure.Element.Children">
      <summary>
            Gets child elements collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Structure.Element.Lang">
      <summary>
            (Optional; PDF 1.4) A language specifying the natural language for all text
            in the structure element except where overridden by language specifications for nested structure
            elements or marked content.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Structure.Element.ActualText">
      <summary>
            (Optional; PDF 1.4) Text that is an exact replacement for the structure element and its children.
            This replacement text (which should apply to as small a piece of content as possible)
            is useful when extracting the document’s contents in support of accessibility to users
            with disabilities or for other purposes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Structure.Element.Alt">
      <summary>
            (Optional) An alternate description of the structure element and its children in
            human-readableform, which is useful when extracting the document’s contents in support
            of accessibility to users with disabilities or for other purposes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Structure.Element.E">
      <summary>
            (Optional; PDF 1.5) The expanded form of an abbreviation.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Structure.StructElement">
      <summary>
            General structure element.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Structure.RootElement">
      <summary>
            Root structure element.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Structure.FigureElement">
      <summary>
            Class representing logical structure figure.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Structure.FigureElement.Image">
      <summary>
            Gets the value of figure structure element.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Structure.TextElement">
      <summary>
            General text element of document logical structure.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Structure.TextElement.Text">
      <summary>
            Gets the value of text structure element.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PclLoadOptions">
      <summary>
            Represents options for loading(import) PCL file into pdf document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PclLoadOptions.ConversionEngine">
      <summary>
            Defines conversion engine that will be used for conversion
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PclLoadOptions.SupressErrors">
      <summary>
            Gets or sets boolean value which indicates will PCL conversion errors should be supressed.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PclLoadOptions.Exceptions">
      <summary>
            List of conversion errors.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PclLoadOptions.ConversionEngines">
      <summary>
            Enumerates conversion engines that can be used for conversion
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PclLoadOptions.ConversionEngines.LegacyEngine">
      <summary>
             Legacy conversion engine is conversion engine thay was used for a while and is used by default. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PclLoadOptions.ConversionEngines.NewEngine">
      <summary>
             New conversion engine is currently in A-testing state. We open it into public API to get some feedback. 
             It's currently recommended to use it only when old conversion engine cannot convert document for some reasons.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.SvgLoadOptions">
      <summary>
            Represents options for loading/importing SVG file into pdf document.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.SvgLoadOptions.ConversionEngines">
      <summary>
            Enumerates conversion engines that can be used for conversion
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SvgLoadOptions.ConversionEngines.LegacyEngine">
      <summary>
            Represents legacy SVG to PDF conversion engine.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SvgLoadOptions.ConversionEngines.NewEngine">
      <summary>
            Represents new SVG to PDF conversion engine.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SvgLoadOptions.ConversionEngine">
      <summary>
            Allows select conversion engine that will be in use during conversion.
            Currently new engine is in B-testing stage, so this value by default set to 
            ConversionEngines.LegacyEngine
            </summary>
    </member>
    <member name="P:Aspose.Pdf.SvgLoadOptions.PageInfo">
      <summary>
            Gets or sets page info that should be applied during loading of document.
            NOTE that this parameter only works when ConversionEngine == ConversionEngines.NewEngine
            </summary>
    </member>
    <member name="P:Aspose.Pdf.SvgLoadOptions.AdjustPageSize">
      <summary>
            Adust pdf page size to svg size
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Collection">
      <summary>
            Represents class for Collection(12.3.5 Collections).
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Collection.#ctor">
      <summary>
            Initializes new Collection object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Collection.DefaultEntry">
      <summary>
            Default embedded file name.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.XmlLoadOptions">
      <summary>
            Represents options for loading/importing XML file into pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.XmlLoadOptions.XslStream">
      <summary>
            Gets xsl data for converting xml into pdf document.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XmlLoadOptions.#ctor">
      <summary>
            Creates <see cref="T:Aspose.Pdf.XmlLoadOptions" /> object without xsl data.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XmlLoadOptions.#ctor(System.String)">
      <summary>
            Creates <see cref="T:Aspose.Pdf.XmlLoadOptions" /> object with xsl data.
            </summary>
      <param name="xslFile">
            Xsl file to convert xml document into pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.XmlLoadOptions.#ctor(System.IO.Stream)">
      <summary>
            Creates <see cref="T:Aspose.Pdf.XmlLoadOptions" /> object with xsl data.
            </summary>
      <param name="xslStream">
            Xsl stream to convert xml document into pdf document.
            </param>
    </member>
    <member name="T:Aspose.Pdf.XmlSaveOptions">
      <summary>
            Save options for export to Xml format
            </summary>
    </member>
    <member name="T:Aspose.Pdf.XpsSaveOptions">
      <summary>
            Save options for export to Xps format
            </summary>
    </member>
    <member name="T:Aspose.Pdf.XslFoLoadOptions">
      <summary>
            Represents options for loading/importing XSL-FO file into pdf document.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.XslFoLoadOptions.ParsingErrorsHandlingTypes">
      <summary>
             Source XSLFO document can contain formatting errors. This enum enumerates possible strategies of handling of such formatting errors
            </summary>
    </member>
    <member name="F:Aspose.Pdf.XslFoLoadOptions.ParsingErrorsHandlingTypes.TryIgnore">
      <summary>
             In this case converter will be instructed to try proceed
             with conversion and ignore found formatting errors.
             In this case success not guaranteed,
             serious problems can occure later in converter,
             anf in suck case will be thrown exception with list of found
             formatting errors.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.XslFoLoadOptions.ParsingErrorsHandlingTypes.ThrowExceptionImmediately">
      <summary>
             In this case conversion will be stopped immediately
             and exception will be thrown immediately after detecting
             of first formatting error
            </summary>
    </member>
    <member name="F:Aspose.Pdf.XslFoLoadOptions.ParsingErrorsHandlingTypes.InvokeCustomHandler">
      <summary>
             This is the most agile method - custom code must supply (in WarningCallback property) special
             handler that will  be called when formatting error detected. 
             That handler can f.e. log or count errors etc and
             will supply decision whether processing can be continued for this or that error. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.XslFoLoadOptions.ParsingErrorsHandlingType">
      <summary>
             Source XSLFO document can contain formatting errors. This enum enumerates possible strategies of handking of that errors
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XslFoLoadOptions.#ctor">
      <summary>
            Creates <see cref="T:Aspose.Pdf.XslFoLoadOptions" /> object without xsl data.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XslFoLoadOptions.#ctor(System.String)">
      <summary>
            Creates <see cref="T:Aspose.Pdf.XslFoLoadOptions" /> object with xsl data.
            </summary>
      <param name="xslFile">
            Xsl file to convert XSL-FO document into pdf document.
            </param>
    </member>
    <member name="M:Aspose.Pdf.XslFoLoadOptions.#ctor(System.IO.Stream)">
      <summary>
            Creates <see cref="T:Aspose.Pdf.XslFoLoadOptions" /> object with xsl data.
            </summary>
      <param name="xslStream">
            Xsl stream to convert XSL-FO document into pdf document.
            </param>
    </member>
    <member name="P:Aspose.Pdf.XslFoLoadOptions.BasePath">
      <summary>
            The base path/url from which are searched relative pathes to external resources (if any) referenced in loaded SVG file.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.LaTeXSaveOptions">
      <summary>
            Save options for export to TeX format
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LaTeXSaveOptions.OutDirectoryPath">
      <summary>
            Property for <see cref="F:Aspose.Pdf.LaTeXSaveOptions._outDirectoryPath" /> parameter.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.IResourceLoadingCallback">
      <summary>
            Resource loading callback.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.IResourceLoadingCallback.ResourceLoading(System.Object,Aspose.Pdf.ResourceLoadingEventArgs)">
      <summary>
            Resource loading
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Aspose.Pdf.ResourceLoadingResult">
      <summary>
            Represents resource loading result object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.ResourceLoadingResult.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.ResourceLoadingResult" /> class.
            </summary>
      <param name="data">The resource data.</param>
    </member>
    <member name="M:Aspose.Pdf.ResourceLoadingResult.#ctor(System.Byte[],System.Text.Encoding)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.ResourceLoadingResult" /> class.
            </summary>
      <param name="data">The resource data.</param>
      <param name="encoding">The encoding.</param>
    </member>
    <member name="P:Aspose.Pdf.ResourceLoadingResult.Data">
      <summary>
            Gets the resource data.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ResourceLoadingResult.Encoding">
      <summary>
            Gets the encoding.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ResourceLoadingEventArgs">
      <summary>
            Represents resource loading event arguments.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ResourceLoadingEventArgs.Uri">
      <summary>
            Gets the URI.
            </summary>
      <value>
            The URI.
            </value>
    </member>
    <member name="M:Aspose.Pdf.ResourceLoadingEventArgs.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.ResourceLoadingEventArgs" /> class.
            </summary>
      <param name="uri">The URI path.</param>
    </member>
    <member name="T:Aspose.Pdf.LatexLoadOptions">
      <summary>
            Represents options for loading/importing TeX file into PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LatexLoadOptions.TextFontName">
      <summary>
            Sets/Gets name of the font used for rendering math formulas.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LatexLoadOptions.ResourceLoadingCallback">
      <summary>
            Resource loading callback.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LatexLoadOptions.WarningCallback">
      <summary>
            Sets/Gets callback object for info/errors notification.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LatexLoadOptions.MathFontName">
      <summary>
            Sets/Gets name of the font used for rendering math formulas.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.LatexLoadOptions.SpecSymbolsFontName">
      <summary>
            Sets/Gets name of the font used for rendering special symbols, e.g. \sigma, \textbraceright, \vdots, etc.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ColorSpace">
      <summary>
            The color spaces enumeration.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColorSpace.DeviceRGB">
      <summary>
            The device-dependent RGB color space.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColorSpace.DeviceCMYK">
      <summary>
            The device-dependent CMYK color space.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColorSpace.DeviceGray">
      <summary>
            The device-dependent gray color space.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Group">
      <summary>
            A group attributes class specifying the attributes of the page’s page group for use in the transparent imaging model.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Group.#ctor(Aspose.Pdf.Page)">
      <summary>
            The constructor.
            </summary>
      <param name="page">Pdf page object.</param>
    </member>
    <member name="P:Aspose.Pdf.Group.ColorSpace">
      <summary>
            The group color space.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.TabOrder">
      <summary>
            Tab order on the page 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TabOrder.None">
      <summary>
            No tab order.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TabOrder.Row">
      <summary>
            Row order.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TabOrder.Column">
      <summary>
            Column order.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TabOrder.Default">
      <summary>
            Default tab order.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TabOrder.Manual">
      <summary>
            Manual tab order. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.XpsLoadOptions">
      <summary>
            Represents options for loading/importing xps file into pdf document.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Table">
      <summary>
            Represents a table that can be added to the page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Table.GetWidth">
      <summary>
            Get width.
            </summary>
      <returns>The table width</returns>
    </member>
    <member name="M:Aspose.Pdf.Table.GetHeight">
      <summary>
            Get height.
            </summary>
      <returns>The table height</returns>
    </member>
    <member name="M:Aspose.Pdf.Table.SetColumnTextState(System.Int32,Aspose.Pdf.Text.TextState)">
      <summary>
            Set height.
            </summary>
      <param name="colNumber">The column number.</param>
      <param name="textState">The text state for column.</param>
    </member>
    <member name="M:Aspose.Pdf.Table.ImportArray(System.Object[],System.Int32,System.Int32,System.Boolean)">
      <summary>
              Imports one-dimensional array of data into table. Import goes one cell per each array's item and
              starts from row and column defined in parameters. During import, if detected that necessary rows
              are still absent(i.e. target table is too small to absorb all data), necessary rows will be created
            </summary>
      <param name="importedArray">imported data, nulls will be imported as empty strings</param>
      <param name="firstFilledRow">define number of first target row in target table from wich import will start.
              If amount of rows in target table less then required, missing rows will be created first. 
            </param>
      <param name="firstFilledColumn">specifies number of first target column in target table , column must be present in target table before start of import </param>
      <param name="isLeftColumnsFilled">If 'isLeftColumnsFilled'=false, then in second and all subsequent filled rows cells that are on the left hand from
            firstFilledColumn will be skipped</param>
    </member>
    <member name="M:Aspose.Pdf.Table.ImportDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Int32)">
      <summary>
              Imports data from System.Data.DataTable into Aspose.Pdf.Table
            </summary>
      <param name="importedDataTable"> source instance of System.Data.DataTable  </param>
      <param name="isColumnNamesImported"> specifies whether column names will be imported as first row</param>
      <param name="firstFilledRow"> specifies zero based number of first row in target table from which import will start, if row with such  number(and some previous rows) are absent in target table, they will be created first</param>
      <param name="firstFilledColumn">specifies number of first target column in target table , column must be present in target table before start of import </param>
    </member>
    <member name="M:Aspose.Pdf.Table.ImportDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Byte,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Imports a <see cref="T:System.Data.DataTable" /> object into the table.
            </summary>
      <param name="importedDataTable">The <see cref="T:System.Data.DataTable" /> object to be imported.</param>
      <param name="isColumnNamesShown">Specifies whether the column names of the source datatable will be 
            imported as first row.</param>
      <param name="firstFilledRow"> specifies zero based number of first row in target table from which import will start, if row with such  number(and some previous rows) are absent in target table, they will be created first</param>
      <param name="firstFilledColumn">specifies number of first target column in target table , column must be present in target table before start of import </param>
      <param name="maxRows">Maximum amount of rows to be imported from source table.</param>
      <param name="maxColumns">Maximum amount of columns to be imported from source table.</param>
      <param name="isHtmlSupported">Specifies whether the text is html string.</param>
    </member>
    <member name="M:Aspose.Pdf.Table.ImportDataTable(System.Data.DataTable,System.Int32[],System.Int32[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Imports a <see cref="T:System.Data.DataTable" /> object, but not as whole entity. Only specified rows and columns are imported.
            </summary>
      <param name="importedDataTable">The <see cref="T:System.Data.DataTable" /> object to be imported.</param>
      <param name="sourceRowList">The array of numbers of rows in source <see cref="T:System.Data.DataTable" /> object that must be imported. List must be not null and must contain only numbers of existing rows, otherwise exception will be thrown.</param>
      <param name="sourceColumnList">The array of numbers of columns in source <see cref="T:System.Data.DataTable" /> object that must be imported. List must be not null and must contain only numbers of existing columns, otherwise exception will be thrown.</param>
      <param name="firstFilledRow">The zero based row number of the first cell in targer table from which import will start.
            If target table does not contain that row, it (and all previous if necessary) will be created</param>
      <param name="firstFilledColumn">The zero based column number of the first cell in targer table from which import will start. The target table must contain that column befor import starts, otherwise exception will be thrown.</param>
      <param name="showColumnNamesAsFirstRow">Specifies whether the column names of source datatable will be imported as first row.</param>
      <param name="isHtmlSupported">Specifies whether the text is html string.</param>
    </member>
    <member name="M:Aspose.Pdf.Table.ImportDataView(System.Data.DataView,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Imports a <see cref="T:System.Data.DataView" /> object's data into the table.
            </summary>
      <param name="sourceDataView">The <see cref="T:System.Data.DataView" /> object to be imported.</param>
      <param name="isColumnNamesImported">Indicates whether the column names will be 
            imported as first row.</param>
      <param name="firstFilledRow">The zero based row number of the first cell in targer table from which import will start.
            If target table does not contain that row, it (and all previous if necessary) will be created</param>
      <param name="firstFilledColumn">The zero based column number of the first cell in targer table from which import will start. 
             The target table must contain that column before import starts, otherwise exception will be thrown.
            </param>
      <param name="maxRows">Maximum amount of rows to be imported from source dataview.</param>
      <param name="maxColumns">Maximum columns to be imported from source dataview.</param>
    </member>
    <member name="M:Aspose.Pdf.Table.Clone">
      <summary>
            Clone the table.
            </summary>
      <returns>The cloned object</returns>
    </member>
    <member name="P:Aspose.Pdf.Table.BackgroundColor">
      <summary>
            Gets or sets table background color
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.BreakText">
      <summary>
            Gets or sets break text for table
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.CornerStyle">
      <summary>
            Gets or sets the styles of the border corners
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.RepeatingRowsStyle">
      <summary>
            Gets the style for repeating rows
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.RepeatingColumnsCount">
      <summary>
            Gets or sets the maximum columns count for table
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.RepeatingRowsCount">
      <summary>
            Gets the first rows count repeated for several pages
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.ColumnWidths">
      <summary>
            Gets the column widths of the table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.Broken">
      <summary>
            Gets or sets table vertial broken;
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.DefaultCellBorder">
      <summary>
            Gets default cell border;
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.DefaultColumnWidth">
      <summary>
            Gets default cell border;
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.Rows">
      <summary>
            Gets the rows of the table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.Border">
      <summary>
            Gets or sets the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.DefaultCellPadding">
      <summary>
            Gets or sets the default cell padding.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.DefaultCellTextState">
      <summary>
            Gets or sets the default cell text state.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.Alignment">
      <summary>
            Gets or sets the table alignment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.Left">
      <summary>
            Gets or sets the table left coordinate.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.Top">
      <summary>
            Gets or sets the table top coordinate.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.IsBroken">
      <summary>
            Gets or sets the table is broken - will be truncated for next page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.IsBordersIncluded">
      <summary>
            Gets or sets border included in column widhts.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.ColumnAdjustment">
      <summary>
            Gets or sets the table column adjustment.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Watermark">
      <summary>
            Represents a watermark of the page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Watermark.#ctor(System.Drawing.Image,Aspose.Pdf.Rectangle)">
      <summary>
            Initializes a watermark object with an image and it's position on a page.
            </summary>
      <param name="image">Image of the watermark. </param>
      <param name="rect">Position of the watermark on the page.</param>
    </member>
    <member name="M:Aspose.Pdf.Watermark.#ctor(System.Drawing.Image)">
      <summary>
            Initializes a watermark object with an image.
            </summary>
      <param name="image">Image of the watermark.</param>
    </member>
    <member name="P:Aspose.Pdf.Watermark.Image">
      <summary>
            Gets an image of the watermark.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Watermark.Position">
      <summary>
            Gets a position of the watermark's image on a page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Watermark.Available">
      <summary>
            Gets a flag the watermark is present.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Artifact">
      <summary>
            Class represetns PDF Artifact object.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Artifact.ArtifactType">
      <summary>
            Enumeration of possuble artifact types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Artifact.ArtifactType.Pagination">
      <summary>
            Pagination artifacts. Ancillary page features such as running heads and folios (page numbers).
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Artifact.ArtifactType.Layout">
      <summary>
            Layout artifacts. Purely cosmetic typographical or design elements such as footnote rules or background screens.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Artifact.ArtifactType.Page">
      <summary>
            Page artifacts. Production aids extraneous to the document itself, such as cut marks and colour bars.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Artifact.ArtifactType.Background">
      <summary>
            Background artifacts. Images, patterns or coloured blocks.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Artifact.ArtifactType.Undefined">
      <summary>
            Artifact type is not defined or unknown.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Artifact.ArtifactSubtype">
      <summary>
            Enumeration of possible artifacts subtype.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Artifact.ArtifactSubtype.Header">
      <summary>
            Header artifact.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Artifact.ArtifactSubtype.Footer">
      <summary>
            Footer artifact.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Artifact.ArtifactSubtype.Watermark">
      <summary>
            Watermark artifact.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Artifact.ArtifactSubtype.Background">
      <summary>
            Background artifact.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.Artifact.ArtifactSubtype.Undefined">
      <summary>
            Artifact subtype is not defined or unknown.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Artifact.#ctor(System.String,System.String)">
      <summary>
            Constructor of artifact with specified type and subtype
            </summary>
      <param name="type">Name of artifact type.</param>
      <param name="subType">NAme of artifact subtype.</param>
    </member>
    <member name="M:Aspose.Pdf.Artifact.#ctor(Aspose.Pdf.Artifact.ArtifactType,Aspose.Pdf.Artifact.ArtifactSubtype)">
      <summary>
            Constructor of artifact with specified type and subtype
            </summary>
      <param name="type">Artifact type.</param>
      <param name="subType">Artifact subtype.</param>
    </member>
    <member name="P:Aspose.Pdf.Artifact.CustomType">
      <summary>
            Gets name of artifact type. May be used if artifact type is non standard.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.CustomSubtype">
      <summary>
            Gets name of artifact subtype. May be used  if artifact subtype is not standard subtype.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Type">
      <summary>
            Gets artifact type. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Subtype">
      <summary>
            Gets artifact subtype. If artifact has non-standard subtype, name of the subtype may be read via CustomSubtype.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Contents">
      <summary>
            Gets collection of artifact internal operators.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Form">
      <summary>
            Gets XForm of the artifact (if XForm is used).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Rectangle">
      <summary>
            Gets rectangle of the artifact.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Position">
      <summary>
            Gets or sets artifact position.
            If this property is specified, then margins and alignments are ignored.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.RightMargin">
      <summary>
            Right margin of artifact. 
            If position is specified explicitly (in Position property) this value is ignored.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.LeftMargin">
      <summary>
            Left margin of artifact. 
            If position is specified explicitly (in Position property) this value is ignored.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.TopMargin">
      <summary>
            Top margin of artifact. 
            If position is specified explicitly (in Position property) this value is ignored.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.BottomMargin">
      <summary>
            Bottom margin of artifact. 
            If position is specified explicitly (in Position property) this value is ignored.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.ArtifactHorizontalAlignment">
      <summary>
            Horizontal alignment of artifact. 
            If position is specified explicitly (in Position property) this value is ignored.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.ArtifactVerticalAlignment">
      <summary>
            Vertical alignment of artifact. 
            If position is specified explicitly (in Position property) this value is ignored.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Rotation">
      <summary>
            Gets or sets articat rotatin angle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Text">
      <summary>
            Gets text of the artifact.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Image">
      <summary>
            Gets image of the artifact (if presents).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.Opacity">
      <summary>
            Gets or sets opacity of the artifact. Possible values are in range 0..1.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Artifact.SetText(Aspose.Pdf.Facades.FormattedText)">
      <summary>
            Sets text of the artifact. 
            </summary>
      <param name="formattedText">FormattedText object which contains artifact text.</param>
    </member>
    <member name="M:Aspose.Pdf.Artifact.SetTextAndState(System.String,Aspose.Pdf.Text.TextState)">
      <summary>
            Set text and text properties of the artifact. 
            </summary>
      <param name="Text">Text string.</param>
      <param name="textState">Text properties (color, </param>
    </member>
    <member name="M:Aspose.Pdf.Artifact.SetLinesAndState(System.String[],Aspose.Pdf.Text.TextState)">
      <summary>
            Set text and text properties of the artifact. Allows to specify multiple lines.
            </summary>
      <param name="text">Array of text string.</param>
      <param name="textState">Text properties.</param>
    </member>
    <member name="M:Aspose.Pdf.Artifact.SetImage(System.IO.Stream)">
      <summary>
            Sets image of the artifact. 
            </summary>
      <param name="imageStream">Stream which contains image data.</param>
    </member>
    <member name="M:Aspose.Pdf.Artifact.SetImage(System.String)">
      <summary>
            Sets image of the artifact. 
            </summary>
      <param name="imageName">Name of image file.</param>
    </member>
    <member name="M:Aspose.Pdf.Artifact.SetPdfPage(Aspose.Pdf.Page)">
      <summary>
            Sets PDF page which is placed on the document page as artifact. 
            </summary>
      <param name="page">Page which is placed as Artifcact. </param>
    </member>
    <member name="M:Aspose.Pdf.Artifact.Dispose">
      <summary>
            Dispose the artifact.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Artifact.GetValue(System.String)">
      <summary>
            Gets custom value of artifact. 
            </summary>
      <param name="name">Name of value.</param>
      <returns>Value, or null if value does not exists.</returns>
    </member>
    <member name="M:Aspose.Pdf.Artifact.SetValue(System.String,System.String)">
      <summary>
            Sets custom value of artifact.
            </summary>
      <param name="name">Name of custom value.</param>
      <param name="value">Custom value in the artifact.</param>
    </member>
    <member name="M:Aspose.Pdf.Artifact.RemoveValue(System.String)">
      <summary>
            Remove custom value from the artifact.
            </summary>
      <param name="name">Name of custom value to be removed.</param>
    </member>
    <member name="M:Aspose.Pdf.Artifact.BeginUpdates">
      <summary>
            Start delated updates. Use this feature if you need make several changes to the same artifact to improve performance. 
            Usually artifact operators are changed anytime when artifact property was changed. This causes changing of page contents
            everytime when artifact was changed. To avoid this effect put all artifact updates between StartUpdates/SaveUpdates calls.
            This allows to change page contents only once.
            </summary>
      <example>
        <code lang="C#">
            Artifact art = doc.Pages[1].Artifacts[1];
            art.BeginUpdates();
            art.Opacity = 0.3f;
            art.Position = new Point(10,10);
            art.Rotation = 30;
            art.SaveUpdates();
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Artifact.SaveUpdates">
      <summary>
            Saves all updates in artifact which were made after BeginUpdates() call.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Artifact.IsBackground">
      <summary>
            If true Artifact is placed behind page contents. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ArtifactCollection">
      <summary>
            Class represents artifact collection. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ArtifactCollection.IsSynchronized">
      <summary>
            Is this object synchronized.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ArtifactCollection.Count">
      <summary>
            Gets count of artifacts in collection.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ArtifactCollection.SyncRoot">
      <summary>
            Gets synchronization object of the collection.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.ArtifactCollection.CopyTo(Aspose.Pdf.Artifact[],System.Int32)">
      <summary>
            Copies colection into an array.
            </summary>
      <param name="dest">Destination array.</param>
      <param name="index">Starting index.</param>
    </member>
    <member name="M:Aspose.Pdf.ArtifactCollection.GetEnumerator">
      <summary>
            Gets enumerator for the collection. 
            </summary>
      <returns>Enumerator object.</returns>
    </member>
    <member name="P:Aspose.Pdf.ArtifactCollection.Item(System.Int32)">
      <summary>
            Gets artifact by index. Index is started from 1.
            </summary>
      <param name="index">Index of the artifact.</param>
      <returns>Artifact on the page.</returns>
    </member>
    <member name="M:Aspose.Pdf.ArtifactCollection.Add(Aspose.Pdf.Artifact)">
      <summary>
            Adds artifacts to the collection.
            </summary>
      <param name="artifact">Artifact which sould be added to collection.</param>
    </member>
    <member name="M:Aspose.Pdf.ArtifactCollection.FindByValue(System.String,System.String)">
      <summary>
            Finds artifacts by custom value.
            </summary>
      <param name="name">Name of custom value.</param>
      <param name="expectedValue">Value to find.</param>
      <returns>List of found artifacts.</returns>
    </member>
    <member name="P:Aspose.Pdf.ArtifactCollection.IsReadOnly">
      <summary>
            Gets if collection is readonly. Always returns false.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.ArtifactCollection.Delete(Aspose.Pdf.Artifact)">
      <summary>
            Deletes specified artifact.
            </summary>
      <param name="artifact">Artifact which will be deleted.</param>
    </member>
    <member name="M:Aspose.Pdf.ArtifactCollection.Update(Aspose.Pdf.Artifact)">
      <summary>
            Update artifact inside the collection. 
            </summary>
      <param name="artifact">Artifact to be updated.</param>
    </member>
    <member name="M:Aspose.Pdf.ArtifactCollection.Delete(System.Int32)">
      <summary>
            Deletes artifact by its index. 
            </summary>
      <param name="index">Index of artifact to delete.</param>
    </member>
    <member name="T:Aspose.Pdf.BackgroundArtifact">
      <summary>
            Class descibes background artifact. This artifact allows to set background of the page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.BackgroundArtifact.#ctor">
      <summary>
            Initializes BackgroundArtifact object. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BackgroundArtifact.BackgroundColor">
      <summary>
            Gets or sets bacground color of background artifact
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BackgroundArtifact.BackgroundImage">
      <summary>
            Gets or sets bacground image of background artifact
            </summary>
    </member>
    <member name="T:Aspose.Pdf.FooterArtifact">
      <summary>
            Describes footer artifact. This may be used to set footer of the page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.FooterArtifact.#ctor">
      <summary>
            Creates Footer Artifact instance.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HeaderArtifact">
      <summary>
            Class describes Heaader artifact. This artifacgt may be used to set heading of the page.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.HeaderArtifact.#ctor">
      <summary>
            Creates Header Artifact instance. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.WatermarkArtifact">
      <summary>
            Class describes watermark artifact. This may be used to 
            </summary>
    </member>
    <member name="M:Aspose.Pdf.WatermarkArtifact.#ctor">
      <summary>
            Creates instance of Watermark artifact.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.EpubLoadOptions">
      <summary>
            Contains options for loading/importing EPUB file into pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.EpubLoadOptions.PageSize">
      <summary>
            Gets or sets output page size for import.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.EpubLoadOptions.MarginsAreaUsageMode">
      <summary>
             Represents mode of usage of margins area - defines treatement 
              of instructions (if any) of CSS of imported document
              related to usage of margins.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.EpubLoadOptions.PageSizeAdjustmentMode">
      <summary>
              ATTENTION! The feature implemented but did not put yet to public API since blocker issue in 
              OSHARED layer revealed for sample document.
              
             
              Represents mode of usage of page size during conversion.
             Formats (like HTML, EPUB etc), usually have float design, so, it allows to fit required
             pagesize. But sometimes content has specified horizontal positions or size that 
             does not allow put content into required page size.
               In such case we can define what should be done in this case (i.e when size of content does not fit 
             required initial page size of result PDF document).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.EpubLoadOptions.Margin">
      <summary>
            Gets reference on object that represent marging info.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.EpubLoadOptions.#ctor">
      <summary>
            Creates default load options for converting EPUB file into pdf document. 
            Default pdf page size - A4 300dpi 2480 X 3508.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.EpubLoadOptions.#ctor(System.Drawing.SizeF)">
      <summary>
            Creates load options with specified page size.
            </summary>
      <param name="pageSize">
            Defines pdf page width and height.
            </param>
    </member>
    <member name="T:Aspose.Pdf.SvgSaveOptions">
      <summary>
            Save options for export to SVG format
            </summary>
    </member>
    <member name="T:Aspose.Pdf.SvgSaveOptions.EmbeddedImagesSavingStrategy">
      <summary>
               To property of such type You can  assign delegate created from custom method that implements processing 
               of external saving of image  that was extracted from SVG created from PDF and must be saved as external resource during conversion of PDF to HTML.
                In such case  processing (like self-made saving into stream or on disk)
              can be done in that custom code and that custom code must return path(or any another string without quotemarks)
                that will be afterwards incorporated into generated SVG instead of original supposed path to that image resource. 
             In such case all the necessary actions for saving of image must be undertaken
             in code of supplied method, because saving of result in code of converter will be not in use. 
               If processing for this or that file for some reason must be done by converter's code itself, not in custom code,
               please set in custom code flag 'CustomProcessingCancelled' of 'imageSavingInfo' parameter's variable
                 It signals to converter that all the necessary steps for processing of that resource 
                 must be done in converter itself as if there was no any external custom code .
                 <param name="imageSavingInfo">represents information about saved image that can be use in custom code </param><returns>must return string that represents URL of image that will be put into SVG</returns></summary>
    </member>
    <member name="F:Aspose.Pdf.SvgSaveOptions.CustomStrategyOfEmbeddedImagesSaving">
      <summary>
              This field can contain saving strategy
              that must be used (if present) during conversion 
              for customized handling of created referenced external images
              files (like embedded BMP or JPEG) embedded into saved SVG.
              That strategy must process resources 
              and return string that represents desirable URI of saved resource
              in generated SVG.
                 If processing for this or that file for some reason must be done by converter's code itself, not in custom code,
              please set in custom code flag 'CustomProcessingCancelled' of 'imageSavingInfo' parameter's variable
              It signals to converter that all the necessary steps for processing of that resource 
              must be done in converter itself as if there was no any external custom code .
            </summary>
    </member>
    <member name="T:Aspose.Pdf.SvgSaveOptions.SvgExternalImageType">
      <summary>
             enumerates possible types of image files
             that can be saved as external resources during
             during Pdf to SVG conversion
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SvgSaveOptions.SvgExternalImageType.Jpeg">
      <summary>
            Jpeg format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SvgSaveOptions.SvgExternalImageType.Png">
      <summary>
            Png format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SvgSaveOptions.SvgExternalImageType.Bmp">
      <summary>
            Bmp format 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SvgSaveOptions.SvgExternalImageType.Gif">
      <summary>
            Gif format 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SvgSaveOptions.SvgExternalImageType.Tiff">
      <summary>
             Tiff format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SvgSaveOptions.SvgExternalImageType.Unknown">
      <summary>
            Unknown - means that converter cannot detect type of content itself
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SvgSaveOptions.TreatTargetFileNameAsDirectory">
      <summary>
             This options defines whether will be created target directory
             (if absent yet) with same name as requested output file 
             instead of requested output file itself.
             It so, that directory will contain all output SVG-images of pages (like described below).
               If no, output files of pages other then first one will be created exactly in requested directory
            as main output file, but will contain in file name suffix _[2...n], that
             is defined by page number, f.e. if You define output file "C:\AsposeTests\output.svg"
             and output will contain several svg-files of pages,
             then files of pages will be created also in directory "C:\AsposeTests\" and have names 'output.svg', 'output_2.svg', 'output_3.svg' etc.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SvgSaveOptions.CompressOutputToZipArchive">
      <summary>
             Specifies whether output will be created as one zip-archive.
             Please refer comment to 'TreatTargetFileNameAsDirectory' options to see rules of naming
             of svg-files of pages for multipage source document, that are also applied to zipped set of output files.
             </summary>
    </member>
    <member name="T:Aspose.Pdf.SvgSaveOptions.SvgImageSavingInfo">
      <summary>
              This class represents set of data 
              that related to external resource image file's saving
              during PDF to HTML conversion.  
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SvgSaveOptions.SvgImageSavingInfo.ImageType">
      <summary>
             represent type os saved image referenced in HTML.
             Set by converter and can be used in custom code 
             to decide what should be done
            </summary>
    </member>
    <member name="T:Aspose.Pdf.EpubSaveOptions">
      <summary>
            Save options for export to EPUB format
            </summary>
    </member>
    <member name="T:Aspose.Pdf.EpubSaveOptions.RecognitionMode">
      <summary>
              When PDF file (that usually has fixed layout) is being converted,
            the conversion engine tries to perform grouping and multi-level analysis to restore
            the original document author's intent and produce result in flow layout.
               This property tunes that conversion for this or that
            desirable method of recognition of content.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.EpubSaveOptions.RecognitionMode.Flow">
      <summary>
            Full recognition mode, the engine tries to perform grouping and multi-level analysis to restore
            the original document author's intent and produce xhtml in flow layout.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.EpubSaveOptions.RecognitionMode.PdfFlow">
      <summary>
            The main idea of this conversion is based on saving "natural" order of content rendering that is formed during processing of pdf documents.
            In the general cases pdf documents keep top-down\left-right rendering order (see attachment directions.png). This assumption allows to
            create a single-path algorithm that will transform Aps elements that have positions (fixed-layout) into flow formats like HTML,EPUB,DOC.
            This mode will be especially useful for converting from PDF(APS) into EPUB, because the EPUB format was developed for e-readers like the Kindle or
            smart-phones. The size of screen those devices usually is less than the size of screen of ordinary PC. Therefore the content of EPUB documents is better to save
            in the flow format, for correct rendering on screens with different sizes.
            In this mode every column will be added to the end of previous column this allows to keep the logical structure of transformed document
            during "pagination" in EPUB readers. This achievement allows correctly render scientific or magazine articles.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.EpubSaveOptions.RecognitionMode.Fixed">
      <summary>
            This mode is fast and good for maximally preserving the original look pages,
            but unfortunately many EPUB readeres don't support xhtml with fixed layout
            </summary>
    </member>
    <member name="F:Aspose.Pdf.EpubSaveOptions.ContentRecognitionMode">
      <summary>
              When PDF file (that usually has fixed layout) is being converted,
            the conversion engine tries to perform grouping and multi-level analysis to restore
            the original document author's intent and produce result in flow layout.
               This property tunes that conversion for this or that
            desirable method of recognition of content.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PptxSaveOptions">
      <summary>
            Save options for export to SVG format
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PptxSaveOptions.SlidesAsImages">
      <summary>
            If set to true then all the content is recognized as images (one per page)
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PptxSaveOptions.SeparateImages">
      <summary>
            If set to true then images are separated from all other graphics
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Dom.Svg.Util.GeometryUtils.GetArcAngle(System.Drawing.PointF,System.Drawing.PointF,System.Boolean,System.Boolean,System.Single@,System.Single@,System.Int32@)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Common.sfntly.typography.font.sfntly.data.ByteArray" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Common.sfntly.typography.font.sfntly.data.FontInputStream" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Common.sfntly.typography.font.sfntly.data.FontOutputStream" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Common.sfntly.typography.font.sfntly.data.ReadableFontData" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Common.sfntly.typography.font.sfntly.data.ReadableFontData.ComputeCheckSum(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Common.sfntly.typography.font.sfntly.Font.getTable(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Common.sfntly.typography.font.sfntly.table.core.CMap" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Common.sfntly.typography.font.sfntly.table.SubTable.Builder" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Common.sfntly.typography.font.sfntly.table.TableBasedTableBuilder" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.apps.FOUserAgent" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.area.BookmarkData.#ctor" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.area.BookmarkData.#ctor(System.String,System.Boolean,Aspose.Html.Rendering.layoutmgr.PageViewport,System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.area.IResolvable" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.complexscripts.fonts.GlyphTable.matchLookupSpecs(System.String,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.complexscripts.fonts.GlyphTable.matchLookups(System.String,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.complexscripts.fonts.GlyphTable.LookupSpec" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.complexscripts.util.GlyphSequence.CharAssociation.SetPredication(System.String,System.Object)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.complexscripts.util.GlyphSequence.CharAssociation.MergePredication(System.String,System.Object)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.datatypes.INumeric" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.datatypes.URISpecification" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.datatypes.ValidationPercentBaseContext" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.events.IEventProducer" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.fonts.FontInfo" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fonts.FontInfo.FontLookup(System.String,System.String,System.Int32,System.Int32,System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fonts.FontInfo.FontLookup(System.String,System.String,System.Int32,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fonts.FontInfo.FontLookup(System.String[],System.String,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fonts.IFontMetrics.GetWidths" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.fonts.FontSelector" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.fo.extensions.IExtensionAttachment" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.AbstractPageNumberCitation.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.AbstractRetrieveMarker.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.Block.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.BlockContainer.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.fo.flow.Button" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.Character.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.fo.flow.Checkbox" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.fo.flow.Combobox" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.fo.flow.DateBox" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.fo.flow.EditBox" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.ExternalGraphic.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.Float.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.Footnote.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.FootnoteBody.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.InitialPropertySet.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.Inline.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.InlineContainer.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.InstreamForeignObject.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.Leader.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.fo.flow.ListItem" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.fo.flow.ListItemLabel" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.fo.flow.Marker" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.Marker.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.MultiProperties.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.MultiPropertySet.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.MultiSwitch.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.fo.flow.MultiToggle" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.MultiToggle.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.fo.flow.Option" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.PageNumber.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.fo.flow.RadioButton" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.table.EffRow.GetBreakBefore" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.table.EffRow.GetBreakAfter" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.table.Table.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.table.TableAndCaption.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.table.TableCaption.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.table.TableCell.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.table.TableColumn.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.table.TablePart.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.table.TableRow.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.fo.flow.Wrapper" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.flow.Wrapper.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.FObj.IsBlockItem(System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.FObj.IsInlineItem(System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.FObj.IsNeutralItem(System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "F:Aspose.Html.Rendering.fo.FONode.locator" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.FONode.GetFOEventHandler" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.bookmarks.Bookmark.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.bookmarks.Bookmark.GetChildBookmarks" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.bookmarks.BookmarkTitle.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.bookmarks.BookmarkTree.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.bookmarks.BookmarkTree.GetBookmarks" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.ColorProfile.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.ConditionalPageMasterReference.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.Declarations.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.Flow.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.LayoutMasterSet.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.PageSequenceMaster.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.PageSequenceWrapper.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.Region.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.RegionBody.GetColumnCount" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.RepeatablePageMasterAlternatives.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.RepeatablePageMasterReference.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.Root.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.SimplePageMaster.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.SinglePageMasterReference.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.StaticContent.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.pagination.Title.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.Properties.FOPropertyMapping.AddPropertyMaker(System.String,Aspose.Html.Rendering.fo.Properties.PropertyMakers.PropertyMaker)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.Properties.FOPropertyMapping.AddSubpropMakerName(System.String,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.Properties.Impl.NumericProperty.#ctor(System.Double,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.Properties.Impl.RelativeNumericProperty.getTableUnits" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.fo.Properties.PropertyCache" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.fo.XMLObj.ValidateChildNode(Aspose.Html.Rendering.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.fo.XMLWhiteSpaceHandler" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.hyphenation.Hyphenation" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.layoutmgr.BreakingAlgorithm" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.layoutmgr.PageProvider.GetStartingPartIndexForLastPage(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.layoutmgr.SpaceResolver.PerformConditionalsNotification(System.Collections.Generic.List{Aspose.Html.Rendering.IElement},System.Int32,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.render.aps.ApsRenderer" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.render.aps.ApsRenderer.BreakOutOfStateStack" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.render.intermediate.extensions.GoToXYAction.GetPageIndex" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.render.intermediate.extensions.GoToXYAction.GetTargetLocation" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.render.intermediate.IFContext" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.render.intermediate.IFDocumentHandler" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.render.intermediate.IFPainter" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.render.IRenderer" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.traits.MinOptMax.GetInstance(System.Int32,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.traits.MinOptMax.MinusMin(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.traits.MinOptMax.PlusMax(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Html.Rendering.util.ColorUtil" -->
    <!-- Badly formed XML comment ignored for member "F:Aspose.Html.Rendering.util.ColorUtil.colorMap" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.util.ColorUtil.ParseColorString(Aspose.Html.Rendering.apps.FOUserAgent,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.util.ColorUtil.ColorTostring(System.Drawing.Color)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.util.ListUtil.GetLast``1(System.Collections.Generic.List{``0})" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Html.Rendering.util.ListUtil.RemoveLast``1(System.Collections.Generic.List{``0})" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.XfaRenderer.Core.XfaTextRenderer.Allign(System.Collections.Generic.List{Aspose.XfaRenderer.Core.XfaTextRenderer.TextFragment},System.Single,System.Single,System.Single,Aspose.XfaRenderer.Core.TextContext)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.CGM.Utils.ColorUtils.Cmyk2Rgb(System.Int32,System.Int32,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "P:Aspose.Doc.DocumentModel.Paragraph.FirstLineLeftIndent" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Fixed2Float.Analysis.ApsDocumentAnalyzer.Clear" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Fixed2Float.MathUtil.BasicMath" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Fixed2Float.MathUtil.BasicMath.Max(System.Collections.Generic.List{System.Double})" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Fixed2Float.MathUtil.BasicMath.Min(System.Collections.Generic.List{System.Double})" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Fixed2Float.Grouping.TextLineGroupingUtil.MakeSubSuperScripts(Aspose.Fixed2Float.PageElementModel.TextLine)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Fixed2Float.Grouping.TextualElementSortUtil.SortHorizontally(System.Collections.Generic.List{Aspose.Fixed2Float.PageElementModel.PageElement})" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Fixed2Float.Grouping.TextualElementSortUtil.SortHorizontally(System.Collections.Generic.List{Aspose.Fixed2Float.PageElementModel.PageElement},System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Fixed2Float.Grouping.TextualElementSortUtil.SortVertically(System.Collections.Generic.List{Aspose.Fixed2Float.PageElementModel.PageElement})" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Foundation.sfntly.typography.font.sfntly.data.ByteArray" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Foundation.sfntly.typography.font.sfntly.data.FontInputStream" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Foundation.sfntly.typography.font.sfntly.data.FontOutputStream" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Foundation.sfntly.typography.font.sfntly.data.ReadableFontData" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Foundation.sfntly.typography.font.sfntly.data.ReadableFontData.ComputeCheckSum(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Foundation.sfntly.typography.font.sfntly.Font.getTable(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Foundation.sfntly.typography.font.sfntly.table.core.CMap" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Foundation.sfntly.typography.font.sfntly.table.SubTable.Builder" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Foundation.sfntly.typography.font.sfntly.table.TableBasedTableBuilder" -->
    <!-- Badly formed XML comment ignored for member "F:Aspose.Pcl.Color.PixelEncodingMode.INDEXED_BY_PLANE" -->
    <!-- Badly formed XML comment ignored for member "F:Aspose.Pcl.Command.Printer.Cursor.MacroCommand.macroId" -->
    <!-- Badly formed XML comment ignored for member "F:Aspose.Pcl.Command.Printer.Cursor.MacroCommand.controlId" -->
    <!-- Badly formed XML comment ignored for member "F:Aspose.Pcl.Composer.ApsPageComposer.currentPrintableSymbols" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Pcl.Composer.ApsPageComposer.SetCurrentPrintableSymbols(System.Byte[])" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Pcl.Composer.ApsPageComposer.GetCurrentPrintableSymbols" -->
    <!-- Badly formed XML comment ignored for member "F:Aspose.Pcl.Composer.Pcl6ApsPageComposer.currentPrintableSymbols" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Pcl.Composer.Pcl6ApsPageComposer.SetCurrentPrintableSymbols(System.Byte[])" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Pcl.Composer.Pcl6ApsPageComposer.GetCurrentPrintableSymbols" -->
    <!-- Badly formed XML comment ignored for member "F:Aspose.Pptx.OpenXmlDocumentWriter._imagesCount" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Graphics2d.TagHandler.Parse(Aspose.Ps2Pdf.Graphics2d.TagString)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.GraphicsIO.AbstractVectorGraphicsIO.#ctor(System.Drawing.Size,System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.GraphicsIO.AbstractVectorGraphicsIO.#ctor(System.Windows.Forms.Control,System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.GraphicsIO.Font.Encoding.Lookup.GetTable(System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Ps2Pdf.GraphicsIO.Font.FontEmbedder" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.GraphicsIO.Font.FontEmbedder.WriteGlyph(System.String,System.Drawing.Drawing2D.GraphicsPath,Aspose.TrueType.TTGlyph)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Ps2Pdf.GraphicsIO.Font.FontEmbedderType1" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Ps2Pdf.GraphicsIO.Font.FontIncluder" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Ps2Pdf.GraphicsIO.Pdf.PDFFontEmbedder" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.GraphicsIO.Pdf.PDFGraphics2D.ShowCharacterCodes(System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Ps2Pdf.GraphicsIO.Pdf.PDFPaintDelayQueue" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.GraphicsIO.Pdf.PDFRedundanceTracker.GetReference(System.Object,System.Object,Aspose.Ps2Pdf.GraphicsIO.Pdf.PDFRedundanceTracker.Writer)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Ps2Pdf.Util.Io.StandardFileFilter" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.IO.PushbackInputStream.#ctor(Aspose.Ps2Pdf.Util.IO.StreamEx,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.IO.PushbackInputStream.Read" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.IO.PushbackInputStream.Read(System.Byte[],System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.IO.PushbackInputStream.Skip(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.Stack.CopyInto(System.Object[])" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.Stack.EnsureCapacityHelper(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.Stack.Elements" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.Stack.Contains(System.Object)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.Stack.IndexOf(System.Object)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.Stack.IndexOf(System.Object,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.Stack.LastIndexOf(System.Object)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.Stack.LastIndexOf(System.Object,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.Stack.ElementAt(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.Stack.LastElement" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.Stack.SetElementAt(System.Object,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.Stack.RemoveElementAt(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.Stack.InsertElementAt(System.Object,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.Stack.Get(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.Stack.Set(System.Int32,System.Object)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.Stack.Add(System.Int32,System.Object)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.Stack.Remove(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Ps2Pdf.Util.Stack.addAll(System.Int32,System.Collections.ICollection)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Shared.Svg.Aps.ApsGeometryUtils.GetArcAngle(System.Drawing.PointF,System.Drawing.PointF,System.Boolean,System.Boolean,System.Single@,System.Single@,System.Int32@)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Shared.Svg.Aps.ApsPathBuilder.AddClipInfo(System.Drawing.SizeF,Aspose.Shared.Svg.Model.SvgNode)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Shared.Svg.Model.Text.TextPath" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.XpsToAps.XpsGeometryUtils.GetArcAngle(System.Drawing.PointF,System.Drawing.PointF,System.Boolean,System.Boolean,System.Single@,System.Single@,System.Int32@)" -->
    <member name="T:TabAlignmentType">
      <summary>
            Enumerates the tab alignment types.
            </summary>
    </member>
    <member name="F:TabAlignmentType.Left">
      <summary>
            Text aligned left from tab stop
            </summary>
    </member>
    <member name="F:TabAlignmentType.Center">
      <summary>
            Text aligned center from tab stop
            </summary>
    </member>
    <member name="F:TabAlignmentType.Right">
      <summary>
            Text aligned right from tab stop
            </summary>
    </member>
    <member name="T:TabLeaderType">
      <summary>
            Enumerates the tab leader types.
            </summary>
    </member>
    <member name="F:TabLeaderType.Solid">
      <summary>
            Solid tab leader.
            </summary>
    </member>
    <member name="F:TabLeaderType.Dash">
      <summary>
            Dash tab leader.
            </summary>
    </member>
    <member name="F:TabLeaderType.Dot">
      <summary>
            Dot tab leader.
            </summary>
    </member>
    <member name="F:TabLeaderType.None">
      <summary>
            No tab leader.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.apps.Fop" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.apps.FopFactory.newFop(System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.apps.FopFactory.newFop(System.String,Float2Fixed.apps.FOUserAgent)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.apps.FopFactory.newFop(System.String,System.IO.Stream)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.apps.FopFactory.newFop(System.String,Float2Fixed.apps.FOUserAgent,System.IO.Stream)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.apps.FopFactory.setBreakIndentInheritanceOnReferenceAreaBoundary(System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.apps.FOUserAgent" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.datatypes.URISpecification" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.datatypes.ValidationPercentBaseContext" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.datatypes.INumeric" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.events.IEventProducer" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.area.BookmarkData.#ctor" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.area.BookmarkData.#ctor(System.String,System.Boolean,Float2Fixed.area.PageViewport,System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.area.IResolvable" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.complexscripts.fonts.GlyphTable.matchLookupSpecs(System.String,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.complexscripts.fonts.GlyphTable.matchLookups(System.String,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.complexscripts.fonts.GlyphTable.LookupSpec" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.complexscripts.util.GlyphSequence.setPredication(System.Int32,System.String,System.Object)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.complexscripts.util.GlyphSequence.CharAssociation.setPredication(System.String,System.Object)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.complexscripts.util.GlyphSequence.CharAssociation.mergePredication(System.String,System.Object)" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.fonts.FontSelector" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.fonts.FontInfo" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fonts.FontInfo.fontLookup(System.String,System.String,System.Int32,System.Int32,System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fonts.FontInfo.fontLookup(System.String,System.String,System.Int32,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fonts.FontInfo.fontLookup(System.String[],System.String,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fonts.IFontMetrics.getWidths" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.expr.NumericProperty.#ctor(System.Double,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.expr.RelativeNumericProperty.getTableUnits" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.fo.flow.Button" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.fo.flow.EditBox" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.Float.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.ExternalGraphic.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.FootnoteBody.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.InitialPropertySet.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.InstreamForeignObject.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.InlineContainer.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.MultiProperties.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.MultiPropertySet.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.fo.flow.MultiToggle" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.MultiToggle.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.PageNumber.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.MultiSwitch.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.Footnote.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.table.EffRow.getBreakBefore" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.table.EffRow.getBreakAfter" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.table.TableAndCaption.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.table.TableCaption.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.table.Table.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.table.TableCell.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.table.TableColumn.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.table.TablePart.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.table.TableRow.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.AbstractListItemPart.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.AbstractRetrieveMarker.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.Block.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.fo.flow.ListItemBody" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.fo.flow.ListItemLabel" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.fo.flow.Wrapper" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.Wrapper.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.fo.flow.ListBlock" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.ListBlock.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.fo.flow.ListItem" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.ListItem.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.BlockContainer.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.fo.flow.Marker" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.Marker.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.AbstractPageNumberCitation.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.Character.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.Inline.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.flow.Leader.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.fo.properties.BackgroundPositionShorthand" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.fo.properties.PropertyCache" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.fo.extensions.IExtensionAttachment" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.XMLObj.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.Title.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.Flow.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.ConditionalPageMasterReference.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.PageSequenceWrapper.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.SinglePageMasterReference.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.RepeatablePageMasterReference.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.RegionBody.getColumnCount" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.RepeatablePageMasterAlternatives.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.StaticContent.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.bookmarks.Bookmark.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.bookmarks.Bookmark.getChildBookmarks" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.bookmarks.BookmarkTitle.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.bookmarks.BookmarkTree.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.bookmarks.BookmarkTree.getBookmarks" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.ColorProfile.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.Declarations.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.LayoutMasterSet.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.PageSequenceMaster.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.Region.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.Root.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.pagination.SimplePageMaster.validateChildNode(Float2Fixed.SAX.ILocator,System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.FObj.isBlockItem(System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.FObj.isInlineItem(System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.FObj.isNeutralItem(System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "F:Float2Fixed.fo.FONode.locator" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.FONode.getFOEventHandler" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.FONode.canHaveMarkers" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.FOPropertyMapping.addPropertyMaker(System.String,Float2Fixed.fo.properties.PropertyMaker)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.fo.FOPropertyMapping.addSubpropMakerName(System.String,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.fo.XMLWhiteSpaceHandler" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.layoutmgr.BreakingAlgorithm" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.layoutmgr.SpaceResolver.performConditionalsNotification(System.Collections.Generic.List{Float2Fixed.IElement},System.Int32,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.layoutmgr.PageProvider.getStartingPartIndexForLastPage(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.render.aps.ApsRenderer" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.render.aps.ApsRenderer.breakOutOfStateStack" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.render.intermediate.extensions.GoToXYAction.getPageIndex" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.render.intermediate.extensions.GoToXYAction.getTargetLocation" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.render.intermediate.IFContext" -->
    <!-- Badly formed XML comment ignored for member "F:Float2Fixed.render.intermediate.IFContext.foreignAttributes" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.render.intermediate.IFContext.getForeignAttributes" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.render.intermediate.IFContext.setForeignAttributes(System.Collections.Generic.Dictionary{Float2Fixed.QName,System.Object})" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.render.intermediate.IFDocumentHandler" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.render.intermediate.IFPainter" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.render.IRenderer" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.proxy.SecurityProxy.Invoke(System.Object,System.Reflection.MethodInfo,System.Object[])" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.traits.MinOptMax.getInstance(System.Int32,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.traits.MinOptMax.plusMin(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.traits.MinOptMax.minusMin(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.traits.MinOptMax.plusMax(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.traits.MinOptMax.minusMax(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.util.DOM2SAX" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.util.XMLUtil.getAttributeAsPositionAdjustments(Float2Fixed.SAX.IAttributes,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.util.text.AdvancedMessageFormat.format(System.Collections.Generic.Dictionary{System.String,System.Object})" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.util.text.AdvancedMessageFormat.format(System.Collections.Generic.Dictionary{System.String,System.Object},System.Text.StringBuilder)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.util.ListUtil.getLast``1(System.Collections.Generic.List{``0})" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.util.ListUtil.removeLast``1(System.Collections.Generic.List{``0})" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.util.ColorUtil" -->
    <!-- Badly formed XML comment ignored for member "F:Float2Fixed.util.ColorUtil.colorMap" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.util.ColorUtil.parseColorString(Float2Fixed.apps.FOUserAgent,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.util.ColorUtil.colorTostring(System.Drawing.Color)" -->
    <!-- Badly formed XML comment ignored for member "T:Float2Fixed.hyphenation.Hyphenation" -->
    <!-- Badly formed XML comment ignored for member "M:Float2Fixed.ImageInfo.getOriginalImage" -->
    <!-- Badly formed XML comment ignored for member "T:Common.Factory.Impl.DefaultApsPrimitivesCreatorFactory" -->
    <!-- Badly formed XML comment ignored for member "M:LaTeX2Aps.Converter.AbstractDocument.Builder.Document.AddImage(System.String,System.Single,System.Single,LaTeX2Aps.IResourceLoadingCallback)" -->
    <!-- Badly formed XML comment ignored for member "M:LaTeX2Aps.Converter.AbstractDocument.Builder.Document.AddImage(System.String,LaTeX2Aps.IResourceLoadingCallback)" -->
    <!-- Badly formed XML comment ignored for member "F:LaTeX2Aps.Converter.AbstractDocument.Builder.DocumentContextPosition.isFootnote" -->
    <!-- Badly formed XML comment ignored for member "P:LaTeX2Aps.Converter.AbstractDocument.Builder.DocumentContextPosition.IsFootnote" -->
    <!-- Badly formed XML comment ignored for member "M:LaTeX2Aps.Converter.AbstractDocument.IDocumentBuilder.AddImage(System.String,LaTeX2Aps.IResourceLoadingCallback)" -->
    <!-- Badly formed XML comment ignored for member "M:LaTeX2Aps.Converter.Domain.Parser.ParseToken(System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "F:LaTeX2Aps.Converter.Entities.FormulaMaker.TextEnvironment" -->
    <!-- Badly formed XML comment ignored for member "M:LaTeX2Aps.Converter.JavaCC.ParseException.#ctor(LaTeX2Aps.Converter.JavaCC.Token,System.Int64[][],System.String[])" -->
    <!-- Badly formed XML comment ignored for member "M:LaTeX2Aps.Converter.Tools.Extractor.ExtractOneArgCommand(System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:LaTeX2Aps.Converter.Tools.LaTeXUtils.GetLogicalDownBound(Common.Adapters.Primitives.ApsNode,System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "F:LaTeX2Aps.Converter.Tools.CoordType.Decartes" -->
    <!-- Badly formed XML comment ignored for member "F:LaTeX2Aps.Converter.Tools.CoordType.Screen" -->
  </members>
</doc>